db_id,train_example
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the highest eligible free rate for K-12 students in the schools in Alameda County? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Please list the lowest three eligible free rates for students aged 5-17 in continuation schools. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Please list the zip code of all the charter schools in Fresno County Office of Education. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the unabbreviated mailing address of the school with the highest FRPM count for K-12 students?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Please list the phone numbers of the direct charter-funded schools that are opened after 2000/1/1. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: How many schools with an average score in Math under 400 in the SAT test are exclusively virtual? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Among the schools with the SAT test takers of over 500, please list the schools that are magnet schools or offer a magnet program. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the phone number of the school that has the highest number of test takers with an SAT score of over 1500?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the number of SAT test takers of the schools with the highest FRPM count for K-12 students?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Among the schools with the average score in Math over 560 in the SAT test, how many schools are directly charter-funded?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: For the school with the highest average score in Reading in the SAT test, what is its FRPM count for students aged 5-17?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Please list the codes of the schools with a total enrollment of over 500. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Among the schools with an SAT excellence rate of over 0.3, what is the highest eligible free rate for students aged 5-17? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Please list the phone numbers of the schools with the top 3 SAT excellence rate. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: List the top five schools, by descending order, from the highest to the lowest, the most number of Enrollment (Ages 5-17). Please give their NCES school identification number.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Which active district has the highest average score in Reading?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: How many schools in merged Alameda have number of test takers less than 100?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the charter number of the school that the average score in Writing is 499?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: How many schools in Contra Costa (directly funded) have number of test takers not more than 250?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the phone number of the school that has the highest average score in Math?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: How many schools in Amador which the Low Grade is 9 and the High Grade is 12?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: In Los Angeles how many schools have more than 500 free meals but less than 700 free or reduced price meals for K-12?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Which school in Contra Costa has the highest number of test takers?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Give the names of the schools with the percent eligible for free meals in K-12 is more than 0.1 and test takers whose test score is greater than or equal to 1500?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Name schools in Riverside which the average of average math score for SAT is grater than 400, what is the funding type of these schools? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the average score in writing for the schools that were opened after 1991 or closed before 2000? List the school names along with the score. Also, list the communication number of the schools if there is any. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: When did the first-through-twelfth-grade school with the largest enrollment open? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Which cities have the top 5 lowest enrollment number for students in grades 1 through 12? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the eligible free or reduced price meal rate for the top 5 schools in grades 1-12 with the highest free or reduced price meal count of the schools with the ownership code 66? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: If there are any, what are the websites address of the schools with a free meal count of 1,900-2,000 to students aged 5-17? Include the name of the school.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the free rate for students between the ages of 5 and 17 at the school run by Kacey Gibson? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the administrator's email address of the chartered school with the fewest students enrolled in grades 1 through 12? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Under whose administration does the school with the highest number of test takers whose total SAT Scores are greater or equal to 1500 belong to? Indicate his or her full name. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What are the webpages for the Los Angeles County school that has between 2,000 and 3,000 test takers?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the telephone number for the school with the lowest average score in reading in Fresno Unified? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Which exclusively virtual schools have the top 5 highest average reading scores? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the type of education offered in the school who scored the highest average in Math?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the average math score of the school with the lowest average score for all subjects, and in which county is it located? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the average writing score of the school who has the highest number of test takers whose total SAT sscores are greater or equal to 1500? Indicate the city to where the school is situated.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the average writing score of each of the schools managed by Ricci Ulrich? List the schools and the corresponding average writing scores. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Which state special schools have the highest number of enrollees from grades 1 through 12? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Which different county has the most number of closed schools? Please provide the name of each school as well as the closure date. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the postal street address for the school with the 6th highest Math average? Indicate the school's name. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: In which mailing street address can you find the school that has the lowest average score in reading? Also give the school's name.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the total number of schools whose total SAT scores are greater or equal to 1500 whose mailing city is Lakeport? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: How many test takers are there at the school/s whose mailing city address is in Fresno?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Please specify all of the schools and their related mailing zip codes that are under Avetik Atoian's administration.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Of the schools with a mailing state address in California, what is the ratio of the schools located in the county of Colusa against the school located in the county of Humboldt? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Of all the schools with a mailing state address in California, how many are active in San Joaquin?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the phone number and extension number for the school that had the 333rd highest average writing score?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the phone number and extension number for the school with the zip code 95203-3704? Indicate the school's name.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the website for the schools under the administrations of Mike Larson and Dante Alvarez?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What are the websites for all the partially virtual chartered schools located in San Joaquin? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: How many chartered schools located in the city of Hickman are owned by the Elementary School District? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: In chartered schools with charter number 00D2, what are the names of all the administrators? Include the name of the school and the city to which it belongs 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the total number of schools with a mailing city in Hickman belonging to the charter number 00D4?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the ratio in percentage of Santa Clara County schools that are locally funded compared to all other types of charter school funding? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Between 1/1/2000 to 12/31/2005, how many directly funded schools opened in the county of Stanislaus? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the total amount of Community College District closure in 1989 in the city of San Francisco?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Which county reported the most number of school closure in the 1980s with school wonership code belonging to Youth Authority Facilities (CEA)? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Please provide the National Center for Educational Statistics school district identification number for all schools with a School Ownership Code that are part of the State Special Schools. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: How many active and closed District Community Day Schools are there in the county of Alpine?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the district code for the School that does not offer a magnet program in the city of Fresno? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: How many students from the ages of 5 to 17 are enrolled at the State Special School school in Fremont for the 2014-2015 academic year? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the free or reduced price meal count for ages 5 to 17 in the Youth Authority School with a mailing street address of PO Box 1040?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the lowest grade for the District Special Education Consortia School with National Center for Educational Statistics school district identification number of 613360? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the educational level name for the schools with Breakfast Provision 2 in county code 37? Indicate the name of the school.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the city location of the high school level school with Lunch Provision 2 whose lowest grade is 9 and the highest grade is 12 in the county of Merced? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Which schools served a grade span of Kindergarten to 9th grade in the county of Los Angeles and what is its Percent (%) Eligible FRPM (Ages 5-17)? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the most common type of grade span served in the city of Adelanto?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Between San Diego and Santa Barbara, which county offers the most number of schools that does not offer physical building? Indicate the amount. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the school type of the school with the highest latitude? Indicate the name of the school as well as the latitude coordinates.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: In which city can you find the school in the state of California with the lowest latitude coordinates and what is its lowest grade? Indicate the school name. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the grade span offered in the school with the highest longitude?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What are the two most common first names among the school administrators? Indicate the district to which they administer.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the administrator's last name that oversees the school with Charter number 40? Indicate the district, the county where the school is situated, and the name of the school.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the e-mail address of the administrator of the school located in the San Bernardino county, District of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Scools? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the administrator's email address for the school with the highest number of test takers who received SAT scores of at least 1500?Provide the name of the school.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many accounts who choose issuance after transaction are staying in East Bohemia region? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many accounts who have region in Prague are eligible for loans? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: The average unemployment ratio of 1995 and 1996, which one has higher percentage? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: List out the no. of districts that have female average salary is more than 6000 but less than 10000? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many male customers who are living in North Bohemia have average salary greater than 8000? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: List out the account numbers of clients who are youngest and have highest average salary? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many customers who choose statement of weekly issuance are Owner? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: List out the clients who choose statement of issuance after transaction are Disponent? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Among the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Among the account opened, how many female customers who were born before 1950 and stayed in Slokolov? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: List out the accounts who have the earliest trading date in 1995 ?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: State different accounts who have account opening date before 1997 and own an amount of money greater than 3000USD
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Which client issued his/her card in 1994/3/3, give his/her client id.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: The transaction of 840 USD happened in 1998/10/14, when was this account opened?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: There was a loan approved in 1994/8/25, where was that account opened, give the district Id of the branch.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What is the biggest amount of transaction that the client whose card was opened in 1996/10/21 made?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What is the gender of the oldest client who opened his/her account in the highest average salary branch? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: For the client who applied the biggest loan, what was his/her first amount of transaction after opened the account?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many clients opened their accounts in Jesenik branch were women? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What is the disposition id of the client who made 5100 USD transaction in 1998/9/2?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many accounts were opened in Litomerice in 1996? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: For the female client who was born in 1976/1/29, which district did she opened her account? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: For the client who applied 98832 USD loan in 1996/1/3, when was his/her birthday?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: For the first client who opened his/her account in Prague, what is his/her account ID? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: For the client who first applied the loan in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What is the percentage of loan amount that has been fully paid with no issue. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: For loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: For accounts in 1993 with statement issued after transaction, list the account ID, district name and district region. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: From Year 1995 to 2000, who are the accounts holders from 'east Bohemia'. State the account ID the frequency of statement issuance. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: List account ID and account opening date for accounts from 'Prachatice'. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: State the district and region for loan ID '4990'. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Provide the account ID, district and region for loan amount greater than USD300,000. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: List the loan ID, district and average salary for loan with duration of 60 months. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Calculate the percentage of account from 'Decin' district for all accounts are opened in 1993. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: List the account IDs with monthly issuance of statements. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: List the top ten districts, by descending order, from the highest to the lowest, the number of female account holders. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Which are the top ten withdrawals (non-credit card) by district names for the month of January 1996? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many of the account holders in South Bohemia still do not own credit cards? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Which district has highest active loan? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What is the average loan amount by male borrowers? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: In 1996, which districts have the highest unemployment rate? List their branch location and district name. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: In the branch where the largest number of crimes were committed in 1996, how many accounts were opened? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: After making a credit card withdrawal, how many account/s with monthly issuance has a negative balance? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Between 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many accounts have running contracts in Branch location 1? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many high-level credit cards have ""disponent"" type of disposition? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many accounts are there in the district of ""Pisek""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Which districts have transactions greater than USS$10,000 in 1997?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Which accounts placed orders for household payment in Pisek? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What are the accounts that have both gold and junior credit cards?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How much is the average amount in credit card made by account holders in a month, in year 2021? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Who are the account holder identification numbers whose spent per month on the credit card is less than the average, in 1998? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Who are the female account holders who own credit cards and also have loans? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many female clients' accounts are in the region of South Bohemia? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Please list the accounts whose district is Tabor that are eligible for loans. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many accounts in North Bohemia has made a transaction with the partner's bank being AB? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Please list the name of the districts with accounts that made withdrawal transactions. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What is the average number of crimes committed in 1995 in regions where the number exceeds 4000 and the region has accounts that are opened starting from the year 1997? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many 'classic' cards are eligible for loan? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many male clients in 'Hl.m. Praha' district? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many percent of 'Gold' cards were issued prior to 1998? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Who is the owner of the account with the largest loan amount?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What is the number of committed crimes in 1995 in the district of the account with the id 532? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What is the district Id of the account that placed the order with the id 33333?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: List all the withdrawals in cash transactions that the client with the id 3356 makes. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Among the weekly issuance accounts, how many have a loan of under 200000? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What type of credit card does the client with the id 13539 own?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What is the region of the client with the id 3541 from? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Which district has the most accounts with loan contracts finished with no problems? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Who placed the order with the id 32423?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Please list all the transactions made by accounts from district 5.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many of the accounts are from Jesenik district?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: List all the clients' IDs whose junior credit cards were issued after 1996. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many credit card withdrawals were recorded after 1995? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What was the difference in the number of crimes committed in East and North Bohemia in 1996? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many owner and disponent dispositions are there from account number 1 to account number 10?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What year was account owner number 130 born?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many accounts have an owner disposition and request for a statement to be generated upon a transaction? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What is the amount of debt that client number 992 has, and how is this client doing with payments?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What is the sum that client number 4's account has following transaction 851? Who owns this account, a man or a woman?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Which kind of credit card does client number 9 possess?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How much, in total, did client number 617 pay for all of the transactions in 1998?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Please provide a list of clients who were born between 1983 and 1987 and whose account branch is in East Bohemia, along with their IDs.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Please provide the IDs of the 3 female clients with the largest loans. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many male customers who were born between 1974 and 1976 have made a payment on their home in excess of $4000? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many accounts in Beroun were opened after 1996?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many female customers have a junior credit card? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What proportion of customers who have accounts at the Prague branch are female? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What percentage of male clients request for weekly statements to be issued? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many clients who choose statement of weekly issuance are User? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Among the accounts who have loan validity more than 24 months, list out the accounts that have the lowest approved amount and have account opening date before 1997.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Name the account numbers of female clients who are oldest and have lowest average salary? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many clients who were born in 1920 stay in east Bohemia? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many loan accounts are for pre-payment of duration of 24 months with weekly issuance of statement. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What is the average amount of loan which are still on running contract with statement issuance after each transaction? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: List all ID and district for clients that can only have the right to issue permanent orders or apply for loans. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Provide the IDs and age of the client with high level credit card, which is eligible for loans. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the most common bond type? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: In the non-carcinogenic molecules, how many contain chlorine atoms? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Calculate the average number of oxygen atoms in single-bonded molecules. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: On average how many carcinogenic molecules are single bonded? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: In the molecule containing sodium atoms, how many are non-carcinogenic? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Find the triple-bonded molecules which are carcinogenic. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the percentage of carbon in double-bond molecules? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many triple type bonds are there? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: In how many atoms is there no bromine? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Of the first 100 molecules in number order, how many are carcinogenic? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Identify by their ID the molecules in which there is silicon. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What elements are in the TR004_8_9 bond atoms? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What elements are in a double type bond? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Which type of label is the most numerous in atoms with hydrogen? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Tellurium is in what type of bond? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What atoms are connected in single type bonds? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Indicate which atoms are connected in non-carcinogenic type molecules. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Which element is the least numerous in non-carcinogenic molecules? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What type of bond is there between the atoms TR004_8 and TR004_20? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What type of label is not on molecules with atoms with tin? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many atoms with iodine and sulfur type elements are there in single bond molecules? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Identify all connected atoms with a triple bond. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Identify all the atoms that are connected to the atoms of the TR181 molecule. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What percentage of carcinogenic-type molecules does not contain fluorine? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the percentage of carcinogenic molecules in triple type bonds? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Please list top three elements of the toxicology of the molecule TR000 in alphabetical order. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What are the atoms that are bonded in the molecule TR001 with the bond ID of TR001_2_6? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the difference between the number of molecules that are carcinogenic and those that are not? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What are the atom IDs of the bond TR_000_2_5? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What are the bond IDs that have the same atom ID 2 of TR000_2? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Please list top five molecules that have double bonds in alphabetical order. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the percentage of double bonds in the molecule TR008? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the percentage of molecules that are carcinogenic? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer in percentage. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the type of bond that molecule TR000 has when involved in any bonds? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What are the elements of the toxicology and label of molecule TR060? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Which bond type accounted for the majority of the bonds found in molecule TR018 and state whether or not this molecule is carcinogenic? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Please list top two bonds that happened with the molecule TR006 in alphabetical order. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many bonds which involved atom 12 does molecule TR009 have? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many molecules are carcinogenic and have the bromine element? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What are the bond type and the atoms of the bond ID of TR001_6_9? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Which molecule does the atom TR001_10 belong to? Please state whether this molecule is carcinogenic or not. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many molecules have a triple bond type? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many connections does the atom 19 have? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: List all the elements of the toxicology of the molecule ""TR004"". 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many of the molecules are not carcinogenic? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Among all the atoms from 21 to 25, list all the molecules that are carcinogenic. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What are the bonds that have phosphorus and nitrogen as their atom elements? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Is the molecule with the most double bonds carcinogenic? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the average number of bonds the atoms with the element iodine have? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: List the bond type and the bond ID of the atom 45. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: List all the elements of atoms that can not bond with any other atoms. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What are the atoms of the triple bond with the molecule ""TR447""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What are the elements of the atoms of TR144_8_19? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Of all the carcinogenic molecules, which one has the most double bonds? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the least common element of all carcinogenic molecules? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What are the atoms that can bond with the atom that has the element lead? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: List the elements of all the triple bonds. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What percentage of bonds have the most common combination of atoms' elements? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What proportion of single bonds are carcinogenic? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Calculate the total atoms consisting of the element carbon and hydrogen. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: List down atom id2 for atoms with element sulfur. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What are the bond type for atoms with element Tin? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many elements are there for single bond molecules? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Calculate the total atoms with triple-bond molecules containing the element phosphorus or bromine. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Write down bond id for molecules that are carcinogenic. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Among the single bond molecule id, which molecules are not carcinogenic? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the composition of element chlorine in percentage among the single bond molecules? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What are the labels for TR000, TR001 and TR002? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: List down the molecule id for non carcinogenic molecules. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Calculate the total carcinogenic molecules for molecule id from TR000 to TR030. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: List down the bond type for molecules from molecule id TR000 to TR050. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What are the elements for bond id TR001_10_11? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many bond id have element iodine? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Among the molecules with element Calcium, are they mostly carcinogenic or non carcinogenic? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Does bond id TR001_1_8 have both element of chlorine and carbon? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: List down two molecule id of triple bond non carcinogenic molecules with element carbon. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the percentage of element chlorine in carcinogenic molecules? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: List the toxicology elements associated with molecule TR001. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Give me the molecule ID of the double bond type. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Write down the atom IDs of the first and second atoms of triple bond type molecules. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What are the toxicology elements associated with bond ID TR005_16_26? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many of the single bond type molecules are non-carcinogenic? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the label for bond ID TR001_10_11? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Enumerate the bond ID of triple bond type molecules and tell me if they are carcinogenic or not. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Tally the toxicology element of the 4th atom of each molecule that was carcinogenic. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the ratio of Hydrogen elements in molecule ID TR006? Please indicate its label. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Identify whether the chemical compound that contains Calcium is carcinogenic. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Determine the bond type that is formed in the chemical compound containing element Tellurium. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Name chemical elements that form a bond TR001_10_11. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Among all chemical compounds identified in the database, what percent of compounds form a triple-bond. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Among all chemical compounds that contain molecule TR047, identify the percent that form a double-bond. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Identify whether the molecule that contains atom TR001_1 is carcinogenic. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Is molecule TR151 carcinogenic? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Which toxic element can be found in the molecule TR151? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many chemical compounds in the database are identified as carcinogenic. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Identify the atoms belong to the molecule with ID between TR010 to TR050 that contain the element carbon. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many atoms belong to the molecule labeled with carcinogenic compounds? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Which bond ids are double-bond with carcinogenic compound? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many atoms belong to the molecule that element is hydrogen and labeled with carcinogenic compound? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Indicate the molecule id is belonging to the TR00_1_2 bond that has the first atom named TR00_1.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Among the atoms that contain element carbon, which one does not contain compound carcinogenic? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Calculate the percentage of molecules containing carcinogenic compounds that element is hydrogen. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Is molecule TR124 carcinogenic? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What atoms comprise TR186? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the bond type of TR007_4_19? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Name the elements that comprise the atoms of bond TR001_2_4. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many double bonds does TR006 have and is it carcinogenic? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: List all carcinogenic molecules and their elements. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Name all bonds with single bond types and what atoms are connected to the molecules. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Which molecules have triple bonds and list all the elements they contain. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Name the atoms' elements that form bond TR000_2_3. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many bonds are created by bonding atoms with chlorine element? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: List out the atom id that belongs to the TR346 molecule and how many bond type can be created by this molecule?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many molecules have a double bond type and among these molecule, how many are labeled as carcinogenic compound? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many molecules without sulphur element is not having double bond? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the carcinogenic label for bond TR001_2_4? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many atoms belong to molecule id TR005?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many single bonds are there in the list? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Among the molecules which contain ""cl"" element, which of them are carcinogenic? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Among the molecules which contain ""c"" element, which of them are not carcinogenic? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Calculate the percentage of carcinogenic molecules which contain the Chlorine element. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the molecule id of bond id TR001_1_7?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many elements are contained in bond_id TR001_3_4? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the type of the bond which is presenting the connection between two atoms TR000_1 and TR000_2? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the molecule of atom id ""TR000_2"" and atom id 2 ""TR000_4""?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the element of toxicology for the atom with the ID of TR000_1? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Is molecule TR000 is carcinogenic or not? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Find the percentage of atoms with single bond. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many carcinogenic molecules that consisted of Nitrogen? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Which molecule consisted of Sulphur atom with double bond? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Which non-carcinogenic molecules consisted more than 5 atoms? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: List all the elements with double bond, consisted in molecule TR024. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Which carcinogenic molecule have the highest number of atoms consisted in it? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Calculate the percentage of carcinogenic molecules with triple bonded Hidrogen atoms. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many of the molecules are carcinogenic? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Among the molecules between TR004 to TR010, how many of them has single bonds? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: In the molecule TR008, how many carbons are present? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the element with the atom ID of TR004_7 in molecule that is not carcinogenic? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the total number of molecules with double bonded oxygen? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: in molecules with triple bonds, how many of them are not carcinogenic? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: List the element and bond type included in the molecule with molecule ID of TR016. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the atom ID of double bonded carbon in TR012 molecule? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: List the atom ID of the carcinogenic molecule that contains oxygen? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Which are the cards that have incredibly powerful foils. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What are the borderless cards available without powerful foils? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: List the card names with value that cost more converted mana for the face. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Name all cards with 2015 frame style ranking below 100 on EDHRec. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: List all the mythic rarity print cards banned in gladiator format. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: For artifact type of cards that do not have multiple faces on the same card, state its legalities for vintage play format. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: List all the card id and artist with unknown power which are legal for commander play format. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Find all cards illustrated by Stephen Daniel and describe the text of the ruling of these cards. State if these cards have missing or degraded properties and values. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Describe the information about rulings for card named 'Sublime Epiphany' with number 74s. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Name the card and artist with the most ruling information. Also state if the card is a promotional printing. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: State the alternative languages available for card named Annul numbered 29. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Name all the cards which have alternative language in Japanese. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Calculate the percentage of the cards availabe in Chinese Simplified. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: List all the sets available in Italian translation. State the total number of cards per set. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many types of cards does the artist Aaron Boyd illustrated about card art? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the keyword found on card 'Angel of Mercy'? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards have infinite power? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What type of promotion is of card 'Duress'? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the border color of card ""Ancestor's Chosen""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the type of the card ""Ancestor's Chosen"" as originally printed? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: cards are not directly linked to language but through table 'set'. you need to add set in covered table & rephrase your question
What are the languages available for the set that card 'Angel of Mercy' is in? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards of legalities whose status is restricted have text boxes? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the description about the ruling of card ""Condemn""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards of legalities whose status is restricted are found in a starter deck? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the status of card ""Cloudchaser Eagle""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the type of card ""Benalish Knight""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the rule of playing card ""Benalish Knight""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Please provide the names of the artists who illustrated the card art in Phyrexian. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the percentage of borderless cards? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards that illusrtated in German have been reprinted? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many borderless cards are illustrated in Russian? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the percentage of cards whose language is French among the Story Spotlight cards? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards are there with toughness of 99?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Name the cards that were illustrated by Aaron Boyd. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many black border cards are only available on mtgo? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: List down all the card IDs with converted mana cost of 0. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What are the card layout of cards with keyword of flying?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards with original type of ""Summon - Angel"" have subtype other than ""Angel""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What are the foiled cards that are incredibly powerful when paired with non foiled cards? List the IDs. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What are the cards belong to duel deck a? List the ID. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: List the edhrecRank for cards with frame version 2015.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: List down the name of artists for cards in Chinese Simplified. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What are the cards that only available in paper and Japanese language? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many of the banned cards are white border? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: List down the uuid for legacy cards and the foreign language of these cards. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Write down the ruling of Beacon of Immortality. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards are having future frame version and what are the legality status of these cards? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What are the cards for set OGW? State the colour for these cards. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What are the cards in set 10E with converted mana of 5 have translation and what are the languages? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: List down the name of cards with original types of Creature - Elf and the date of rulings for these cards. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What are the colors of cards from ID 1-20? What are the format of these cards? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Among the Artifact cards, which are black color and comes with foreign languague translation? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Pick 3 cards with rarity of uncommon, list down name these cards according to ascending order of it's ruling date. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: On how many cards designed by John Avon is its foil non-powerful? John Avon refer to artist; foil poweful foils refers to cardKingdomId and cardKingdomFoildId is NOT NULL
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many white bordered cards are powerful? white bordered cards refer to borderColor = 'white'; powerful cards refers to cardKingdomFoilId = cardKingdomId AND cardKingdomId is not null (replace)
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards designed by UDON and available in mtgo print type has a starting maximum hand size of -1? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards with a 1993 frame version and available on paper have a sensitive content warning? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper and mtgo? available in paper refers to availability = 'paper'; available in mtgo refers to availability = 'mtgo; frameVersion = 2003;borderColor = 'black'
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How much unconverted mana do all the cards created by Rob Alexander cost in total? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Lists all types of cards available in arena. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Lists the set code of all cards translated into Spanish. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What percentage of legendary frame effect cards have a maximum starting maximun hand
size of +3? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the percentage of Story Spotlight cards that also have a text box? List them by their ID. Story Spotlight cards that do not have a text box refers to isStorylight = 1 and isTextless = 1; Percentage refer to DIVIDE(SUM(count(id) where isStorylight = 1), SUM(count(id))) * 100
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Calculate the percentage of cards in Spanish. List them by name. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Indicates the name of all the languages into which the set whose number of cards is 309 is translated. set refer to setCode; number of cards refers to baseSetSize; baseSetsize = 309
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many Brazilian Portuguese translated sets are inside the Commander block? Commander block refer to block = 'Commander'; sets refer to setCode; Portuguese refer to language = 'Portuguese (Brasil)'
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Lists by ID all Creature-type cards with legal status. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Lists all types of cards in German. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many null power cards contain info about the triggered ability 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Indicates the number of cards with pre-modern format, ruling text ""This is a triggered mana ability"" that do not have multiple faces. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: To which artist does the card with the text ""Das perfekte Gegenmittel zu einer dichten Formation"" belong?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards with print rarity have ruling text printed on 10/01/2009? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What language is the set of 180 cards that belongs to the Ravnica block translated into? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What percentage of cards with format commander and legal status do not have a content warning? do not have a content warning refers to hasContentWarning = 0; 
percentage refers to DIVIDE(COUNT(hasContentWarning = 0),COUNT(ID))*100 where 
format = 'commander' AND Status = 'legal';
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What percentage of cards without power are in French? in French refers to language = 'French'; cards without power refers to power IS NULL OR power = '*'; 
percentage = DIVIDE(COUNT(language = 'French' and power is NULL or power = '*'), COUNT( power is NULL or power = '*'))*100
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What percentage of Japanese translated sets are expansion sets? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What kind of printing is on the card that Daren Bader created? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many color cards with no borders have been ranked higher than 12000 on EDHRec? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards are oversized, reprinted, and printed for promotions? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Please list top three unknown power cards that have promotional types for arena league in alphabetical order. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the language of the card with the multiverse number 149934? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Please provide the ids of top three powerful pairs of Kingdom Foil and Kingdom Cards sorted by Kingdom Foil id in alphabetical order. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What proportion of cards do not have a text box with a normal layout? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What are the card numbers that don't have multiple faces on a single card and have the subtypes Angel and Wizard? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Please provide top three sets that don't appear in Magic: The Gathering Online, along with their names in in alphabetical order. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What languages are available in the set known as Archenemy on the magic card market and having the code ARC? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the name of set number 5 and its translation? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the language and expansion type of set number 206? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Shadowmoor block in alphabetical order.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Which set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set ID in your response. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Which Russian set of cards contains the most cards overall? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the percentage of the set of cards that have Chinese Simplified as the language and are only available for online games? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many sets are available just in Japanese and not in Magic: The Gathering Online? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many card border with black color ? List out the card id. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards have frame effect as extendedart? List out the id of those cards. 
frame effect as extendedart refers to frameEffects = 'extendedart'
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Among black card borders, which card has full artwork? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Point out the language of set id ""174""?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: List out the set name of the set code ""ALL"".
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Which foreign language used by ""A Pedra Fellwar""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: State the set code of the set with release date of 07/13/2007?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Mention the base set size and set code of the set that was in block named ""Masques"" and ""Mirage"".
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Give the code of sets have expansion type of 'expansion'? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Name the foreign name of the card that has boros watermark? List out the type of this card.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the language and flavor text of the card that has colorpie watermark? List out the type of this card.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is percentage of the cards with a converted Mana Cost of 10 in set of Abyssal Horror? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Give the code of sets have expansion commander type? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Name the foreign name of the card that has abzan watermark? List out the type of this card.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the language of the card that has azorius watermark? List out the type of this card.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Of all the cards that are designed by Aaron Miller, how many of them are incredibly powerful? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards available in paper have a positive starting maximum hand size? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Please list the names of the cards that have a text box. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What's the unconverted mana cost of the card ""Ancestor's Chosen""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Among the cards with a white border color, how many of them have unknown power? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Which of the cards that are a promotional painting have multiple faces on the same card? Please list their names. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What's the list of all types for the card ""Molimo, Maro-Sorcerer""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Please list the websites where I can purchase the cards that have the promotional type of ""bundle"". 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many artists have designed a card with a black border color and is available in both ""arena"" and ""mtgo"" printing type? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Which card costs more converted mana, ""Serra Angel"" or ""Shrine Keeper""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Which artist designed the card whose promotional name is ""Battra, Dark Destroyer""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Please list the names of the top 3 cards with the highest converted mana cost and have a 2003 card frame style. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What's the Italian name of the set of cards with ""Ancestor's Chosen"" is in? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many translations are there for the set of cards with ""Angel of Mercy"" in it? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Please list the names of the cards in the set ""Hauptset Zehnte Edition"". 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: For the set of cards with ""Ancestor's Chosen"" in it, is there a Korean version of it? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Among the cards in the set ""Hauptset Zehnte Edition"", how many of them are designed by Adam Rex? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards are there in the base set of ""Hauptset Zehnte Edition""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the Simplified Chinese translation of the name of the set ""Eighth Edition""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Did the set of cards with ""Angel of Mercy"" appear on Magic: The Gathering Online? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: When was the set of cards with ""Ancestor's Chosen"" released? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the expansion type of the set ""Hauptset Zehnte Edition""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Among the sets in the block ""Ice Age"", how many of them have an Italian translation? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Is the set of cards with Adarkar Valkyrie only available outside the United States? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Among the sets of cards that have an Italian translation, how many of them have a base set number of under 10? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards in the set Coldsnap have a black border color? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Please list the name of the cards in the set Coldsnap with the highest converted mana cost. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is card number 4 in the set Coldsnap? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Among the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the Italian flavor text of the card ""Ancestor's Chosen""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Please list all the foreign languages in which the card ""Ancestor's Chosen"" has a flavor text. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What's the German type of the card ""Ancestor's Chosen""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Please list the Italian text ruling of all the cards in the set Coldsnap. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: When was the ruling for the card 'Reminisce' created? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the percentage of incredibly powerful cards in the set Coldsnap? card set Coldsnap refers to name = 'Coldsnap'; foil is incredibly powerful refers to cardKingdomFoilId = cardKingdomId AND cardKingdomId is not null; the percentage of incredibly powerful cards in the set refers to DIVIDE(SUM(incredibly powerful), SUM(name = 'Coldsnap'))*100
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What's the code for the set which was released on 2017/7/14? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: List the keyrune code for the set whose code is 'PKHC'. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: For the set which had 'SS2' as the code, what is its magic card market id? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What's the magic card market name for the set which was released on 2017/6/9? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: For the set ""From the Vault: Lore"", what is its expansion type? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: For the set ""Commander 2014 Oversized"" , give its parent code. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: For all cards illustrated by Jim Pavelec. and describe the text of the ruling of these cards. Do these cards have missing or degraded properties and values. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What was the release date for the set which card ""Evacuation"" in it? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the number of cards are there in the set of ""Rinascita di Alara""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: List the expansion type of the set ""Huitième édition"". 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What's the French name of the set of cards with ""Tendo Ice Bridge"" is in? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many translations of the name of the set ""Salvat 2011""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Tell the Japanese name of the set which card ""Fellwar Stone"" is in it. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Which card name in the set 'Journey into Nyx Hero's Path' has the highest converted mana cost. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the release date for the set ""Ola de frío""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What was the expansion type for the set which card ""Samite Pilgrim"" in it? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards are there in the set 'World Championship Decks 2004' with the converted mana cost as '3'. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Show the Simplified Chinese translation of the name of the set ""Mirrodin""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: For all the set of cards that has Japanese translation, what is the percentage of them are only available in non-foil? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: For all the set of cards that has Brazil Portuguese translation, what is the percentage of them are only available online? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What are the available printing types of the cards that doesn't have a text box created by Aleksi Briclot? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the unique id of the set that has the highest number of cards? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Among the cards that doesn't have multiple faces on the same card, who is the illustrator of the card art that has the highest cost of converted mana? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the most common visual frame effects among the incredibly powerful foils? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards with unknown power that can't be found in foil is in duel deck A? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Among the sets whose expansion type is Commander, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: In duels, what are the top 10 cards with the highest uncoverted mana cost? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: When was the oldest mythic card released and what are its legal play formats? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards did Volkan BaÇµa illustrated whose foreign language is in French? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many rare enchantment Abundance cards are there whose play format status are all legal? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Which of the play formats has the highest number of banned status? Indicate the play format and the name of the card. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the language of the ""Battlebond"" set? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Who is the illustrator that illustrated the least amount of cards? List the format of play of the cards that he/she illustrated. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Among the cards whose version of frame style is 1997, what is the status of the card illustrated by D. Alexander Gregory in legacy play format that has sensitive content or Wizards of the Coast? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the annual average number of sets that were released between 1/1/2012 to 12/31/2015? Indicate the common langugage of the card. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: List the artists who illustrated cards with black borders which are available only in arena. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Find the uuid of cards in which the old school format is restricted or banned. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Among the card designed by Matthew D. Wilson, how many are available only in the paper? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: List the names of all the cards in the set Hour of Devastation and find the formats in which these cards are legal. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Find and list the names of sets which doesn't have Japanese translation but have Korean translation. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Which user has a higher reputation, Harlan or Jarrod Dixon? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Please list the display names of all the users whose accounts were created in the year 2014. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many users last accessed the website after 2014/9/1? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the display name of the user who has the most number of views? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Among the users who have more than 100 upvotes, how many of them have more then 1 downvotes? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many users with more than 10 views created their account after the year 2013? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many posts does the user csgillespie own? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Please list the titles of the posts owned by the user csgillespie? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Who is the owner of the post ""Eliciting priors from experts""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the title of the post that is owned by csgillespie and has the highest popularity? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the display name of the user who is the owner of the most valuable post? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the total number of comments of all the posts owned by csgillespie? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: For the post that got the most number of answers owned by csgillespie, how many answers did it get? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the display name of the user who last edited the post ""Examples for teaching: Correlation does not mean causation""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Among the posts owned by csgillespie, how many of them are root posts? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Please list the display names of all the users who owns a post that is well-finished. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Among the posts owned by an elder user, how many of them have a score of over 19? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the location of the owner of the post ""Eliciting priors from experts""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: From which post is the tag ""bayesian"" excerpted from? Please give the body of the post. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: From which post is the most popular tag excerpted from? Please give the body of the post. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many badges has the user csgillespie obtained? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Please list the names of the badges obtained by csgillespie. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Among the badges obtained by csgillespie, how many of them were obtained in the year 2011? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the display name of the user who has obtained the most number of badges? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the average score of the posts owned by the user csgillespie? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the average number of badges obtained by a user with over 200 views? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Among the posts with a score of over 20, what is the percentage of them being owned by an elder user? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many votes did the user No.58 take on 2010/7/19? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Indicate the creation date of the maximum number of votes. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Give the number of ""Revival"" badges. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the title for the post which got the highest score comment? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: For the post which got 1910 view counts, how many comments does it get?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Give the only one comment text of the post with parent id 107829. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: User No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: For the owner user of post No. 65041, what is his/her reputation points? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: For the user with the display name of ""Tiago Pasqualini"", how many posts did he/she own? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Provide the display name of the user who made the vote No.6347. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Give the number of votes for the post about data visualization. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: For the user whose display name is ""DatEpicCoderGuyWhoPrograms"", what is his/her badge's name? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: For the user No.24, how many times is the number of his/her posts compared to his/her votes? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Write the contents of comments with a score of 17. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Which user has the website URL listed at 'http://stackoverflow.com' 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the badge name that user 'SilentGhost' obtained? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Name the user that commented 'thank you user93!' 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Write all comments made by user 'A Lion.' 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Which user made a post titled 'Understanding what Dassault iSight is doing?' and how much is the reputation of the user? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Write all comments made on the post titled 'How does gentle boosting differ from AdaBoost?' 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Name 10 users with the badge name 'Necromancer.' 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Who is the editor of the post titled 'Open source tools for visualizing multi-dimensional data?' 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: List the title of posts which were edited by Vebjorn Ljosa. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the total score of the posts edited by Yevgeny and include the user's website URL. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Write all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?' 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How much is the total bounty amount of the post titled about 'data' 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Which user added a bounty amount of 50 to the post title mentioning variance? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Calculate the average view count of posts tagged as 'humor' and write the title and the comments of the posts alongside their scores if applicable. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Give the total number of comments posted by user ID 13.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Which user ID has the highest reputation? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Which user ID has the lowest view? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many users are awarded with supporter badge during year 2011? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many users are awarded with more than 5 badges? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many users from New York have a teacher and supporter badge? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Which user created post ID 1 and what is the reputation of this user?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Which user have only one post history per post and having at least 1000 views? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Which users have posted the most comments. List out the user's badge? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many users from India have the teacher badges? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the percentage difference of student badges given during 2010 and 2011? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What are the post history type IDs for post ID 3720 and how many unique users have commented on the post?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: List out all post that are related to post ID 61217 and what is the popularity of this post? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the score and the link type ID for post ID 395?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: List out all post ID with score more than 60 and list out all the user ID that created these post. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the sum of favourite count gained by user ID 686 in 2011? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the average of the up votes and the average user age for users creating more than 10 posts? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many users obtained the ""Announcer"" badge? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: List out the name of badges that users obtained on 7/19/2010 7:39:08 PM. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many positive comments are there on the list? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: State the detailed content of the comment which was created on 7/19/2010 7:25:47 PM. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many posts have a score of 10 on the list? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What are the names of badges that users who have the highest reputation obtained? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Mention the reputation of users who had obtained the badge on 7/19/2010 7:39:08 PM. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the name of badge that the user whose display name is ""Pierre"" obtained?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: List out the dates that users who are located in Rochester, NY obtained their badges? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Among the users who obtained the ""Teacher"" badge, calculate their percentage of users 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Among the users who obtained the ""Organizer"" badges, calculate the percentage of users who are teenagers. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the comment's rating score of the post which was created on 7/19/2010 7:19:56 PM 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the detailed content of the comment of the post which was created on 7/19/2010 7:37:33 PM? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: List out the age of users who located in Vienna, Austria obtained the badge? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many adults who obtained the badge Supporter? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: State the number of views of users who obtained the badge on 7/19/2010 7:39:08 PM. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What are the name of badges that users who have the lowest reputation obtained? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: State the name of badge that the user whose display name is ""Sharpie"" obtained. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many elders obtained the ""Supporter"" badge? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the name of user with the ID of 30? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many users were from New York? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many votes were made in 2010? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many users were adult? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Which users have the highest number of views? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Calculate the ratio of votes in 2010 and 2011. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the name of tags used by John Stauffer's? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many posts were created by Daniel Vassallo? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many votes were made by Harlan? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Which post by slashnick has the most answers count? State the post ID. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many posts by Matt Parker have more than 4 votes? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many negative comments did Neil McGuigan get in his posts? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: State all the tags used by Mark Meckes in his posts that doesn't have comments. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: List all the name of users that obtained the Organizer Badges. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Based on posts posted by Community, calculate the percentage of posts that use the R language. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Calculate the difference in view count from post posted by mornington and view count from posts posted by Amos. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many users received commentator badges in 2014? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many posts were created on 21st July, 2010? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What are the display names and ages of user who got the highest in views? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Provide the last edit date and last edit user ID for the post ""Detecting a given face in a database of facial images"". 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many negative comments were given by user ID 13? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Describe the post title which got positive comments and display names of the users who posted those comments. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Provide the badge names received in 2011 for the user whose location is in the North Pole. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Provide the users' display names and available website URLs of the post with favorite count of more than 150. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Describe the post history counts and last edit date of the post title ""What is the best introductory Bayesian statistics textbook?""
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Describe the last accessed date and location of the users who received the outliers badge. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Provide the related post title of ""How to tell if something happened in a data set which monitors a value over time"".
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: List the post IDs and badge names of the user Samuel in 2013. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the owner's display name of the most popular post? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Mention the display name and location of the user who owned the excerpt post with hypothesis-testing tag. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Write down the related posts titles and link type IDs of the post ""What are principal component scores?"". 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Describe the display name of the parent ID for child post with the highest score. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Under the vote type of 8, provide the display names and websites URLs of the user who got the highest bounty amount. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What are the titles of the top 5 posts with the highest popularity? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many tags have post count between 5,000 to 7,000? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the owner user id of the most valuable post? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How old is the most influential user? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many posts with votes that were created in 2011 have a bounty of 50? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the id of the youngest user? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the score of the post with the most popular tag? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the average monthly number of links created in 2010 for posts that have no more than 2 answers? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Among the posts that were voted by user 1465, what is the id of the most valuable post? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the title of the post with the oldest post link? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the display name of the user who acquired the highest amount of badges? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: When did ""chl"" cast its first vote in a post? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the date when the youngest user made his or her first post? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the display name of the user who acquired the first Autobiographer badge? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the average number of posts voted by the oldest users? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Who has the highest reputation? Please give the display name. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many users whose reputations are higher than 2000 and the number of views is higher than 1000? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Please list all display names of users who are adults. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many posts did Jay Stevens have in 2010? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Which post by Harvey Motulsky has the most views? Please give the id and title of this post. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Which post has the highest score? Please give its id and title's name. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the average score of Stephen Turner's posts? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Please list the users' display names whose posts had over 20000 views in 2011. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Which is the most valuable post in 2010? Please give its id and the owner's display name. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the percentage of posts whose owners had a reputation of over 1000 in 2011? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Identify the percentage of teenage users. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Identify the total number of posts with views above average. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many comments were added to the post with the highest score? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Identify the number of posts that have been viewed over 35000 times but have received no comments from other users. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Identify the display name and location of the user, who was the last to edit the post with ID 183. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Identify the latest badge awarded to the user with the display name Emmett. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Identify the number of adult users who have cast over 5000 upvotes. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Identify the number of posts and comments left by the user, who has the latest created user account. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Provide the text of the latest comment to the post with the title 'Analysing wind data with R' and the display name of the user who left it. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many users were awarded with 'Citizen Patrol' badge? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Count the number of posts with a tag specified as 'careers'. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: When did the user known as 'IrishStat' create his or her account? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Identify the number of posts that offer a bounty amount over 30. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Among all the posts posted by the most influential user, identify the percentage with a score above 50. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many posts have a score less than 20? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Among the tags with tag ID below 15, how many of them have 20 count of posts and below? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the excerpt post ID and wiki post ID of the tag named sample? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Give the user's reputation and up vote number of the user that commented ""fine, you win :)"". 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Give the texts commented on the post about linear regression. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Among the posts with views ranging from 100 to 150, what is the comment with the highest score? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: List the creation date and age of the user that commented with webiste. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: In comments with 0 score, how many of the posts have view count lower than 5? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: In posts with 1 comment, how many of the comments have 0 score? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Among products comments with 0 score, what is the total number of users ages 40 years old?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the post ID and the comments commented in the post titled by ""Group differences on a five point Likert item""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the up vote number of the user that commented ""R is also lazy evaluated.""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: List the comments commented by the user with a username of Harvey Motulsky. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: In comments with score between 1 to 5, list down the display names of the users with 0 down votes. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Please list all the superpowers of 3-D Man. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many superheroes have the super power of ""Super Strength""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Among the superheroes with the super power of ""Super Strength"", how many of them have a height of over 200cm? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Please list the full names of all the superheroes with over 15 super powers. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many superheroes have blue eyes? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the colour of Apocalypse's skin? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Among the superheroes with blue eyes, how many of them have the super power of ""Agility""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Please list the superhero names of all the superheroes that have blue eyes and blond hair. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many superheroes are published by Marvel Comics? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Please give the full name of the tallest hero published by Marvel Comics. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Who is the publisher of Sauron? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Among the superheroes from Marvel Comics, how many of them have blue eyes? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the average height of the superheroes from Marvel Comics? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Among the superheroes from Marvel Comics, what is the percentage of those who have the super power of ""Super Strength""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many superheroes did DC Comics publish? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Which publisher published the slowest superhero? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many gold-eyed superheroes did Marvel Comics publish? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the publisher's name of Blue Beetle II? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many superheroes with blonde hair are there? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Who is the dumbest superhero? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is Copycat's race? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many superheroes have durability of less than 50? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What are the names of the superheroes with the power of death touch? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many female superheroes have a strength value of 100? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the name of the superhero that has the most powers? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many vampire superheroes are there? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Give the publisher ID of Star Trek. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Calculate the average attribute value of all superheroes. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the total number of superheroes without full name? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the eye colour of superhero with superhero ID 75? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Provide the superpowers of the superhero called Deathlok. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the average weight of all female superheroes? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: List down at least five superpowers of male superheroes. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Give the name of the alien superheroes. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Among the superheroes with height from 170 to 190, list the names of the superheroes with no eye color. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the superpower of hero ID 56? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: List down at least five full name of Demi-God superheroes. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many bad superheroes are there? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Identify the race of the superhero who weighed 169 kg. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Provide the hair colour of the human superhero who is 185 cm tall. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the eye clolour of the heaviest superhero? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: In superheroes with height between 150 to 180, what is the percentage of heroes published by Marvel Comics? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Among the male superheroes, list the full names of superheroes with weight greater than the 79% average weight of all superheroes. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Which power do superheroes have the most of? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Indicate the attribute value of superhero Abomination. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What are the superpowers of heroes with ID 1? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many heroes have stealth power? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the hero's full name with the highest attribute in strength? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the average of superheroes with no skin colour? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many superheroes were published by Dark Horse Comics? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Which superhero has the most durability published by Dark Horse Comics? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the eyes colour of Abraham Sapien? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: List the name of superheroes with flight power. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Which group does superhero A-Bomb belong to? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the percentage of blue female superheroes among all female superheroes? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Provide the hero name and race of Charles Chandler. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the gender of Agent 13 hero? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Provide superheroes' names who have the adaptation power. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many powers does Amazo hero have? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: List the powers of Hunter Zolomon. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Provide the heights of the heroes whose eye colours are amber. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: List the heroes' names whose eyes and hair colours are both black. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Provide the eye colours of the heroes whose skin colours are gold. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Provide the full names of vampire heroes. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Describe the names of neutral alignment superheroes. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many heroes have the highest attribute value in strength? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What are the race and alignment of Cameron Hicks? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many percent of female heroes were published by Marvel Comics? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Find the average weight of the heroes who are aliens. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Calculate the difference between Emil Blonsky's weight and Charles Chandler's weight. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Calculate the average height for each superhero. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is Abomination's superpower? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Among the superheroes with the race of god/eternal, how many of them are male 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Which hero was the fastest? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many superheroes have a neutral alignment? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: State all of 3-D Man's attributes along with their values. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Which superheroes have blue eyes with brown hair? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the publisher for Hawkman, Karate Kid and Speedy? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many superheroes didn't have any publisher? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Calculate the percentage of superheroes with blue eyes. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Find the ratio between male superheroes and female superheroes. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Who is the tallest superhero? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the power ID of cryokinesis? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Provide the name of superhero with superhero ID 294. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: List the full names of superheroes with missing weight. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the superpowers of the superhero has Helen Parr as their full name? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Find the race of the superhero who weighs 108kg and is 188cm tall. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the publisher name of the superhero ID 38? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the race of the superhero with maximum attribute value? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Give the alignment and superpowers of the superhero named Atom IV. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: List down at least five full names of superheroes with blue eyes. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Calculate the average attribute value of all neutral superheroes. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: List the skin colour of the superheroes with 100 attribute value. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Count the good female superheroes. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Provide the names of superheroes with attribute value between 75 to 80. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Give the race of the blue-haired male superhero. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Among the bad superheroes, what is the percentage of female superheroes? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How strong is the Hulk? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: List down Ajax's superpowers. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many green-skinned villains are there in the superhero universe? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many female superheroes are in Marvel Comics? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Identify superheroes who can control wind and list their names in alphabetical order. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Identify the gender of the superhero who has the ability of Phoenix Force. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Identify the heaviest superhero in DC Comics. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the average height of a non-human superhero in Dark Horse Comics? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Count the fastest superheroes. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Identify the weakest attribute of the Black Panther. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is Abomination's eye colour? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Name the tallest superhero. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Name the superhero, otherwise known as Charles Chandler. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Among all superheroes created by George Lucas, identify the percentage of female superheroes. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Among all superheroes in Marvel Comics, identify the percentage of 'good' superheroes. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the total number of superheroes that have John as their first name? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Give the hero ID of superhero with the lowest attribute value. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Provide the full name of the superhero named Alien.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: In superheroes with weight less than 100, list the full name of the superheroes with brown eyes. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: List the attribute value of the superhero named Aquababy.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Provide the weight and race of the superhero with superhero ID 40. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Calculate the average height of all neutral superheroes.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: List the hero ID of superheroes have intellegence as their power. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Give the eye colour of Blackwulf. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: List the power of superheroes with height greater than 80% of the average height of all superheroes. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please list the reference names of the drivers who are eliminated in the first period in race number 18. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the surname of the driver with the best lap time in race number 19 in the second period? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please list the year during which the race is held on circuits in Shanghai. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please give the name of the race held on the circuits in Germany. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please list the positions of the circuits built by the constructor Renault. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many races in the year 2010 are held on grand prixs outside Asia and Europe?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please give the names of the races held on the circuits in Spain. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the location coordinates of the circuits for Australian grand prix? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Where can I find the information about the races held on Sepang International Circuit? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please list the time of the races held on Sepang International Circuit.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Give the coordinate position for Abu Dhabi Grand Prix. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which country is the constructor which got 1 point in the race No. 24 from? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What's Bruno Senna's Q1 result in the qualifying race No. 354? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: For the driver who had the Q2 time as 0:01:40 in the qualifying race No. 355, what is his nationality? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: For the Bahrain Grand Prix in 2007, how many drivers not finished the game? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Show me the season page of year when the race No. 901 took place. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: For the race happened on 2015/11/29, how many drivers finished the game? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: For all the drivers who finished the game in race No. 592, who is the oldest? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: For the driver who set the fastest lap speed in race No.933, where does he come from? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Where is Malaysian Grand Prix held? Give the location coordinates. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: For the constructor which got the highest point in the race No. 9 , what is its introduction website? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What's Lucas di Grassi's Q1 result in the race No. 345? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: For the driver who had the Q2 time as 0:01:15 in race No. 347, where is he from? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the actual finish time for Bruce McLaren in the race No.743? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Who finished second in the San Marino Grand Prix in 2006? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Show me the season page of year when the race No. 901 took place. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: For the race happened in 2015/11/29, how many drivers finished the game?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: For all the drivers who finished the game in race No. 872, who is the youngest? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Who was the driver that got the best lap time in the race No. 348? Give his full name. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: For the driver who set the fastest lap speed, what is his nationality? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: For the drivers who took part in the race in 1983/7/16, what's their race completion rate? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which year was the first Singapore Grand Prix? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many races were there in 2005? Name all the races in descending order.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Name the first race recorded. What are the other races that happened within the same month and year of that race. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: State the name and date of the last round of race in year 1999. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which year has the most number of races? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Name the races in year 2017 that are not hosted in year 2000. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: In which country was the first European Grand Prix hosted? Name the circuit and location. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: When was the last f1 season whereby Brands Hatch hosted the British Grand Prix? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many seasons has Silverstone Circuit hosted the United Kindom grand prix? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Name all drivers in the 2010 Singapore Grand Prix order by their position stands.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: State the driver with the most points scored. Find his full name with that points. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Name the top 3 drivers and the points they scored in the 2017 Chinese Grand Prix.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the best lap time recorded? List the driver and race with such recorded lap time. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the average lap time for Sebastian Vettel in the 2009 Chinese Grand Prix? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Name the driver with the most winning. Mention his nationality and what is his average point scores. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How old is the youngest Japanese driver? What is his name? youngest Japanese driver refers to max(dob); Japanese refers to nationality = 'Japanese'; age = 2022-year(dob)+1
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: List circuits which host 4 f1 races from year 1990 to 2000. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: List circuits in USA which hosted f1 races in 2006. State the name and location of circuit and the name of the race it hosted.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Name the races along with its circuit name and location for f1 races hosted in September 2005. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which race was Alex Yoong in when he was in track number less than 10? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many times did Michael Schumacher won from races hosted in Sepang International Circuit? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: State the race and year of race in which Michael Schumacher had his fastest lap. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is Eddie Irvine's average points scored in year 2000? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which was Lewis Hamilton first race? What was his points recorded for his first race event? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: List all races in 2017 and the hosting country order by date of the event.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the most laps f1 races had? Name the race, year and circuit location where the races with most laps was hosted.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Among all European Grand Prix races, what is the percentage of the races were hosted in Germany? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What's the location coordinates of Silverstone Circuit? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which of these circuits is located at a higher latitude, Silverstone Circuit, Hockenheimring or Hungaroring? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What's the reference name of Marina Bay Street Circuit? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: In which country can I find the circuit with the highest altitude? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many drivers don't have a code? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which country is the oldest driver from? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please list the surnames of all the Italian drivers. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which website should I go to if I want to know more about Anthony Davidson? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What's Lewis Hamilton's reference name? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which circuit did the 2009 Spanish Grand Prix use?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please list all the years that Silverstone Circuit was used in a Formula_1 race.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please give more information about the Formula_1 races that used the Silverstone Circuit. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What time did the the 2010's Formula_1 race took place on the Abu Dhabi Circuit?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many Formula_1 races took place on the circuits in Italy?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please list the exact dates on which a Formula_1 race took place on the Barcelona-Catalunya circuit.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please give the link of the website that shows more information about the circuits the Spanish Grand Prix used in 2009. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What's the fastest lap time ever in a race for Lewis Hamilton? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which driver created the fastest lap speed in a Formula_1 race? Please give both his forename and surname.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which driver ranked the first in the Australian Grand Prix in 2008? Please give his reference name. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please list the Formula_1 races that Lewis Hamilton participated.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: In which Formula_1 race did Lewis Hamilton rank the highest? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: In which years did Lewis Hamilton participate in a Formula_1 race?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What was Lewis Hamilton's final rank in the 2008 Australian Grand Prix? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which driver was in the no. 4 grid formation when starting the race in 2008's Australian Grand Prix? Please give his forename and surname. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many drivers managed to finish the race in the 2008 Australian Grand Prix? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which was the fastest lap for Lewis Hamilton in the 2008 Australian Grand Prix?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What's the finish time for the driver who ranked second in 2008's Australian Grand Prix? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Who was the champion of 2008's Australian Grand Prix and where can I know more about him? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many drivers from the USA participated in the 2008 Australian Grand Prix? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Among the drivers that finished the race in the 2008 Australian Grand Prix, how many of them have participated in Formula_1 races? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many points did Lewis Hamilton get in total in all the Formula_1 races he participated?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the average fastest lap time in seconds for Lewis Hamilton in all the Formula_1 races? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the rate of drivers completing all the laps in the 2008 Australian Grand Prix? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many circuits are there in Melbourne, Australia? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please list the location coordinates of the US circuits. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many British drivers were born after 1980? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What are the average points of British constructors? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which constructor has the highest point?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please list the constructor names with 0 points at race 291. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many Japanese constructors have 0 points in 2 races? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which constructors have been ranked 1?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many French constructors have a lap number of over 50? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please calculate the race completion percentage of Japanese drivers from 2007 to 2009. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the average time in seconds of champion for each year? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which drivers born after 1975 have been ranked 2? Please give their forenames and surnames. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many Italian drivers haven't finished the race? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which driver has the fastest lap time? Please give their forenames and surnames.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the fastest lap number of the champion in 2009? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the average of fastest lap speed in the 2009 Spanish Grand Prix race? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which race has the shortest actual finishing time? Please give the name and year. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many French drivers who obtain the laptime less than 02:00.00? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: List out the code for drivers who have nationality in America. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: List out the Id number of races which were hold in 2009.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many driver participated in race ID number 18?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is reference name of Robert Kubica? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many Australian drivers who were born in 1980? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: List out top 3 German drivers who were born from 1980-1990 and have the earliest lap time. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please state the reference name of the oldest German driver. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which drivers who were born in 1971 and has the fastest lap time on the race? Give id and code of these drivers. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: List out top 10 Spanish drivers who were born before 1982 and have the latest lap time. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: State the racing year which has the fastest lap time? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which year has the lowest speed of lap time? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: List the driver's ID of the top five driver, by descending order, the fastest time during the first lap of the race. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: From race no. 50 to 100, how many finishers have been disqualified? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many times the circuits were held in Austria? Please give their location and coordinates. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What race number has the most finishers? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: List the reference name of the drivers who passed the second qualifying lap during race no. 23. Indicate their nationality and birthday. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: On what year did the youngest driver had his first qualifying race? State the name, date and time of the race. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many American drivers have been disqualified from the race. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which of the Italian constructor got the highest point to date? Give its introduction website? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the website of the constructor who tallied the most total wins. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Among the drivers who participated in the French Grand Prix, who has the slowest time in the 3rd lap. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: In which race did the fastest 1st lap time was recorded? Please indicate the time in milliseconds. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the average fastest lap time of the top 10 drivers in the 2006 United States Grand Prix? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: List down top 5 German drivers who has the shortest average pit stop duration and were born between 1980-1985. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Who is the champion of the Canadian Grand Prix in 2008? Indicate his finish time. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the full name and date of birth of Austrian drivers born between 1981 and 1991? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Find the full name, Wiki Pedia page link, and date of birth of German drivers born between 1971 and 1985. List it in descending order of date of birth. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the average score of Lewis Hamilton among all the Turkish Grand Prix? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the annual average number of races held during the first 10 years of the 21st century? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which citizenship do the vast majority of the drivers hold? Citizenship of majority of drivers = MAX(nationality); citizenship and nationality are synonyms
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: In terms of number of points acquired, how many victories did the driver who ranked 91st acquired? victories refer to wins; 91st refers to points
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: In terms of the fastest lap time, what is the name of the race which recorded the fastest lap speed by a racer? Fastest lap speed refers to MIN(fastestLapTime)
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which racetrack hosted the most recent race? Indicate the full location. full location refers to location+country; most recent race = MAX(date)
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined. full name refers to forename+surname; Youngest racer = MAX(dob)
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many accidents did the driver who had the highest number accidents in the Canadian Grand Prix have? number of accidents refers to the number where statusid = 3; Canadian Grand Prix refers to the race of name
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many wins was achieved by the oldest racer? Indicate his/her full name. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What was the longest time a driver had ever spent at a pit stop? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Among all the lap records set on various circuits, what is the time for the fastest one?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What was the longest time that Lewis Hamilton had spent at a pit stop? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: During which lap did Lewis Hamilton take a pit stop during the 2011 Australian Grand Prix?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please list the time each driver spent at the pit stop during the 2011 Australian Grand Prix. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the lap record set by Lewis Hamilton in a Formula_1 race? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which driver created the shortest lap time ever record in a Formula_1 race? Please give his full name. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What was the position of the circuits during Lewis Hamilton's fastest lap in a Formula_1 race? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the lap record for the Austrian Grand Prix Circuit? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please list the lap records for the circuits in Italy. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: In which Formula_1 race was the lap record for the Austrian Grand Prix Circuit set? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: In the race a driver set the lap record for the Austrian Grand Prix Circuit, how long did he spent at the pit stop at that same race? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please list the location coordinates of the circuits whose lap record is 1:29.488. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What was the average time in milliseconds Lewis Hamilton spent at a pit stop during Formula_1 races? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the average lap time in milliseconds of all the lap records set on the various circuits in Italy? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which player has the highest overall rating? Indicate the player's api id. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the height of the tallest player? Indicate his name. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the preferred foot when attacking of the player with the lowest potential? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Among the players with an overall rating between 60 to 65, how many players whose going to be in all of your attack moves instead of defensing? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Who are the top 5 players who perform better in crossing actions? Indicate their player id. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which league had the most goals in the 2016 season? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which home team had lost the fewest matches in the 2016 season? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Indicate the full names of the top 10 players with the highest number of penalties. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: In Scotland Premier League, which away team won the most during the 2010 season? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which League had the most matches end as draw in the 2016 season? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Give the name of the league with the highest matches of all time and how many matches were played in the said league. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the average height of players born between 1990 and 1995? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: List the players' api id who had the highest above average overall ratings in 2010. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: List the long name of teams with above-average build-up play passing in 2012. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: List the top 5 leagues in ascending order of the number of goals made in all seasons combined. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Find the average number of long-shot done by Ahmed Samir Farag. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: For the teams with normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the short name of the football team Queens Park Rangers? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: List the football players with a birthyear of 1970 and a birthmonth of October. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the attacking work rate of the football playerr Franco Zennaro?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the ADO Den Haag team freedom of movement in the 1st two thirds of the pitch? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the football player Francois Affolter header's finishing rate on 18/09/2014? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the overall rating of the football player Gabriel Tamas in year 2011? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: How many matches in the 2015/2016 season were held in Scotland Premier League
? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the preferred foot when attacking of the youngest football player? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: List all the football player with the highest potential score. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Among all the players whose weight is under 130, how many of them preferred foot in attacking is left? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: List the football teams that has a chance creation passing class of Risky. Inidcate its short name only. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the defensive work rate of the football player David Wilson
?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: When is the birthday of the football player who has the highest overall rating? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the name of the football league in the country of Netherlands? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Calculate the average home team goal in the 2010/2011 season in the country of Poland. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Who has the highest average finishing rate between the highest and shortest football player? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Please list player names which are higher than 180. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: How many players were born after 1990? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: How many players whose first names are Adam and weigh more than 170? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which players had an overall rating of over 80 from 2008 to 2010? Please list player names. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is Aaron Doran's potential score? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: List out of players whose preferred foot is left. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Please list all team names which the speed class is fast. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the passing class of CLB team? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which teams have build up play passing more than 70? Please list their short names. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: From 2010 to 2015, what was the average overall rating of players who are higher than 170? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which football player has the shortest height? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which country is the league Italy Serie A from? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: List the football team that has a build up play speed of 31, build up plan dribbling of 53, and build up play passing of 32. Only indicate the short name of the team. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the average overall rating of the football player Aaron Doran? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: How many matches were held in the league Germany 1. Bundesliga
from August to October 2008? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: List all the short name of the football team that had a home team goal of 10? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: List all the football player with the highest balance score and potential score of 61. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye
? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What's the long name for the team GEN? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which player is older, Aaron Lennon or Abdelaziz Barrada? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which player is the tallest? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Among the players whose preferred foot was the left foot when attacking, how many of them would remain in his position when the team attacked? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which country is the Belgium Jupiler League from? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Please list the leagues from Germany. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which player has the strongest overall strength? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Among the players born before the year 1986, how many of them would remain in his position and defense while the team attacked? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which of these players performs the best in crossing actions, Alexis, Ariel Borysiuk or Arouna Kone? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What's the heading accuracy of Ariel Borysiuk?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Among the players whose height is over 180, how many of them have a volley score of over 70? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Please list the names of the players whose volley score and dribbling score are over 70. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: How many matches in the 2008/2009 season were held in Belgium? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the long passing score of the oldest player? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: How many matches were held in the Belgium Jupiler League in April, 2009? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which league had the most matches in the 2008/2009 season? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the average overall rating of the players born before the year 1986? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: How much is the average build up play speed of the Heart of Midlothian team? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Calculate the average overall rating of Pietro Marino. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is Aaron Lennox's total crossing score? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is Ajax's highest chance creation passing score and what is it classified as? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which foot is preferred by Abdou Diallo? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the highest overall rating received by Dorlan Pabon? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the average number of goals made by Parma as the away team while playing in Italy? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What was the overall rating for Aaron Mooy on 2016/2/4? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What was the potiential for Francesco Parravicini on 2010/8/30? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: How was Francesco Migliore's attacking work rate on 2015/5/1? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Tell the defensive work rate for Kevin Berigaud on 2013/2/22. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: When was the first time did Kevin Constant have his highest crossing score? Give the date. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What was the build up play speed class for ""Willem II"" on 2011/2/22? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: How was the build up play dribbling class for ""LEI"" on 2015/9/10? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Tell the build Up play passing class for ""FC Lorient"" on 2010/2/22. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: State the chance creation passing class for ""PEC Zwolle"" on 2013/9/20. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What was the chance creation crossing class for ""Hull City"" on 2010/2/22? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: For the team ""Hannover 96"", what was its defence aggression class on 2015/9/10? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: List down 5 tallest players' name. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What are the player api id of 10 heaviest players? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: List down the name of players who are 35 years old and above. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: How many home team goal have been scored by Aaron Lennon? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Sum up the away team goal scored by both Daan Smith and Filipe Ferreira. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Calculate the total home team goal scored by players whose age are 30 years old and below. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: State 10 names of the strongest players. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the name of players with the highest potential? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Who are the players that tend to be attacking when their mates were doing attack moves? List down their name. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Among the players with finishing rate of 1, pick the eldest player and state the player's name. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: State the name of players who came from Belgium. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Locate players with vision scores of 90 and above, state the country of these players. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which country's players have the heaviest average weights? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: List down the long name for slow speed class team. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What are the short name of team who played safe while creating chance of passing? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the average heights of Italy players? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Please provide the names of top three football players who are over 180 cm tall in alphabetical order. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: How many football players born after the 1990s have the first name ""Aaron""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the difference between players 6 and 23's jumping scores? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Please provide top three football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: How many players had the highest potential score for crossing that preferred to use their left foots while attacking? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What percentage of players have a strength and stamina score of more than 80? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: In what country did the Poland Ekstraklasa take place?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What are Alexis Blin's sprint speed, agility, and acceleration scores? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Does the KSV Cercle Brugge team have a slow, balanced or fast speed class? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: In the 2015–2016 season, how many games were played in the Italian Serie A league? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What was the highest score of the home team in the Netherlands Eredivisie league? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Please state the finishing rate and curve score of the player who has the heaviest weight. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which league had the most games in the 2015–2016 season? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Please provide the full name of the away team that scored the most goals. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Please name one player whose overall strength is the greatest. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the percentage of players that are under 180 cm who have an overall strength of more than 70? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Are there more in-patient or outpatient who were male? What is the deviation in percentage? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the percentage of female patient were born after 1930? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For patient born between Year 1930 to 1940, how many percent of them were inpatient? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: State the sex and birthday of patient ID '163109'. When was the examination taken and what symptom does the patient had. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: List the patient ID, sex and birthday of patient with LDH beyond normal range. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: State the ID and age of patient with positive degree of coagulation. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For patients with severe degree of thrombosis, list their ID, sex and dieseas the patient is diagnosed with. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: List all patients who were born in 1937 whose total cholesterol was beyond the normal range. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For patient with albumin level lower than 3.5, list their ID, sex and diagnosis. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the percentage of female patient had total protein not within the normal range? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For in-patient age 50 and above, what is their average anti-cardiolipin antibody (IgG) concentration? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What was the age of the youngest patient when they initially arrived at the hospital? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many of the patients with the most serious thrombosis cases examined in 1997 are women? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the age gap between the youngest and oldest patient with a normal triglyceride recorded? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the year that concluded on December 31, 1998, how many male patients on average were tested in the lab each month? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the ratio of male to female patients among all those with abnormal uric acid counts? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients hadn't undergone a medical examination until at least a year following their initial hospital visit? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many underage patients were examined during the course of the three-year period from 1990 to 1993? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many male patients have elevated total bilirubin count? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the most common illness that doctors identified among the patients whose lab work was done between 1/1/1985, and 12/31/1995? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the average age of patients examined in the laboratory for the October of the year 1991? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What was the anti-nucleus antibody concentration level for the patient id 3605340 on 1996/12/2? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Was the total cholesterol status for the patient id 2927464 on 1995-9-4 at the normal level? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What was the gender of the first AORTITIS diagnosed patient? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Was the patient a man or a women whose ALT glutamic pylvic transaminase status got 9 on 1992-6-12? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patient who got the laboratory test of uric acid level as 8.4 on 1991-10-21, how old was he/she at that time? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patient who first came to the hospital on 1991/6/13 who was diagnosed with SJS, what is the total number of his/her Laboratory tests in 1995? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patient who was diagnosed SLE on 1997/1/27, what was his/her original diagnose when he/she came to the hospital for the first time? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patient whose birthday was 1959/3/1, what symptoms did he/she have during the examination on 1993/9/27?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Lists all patients by ID who were diagnosed with Behcet's and had their exams between 01/01/197 and 12/31/1997. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many female patients born in 1964 were admitted to the hospital? List them by ID. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What percentage of patients with a proteinuria level within the normal range have a uric acid level below the normal range? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What percentage of male patients who first presented to the hospital in 1981 were diagnosed with BEHCET? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Excluding all P only ANA Pattern patients, how many of the remainder are women born between 1980 and 1989? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What sex is the patient who in a medical examination was diagnosed with PSS and in a laboratory examination had a blood level of C-reactive protein de 2+, createnine 1 and LDH 123? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the most common sign of patients with SLE disease? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: When was the medical information on patient number 48473 first documented, and what disease did she have? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many female patients were given an APS diagnosis? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients who underwent testing in 1997 had protein levels outside the normal range? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What proportion of patients who had signs of thrombocytopenia had SLE diagnosed? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What percentage of patients who were born in 1980 and were diagnosed with RA are women? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many male patients who underwent testing between 1995 and 1997 and were subsequently diagnosed with BEHCET disease did not stay in the hospital for treatment? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients who were female got white blood cells that were below 3.5? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How long did it take after patient number 821298 arrived at the hospital for the first time before her evaluation began? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Was the patient with the number 57266's uric acid within a normal range? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: When is the laboratory examination of patient '48473' where his/her AST glutamic oxaloacetic transaminase (GOT) index is above the normal range. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: List all patients with their sex and date of birthday, whose AST glutamic oxaloacetic transaminase (GOT) index is within normal range for loboratory examination in 1994. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Provide IDs for male patients with ALT glutamic pylvic transaminase (GPT) that have history of ALT glutamic pylvic transaminase (GPT) exceed the normal range. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Please provide the diagnosis of patients with ALT glutamic pylvic transaminase beyond the normal range by ascending order of their date of birth. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the average index of the lactate dehydrogenase (LDH) for all patients with lactate dehydrogenase (LDH) within the normal range. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Provide the ID and age of patient with lactate dehydrogenase (LDH) between 100-300 index above the normal range. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For patients with alkaliphophatase (ALP) within normal range, were they treated as inpatient or outpatient? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Name the ID of the patient who is born on the April 1st, 1982. Is his/her alkaliphophatase (ALP) within normal range? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: List ID, sex and date of birth of patient whose total protein (TP) below the lower range of the normal index. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For all female patient with total protein (TP) beyond the normal index, what is the deviation of their TP idex from the normal. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Sort in descending order all patients by birthday for male patient with albumin not within range. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For all patient born in 1982, state if their albumin is within normal range. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the percentage of the female patient whose uric acid (UA) beyond the normal range? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For all patients with normal uric acid (UA), what is the average UA index based on their latest laboratory examination result? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Provide all ID, sex and birthday of patients whose urea nitrogen (UN) just within the borderline of passing? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Provide the ID, sex, birthday of all patients diagnosed with 'RA' that are within the UN normal index. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many male patients are are with creatinine index out of the normal range? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Are there more male patients with creatinine not within the normal range than female? True or False? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the highest total bilirubin level recorded? List out the patient details with ID, sex and birthday with that index. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Who is the oldest patient with the highest total cholesterol (T-CHO). State the patient ID and T-CHO index. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the average age of the male patient with high cholesterol? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Provide list of patients and their diagnosis with triglyceride (TG) index greater than 100 of the normal range? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For all patients with triglyceride (TG) level beyond the normal range, how many are age more than 50 years? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: List all outpatient within normal range of creatinine phosphokinase. Give me the distinct ids. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For patient born between 1936-1956, how many male patients have creatinine phosphokinase beyond the normal range? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: List each patient's ID and blood glucose (GLU) index that were within normal range for patient's whose data was first recorded in 1991. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: List the patient ID, sex and birthday who has abnormal white blood cell count. Group them by sex and list the patient by age in ascending order. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For all the female patient age 50 and above, who has abnormal red blood cell count. State if they were admitted to hospital. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among all outpatients, list out those have low hemoglobin level. State the different IDs and their sex. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the patients who were diagnosed with SLE, who is the oldest with normal hemoglobin level. Provide the ID and sex. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: From laboratory examinations in 1991, what is the average hematoclit level that is lower than the normal range. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: List all patients who first came to the hospital after year 1992 with prothrombin time (PT) level that are normal. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the examinations done after 1997/1/1, how many of them have the result of an inactivated partial prothrom bin time? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patients with an abnormal activated partial prothrom bin time, how many of them have a mild thrombosis? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients born after 1980/1/1 have an abnormal fibrinogen level? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Please list the disease names of the patients that have a proteinuria level higher than normal. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Which patient has a normal proteinuria level and is diagnosed with SLE? Please give his or her patient ID. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients with an Ig G lower than normal has the symptom of abortion? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the patients with a normal Ig G level, how many of them have symptoms? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patient who has the highest Ig A within the normal range, what is his or her diagnosis? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients with a normal Ig A level came to the hospital after 1990/1/1? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients with a normal C-reactive protein don't have their data recorded? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the patients whose C-reactive protein level is abnormal, how many of them aren't 18 yet? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients with a normal Rhuematoid Factor has a positive measure of degree of coagulation? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Please list the diseases of the patients born after 1995-1-1 and have a normal Rhuematoid Factor. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Please list the ID of the patient whose RF is normal and who is older than 60. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients with a normal RF don't have thrombosis? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients with a normal level of complement 3 have a P pattern observed in the sheet of ANA examination? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the patients whose level of Hematoclit isn't normal, which patient has the highest anti-Cardiolipin antibody concentration? Please list his or her ID. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the patients have blood clots in veins, how many of them have a normal level of complement 4? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Which is the youngest patient with an abnormal anti-ribonuclear protein level? Please list his or her date of birth. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the patients with normal anti-SM, how many of them have the most severe degree of thrombosis? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patients with an abnormal anti-SM, please list the IDs of the three youngest ones. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Please list the IDs of the patients who had the examination done after 1997/1/1 and had a normal anti-scl70. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the patients who has a normal anti-scl70, how many of them are male and have the symptom of vertigo? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients with a normal anti-SSA came to the hospital before 1990? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Which patient is the first patient with an abnormal anti-SSA to come to the hospital? Please give his or her ID. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients have a normal anti-SSB and are diagnosed with SLE in the examination? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patients whose anti-SSB are normal, how many of them have other symptoms observed in their examination? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patients who have an abnormal level of anti-DNA, please list the diseases they are diagnosed with. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients have a normal anti-DNA level, yet their data are not recorded. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Of the patients with an abnormal level of anti-DNA-II, how many of them admitted to the hospital? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the percentage of patient who has a abnormal level of glutamic oxaloacetic transaminase level, yet he or she is diagnosed with SLE? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many male patients have their glutamic oxaloacetic transaminase in the normal range? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Please list the top three patients' birthdays with the highest glutamic pylvic transaminase in the normal range. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patients with the normal glutamic pylvic transaminase level, how many of them are male? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patient with the highest lactate dehydrogenase in the normal range, when was his or her data first recorded? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: When is the latest patient's medical data recorded? This patient should have an abnormal level of lactate dehydrogenase. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patient with an abnormal alkaliphophatase level, how many of them are admitted to the hospital? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the patients followed at the outpatient clinic, how many of them have a normal level of alkaliphophatase? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Please list the diagnosis of the patients whose total protein is lower than normal. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patients who are diagnosed with SJS, how many of them have a normal level of total protein? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the examination date of the patient whose albumin is the highest in the normal range? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many male patients have a normal level of both albumin and total protein? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the anti Cardiolipin antibody concentration of the female patient with the highest uric acid level in the normal range? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the highest anti-nucleus antibody concentration level of a patient with a normal creatinine level? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Please list the patient's ID whose creatinine level is normal and whose anti Cardiolipin antibody concentration level is the highest. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the patients whose total bilirubin is over the normal range, how many of them have a peripheral pattern observed in the sheet of ANA examination? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the anti-nucleus antibody concentration of the patient whose total bilirubin is the highest in the normal range? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patients whose total cholesterol is higher than normal, how many of them have a negative measure of degree of coagulation? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the patients whose total cholesterol is within the normal range, how many of them have a P pattern observed in the sheet of ANA examination? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the patients with the normal level of triglyceride, how many of them have other symptoms observed? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the disease name of the patient who has the highest level of triglyceride within the normal range? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Please list the IDs of the patients with no thrombosis and an abnormal level of creatinine phosphokinase. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: When is the birthday of the oldest patient whose blood glucose is abnormal? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the patients with a normal blood glucose, how many of them don't have thrombosis? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients accepted to the hospital have a normal level of white blood cells? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients diagnosed with SLE have a normal white blood cell level? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Please list the patient's ID if he or she has an abnormal level of red blood cell and is followed at the outpatient clinic. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the patients who have a normal platelet level, how many of them have other symptoms observed? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Please list a patient's platelet level if it is within the normal range and if he or she is diagnosed with MCTD. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the male patients that have a normal prothrombin time, what is their average prothrombin time? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients with severe thrombosis have a normal prothrombin time? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What's Angela Sanders's major? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many students in the Student_Club are from the College of Engineering?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Please list the full names of the students in the Student_Club that come from the Art and Design Department. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many students of the Student_Club have attended the event ""Women's Soccer""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Please list the phone numbers of the students from the Student_Club that has attended the event ""Women's Soccer"". 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Among the students from the Student_Club who attended the event ""Women's Soccer"", how many of them want a T-shirt that's in medium size? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the event that has the highest attendance of the students from the Student_Club? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Which college is the vice president of the Student_Club from? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Please list the event names of all the events attended by Maya Mclean.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many events of the Student_Club did Sacha Harrison attend in 2019? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Among the events attended by more than 10 members of the Student_Club, how many of them are meetings? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Please list the names of all the events of the Student_Club that had an attendance of over 20 students. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the average attendance of meetings in 2020? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the most expensive item that was spent in support of club events? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many members of the Student_Club have majored Environmental Engineering?
 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List the full name of all the members of the Student_Club who attended the ""Laugh Out Loud"" event. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List the last name of all the students who majored Law and Constitutional Studies. 
 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What county did Sherri Ramsey grew up?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What college offers the major that Tyler Hewitt took?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the amount of the funds that the Vice President received? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How much did the Student_Club members spend on food in September Meeting? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What city and state did the President of the Student_Club grow up? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List the full name of the Student_Club members that grew up in Illinois state. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How much did the Student_Club members spend on advertisement in September Meeting? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What department offers the major that Pierce and Guidi took?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the total budgeted amount for all category in ""October Speaker"" event? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Was each expense in October Meeting on October 8, 2019 approved? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Calculate the total average cost that Elijah Allen spent in the events on September and October. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Give the location for ""Spring Budget Review"". 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What was the cost for the ""Posters"" on 2019/9/4? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: With the biggest budget for the ""Food"", what was the remaining of it? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What was the notes of the fundraising on 2019/9/14? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many majors are there in ""College of Humanities and Social Sciences""?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Tell the phone number of ""Carlo Jacobs"".
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Tell the hometown county for ""Adela O'Gallagher"". 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: For all the budgets for ""November Meeting"", how many of them had exceeded the budget? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Provide the total number of the budget amount for ""September Speaker"" event. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the status of the event which bought ""Post Cards, Posters"" on 2019/8/20? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What was Brent Thomason's major? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: For all the club members from ""Human Development and Family Studies"" major, how many of them wear large size t-shirt? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What's Christof Nielson's zip code type?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: State the major name for the Vice President of the club. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Where is the hometown state for ""Sacha Harrison""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Which department was the President of the club in? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: State the date Connor Hilton paid his/her dues. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Who was the first one paid his/her dues? Tell the full name. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many times was the budget in Advertisement for ""Yearly Kickoff"" meeting more than ""October Meeting""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What percentage was the budget for Parking to the total budget for the ""November Speaker""? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the total cost of the pizzas for all the events? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many cities are there in Orange County, Virginia? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List all of the College of Humanities and Social Sciences' departments.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Where is Amy Firth's hometown? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What are the expenses of the budget with the lowest remaining? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List all the members who attended the event ""October Meeting"". 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Which college do most of the members go to? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What does the person with the phone number ""809-555-3360"" major in? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Which event has the highest budget amount? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List all the expenses incurred by the vice president. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many members attended the ""Women's Soccer"" event? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: When did the member, Casey Mason, received the income? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many of the members' hometowns are from Maryland state?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many events did the member with the phone number ""954-555-6240"" attend?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List all the members of the ""School of Applied Sciences, Technology and Education"" department. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Among all the closed events, which event has the highest spend-to-budget ratio? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many student have the position of president? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the highest amount of budget spend for an event? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many meeting events were held in 2020? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the total amount of money spent for food? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List the name of students that have attended more than 7 events. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Among the students majored in interior design, who have attended the Community Theater event? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: State the name of students from Georgetown, South Carolina. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many income generated by Grant Gilmour? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Which student was able to generate income more than $40? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the total expense for the Yearly Kickoff? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Which student has been entrusted to manage the budget for the Yearly Kickoff? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Which students manage to generate the highest income. State his/her full name along with the income source. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Which event has the lowest cost? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the ratio between students majored in finance and physics? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Indicate the top source of funds received in September 2019 based on their amount. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Provide the full name and email address of the Student_Club's Secretary. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many members of the Student_Club have major in 'Physics Teaching'? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many members did attend the event 'Community Theater' in 2019? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Provide the number of events attended by Luisa Guidi. What is her major? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: On average, how much did the Student_Club spend on food for the typical event in the past? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Name the event with the highest amount spent on advertisement. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Did Maya Mclean attend the 'Women's Soccer' event? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Among all events hold by the Student_Club in 2019, find the percentage share of events related to 'Community Service' 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Indicate the cost of posters for 'September Speaker' event. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the most popular size of t-shirt ordered by the club members? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Indicate the name of the closed event whose cost has exceeded the budget the most. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Identify the type of expenses and their total value approved for 'October Meeting' event. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Among the budgets for Food, which one has the highest budgeted amount? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Among the budgets for Advertising, list out top three which have the most budgeted amount? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Calculate the total cost spent for Parking in the list. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Mention the total expense used on 8/20/2019. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List out the full name and total cost that member id ""rec4BLdZHS2Blfp4v"" incurred? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: State what kind of expenses that Sacha Harrison incurred? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What kind of expenses incurred by members who have X-Large in size of tee shirt? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Mention the zip code of member who incurred less than 50USD. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: State the name of major that Phillip Cullen has joined. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List out the position of members who joined major of Business. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many members of Business have the Medium size of tee shirt? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List out the type of events which have remaining budget more than 30 USD. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Mention the category of events which were held at MU 215. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the category of event which was taken place in 2020-03-24T12:00:00? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: State the name of major that Vice President has joined. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Calculate the percentage of members who are major Mathematics in the list? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: State the category of events were held at MU 215. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many income are received with an amount of 50? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Among the members, how many of them have an extra large t-shirt size? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: In the College of Agriculture and Applied Sciences, how many majors are under the department of School of Applied Sciences, Technology and Education?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List the last name of members with a major in environmental engineering and include its department and college name. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List the city and state of members enrolled under electrical and computer engineering department. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the name of the social event that was attended by the vice president of the Student_Club located at 900 E. Washington St.? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the last name and position of the student that bought pizza on 09/10/2019? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List the last name of the members of the club that attended the women's soccer event. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Which countries have zip codes with post office boxes? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What are the zip codes that have post office boxes in the country of the country of San Juan Municipio whose state is Puerto Rico? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List the names of closed event as ""game"" that was closed from 3/15/2019 to 3/20/2020. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Please provide links to events for members who have paid more than 50 dollar. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Which members who were approved from 1/10/2019 to 11/19/2019? Please identify the member who attended the event and the link to their event. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Please indicate the college of the person whose first name is Katy with the link to the major ""rec1N0upiVLy5esTO"".
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Please list the phone numbers of the members who majored in business at the College of Agriculture and Applied Sciences. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List emails of people who paid more than 20 dollars from 9/10/2019 to 11/19/2019. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many members have education major in the College of Education & Human Services? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the percentage of the events that went over budget? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Give the event ID, location, and status of events conducted from November 2019 to March 2020. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List the expenses that spend more than fifty dollars on average. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Find the full name of members whose t-shirt size is extra large. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Calculate the percentage of zip codes that are PO boxes. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List the name and location of events that underspend its budget. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Find the name and date of events with expenses for pizza that were more than fifty dollars but less than a hundred dollars. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the name and major of members who had to spend more than a hundred dollars on an expense? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: In the events with more than forty incomes, list the city and country in which the event is happening. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Among the members who incurred expenses in more than one event, who paid the most amount? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the average amount paid by students in a position other than a member? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List the name of events with less than average parking cost. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the percentage of the cost for the game events? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Which budget allowed the most money for water, chips, and cookies? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List the full name of the top five members who spend the most money in the descending order of spending. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Give the full name and contact number of members who had to spend more than average on each expense. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Calculate the difference in the percentage of members in Maine and Vermont. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the major of Garrett Gerke and which department does it belong to? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List the last names of students under the Elementary Education major and include their phone numbers. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What category was budgeted for the 'January Speaker' event and how much was the amount budgeted for that category? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List the event names which were budgeted for the food. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Write the full names of students who received funds on the date of 9/9/2019 and include the amount received. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Which budget category does the expense 'Posters' fall to? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Write the full name of the club member with the position of 'Secretary' and list which college the club member belongs to. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Calculate the total amount spent on speaker gifts and list the name of the event they were spent on. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Where is the hometown of Garrett Girke? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Which student has the hometown of Lincolnton, North Carolina with the zip code of 28092? List their full name and position. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: How many gas stations in CZE has Premium gas?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What is the ratio of costumers who pay in EUR against customers who pay in CZK? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: In 2012, who had the least consumption in LAM? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What was the average monthly consumption of customers in SME for the year 2013? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which customers, paying in CZK, consumed the most gas in 2011? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: How many customers in KAM had a consumption of less than 30,000 for the year 2012? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which year recorded the most gas use paid in EUR?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which segment had the least consumption?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which year recorded the most consumption of gas paid in CZK? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What was the gas consumption peak month for SME customers in 2013? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which of the three segments—SME, LAM and KAM—has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: How much did customer 6 consume in total between August and November 2013? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: How many more ""discount"" gas stations does the Czech Republic have compared to Slovakia? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: How much more was customer 7 consuming in April 2013 than customer 5? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which LAM customer used the Euro as their currency and had the highest consumption in October 2013? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Who among KAM's customers consumed the most? How much did it consume?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: How much did the KAM customers consume in total in May 2013? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: How many percent of LAM customer consumed more than 46.73? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which country has more ""value for money"" gas stations? Please give a total number of ""value for money"" gas stations in each country.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What percentage of KAM customers pay in euros? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: In February 2012, what percentage of customers consumed more than 528.3? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What percentage of Slovakian gas stations are premium? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which client ID consumed the most in September 2013? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which client segment consumed the least in September 2013? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which SME customer consumed the least in June 2012? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What is the highest monthly consumption in the year 2012? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What is the biggest monthly consumption of the customers who use euro as their currency? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Please list the product description of the products consumed in September, 2013. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Please list the countries of the gas stations with transactions taken place in June, 2013. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Please list the chains of the gas stations with transactions in euro.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Please list the product description of the products bought in transactions in euro.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What is the average total price of the transactions taken place in January, 2012? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Please list the product descriptions of the transactions taken place in the gas stations in the Czech Republic. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Please list the disparate time of the transactions taken place in the gas stations from chain no. 11.
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: How many transactions taken place in the gas station in the Czech Republic are with a price of over 1000? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What is the average total price of the transactions taken place in gas stations in the Czech Republic? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: For the customers who paid in the euro, what is their average total price of the transactions?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which customer paid the most in 2012/8/25? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which country's gas station had the first paid cusomer in 2012/8/25? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What kind of currency did the customer paid at 16:25:00 in 2012/8/24? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What segment did the customer have at 2012/8/23 21:20:00? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: How many transactions were paid in EUR in the morning of 2012/8/26? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: For the earliest customer, what segment did he/she have?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: For the deal happened at 2012/8/24 12:42:00, which country was it? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What was the product id of the transaction happened at 2012/8/23 21:20:00? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: For the customer who paid 124.05 in 2012/8/24, how much did he/she spend during the January of 2012? And what is the date and expenses exactly? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: For all the transactions happened during 8:00-9:00 in 2012/8/26, how many happened in CZE? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: There's one customer spent 214582.17 in the June of 2013, which currency did he/she use? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which country was the card owner of No.667467 in?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What's the nationality of the customer who spent 548.4 in 2012/8/24? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What is the percentage of the customers who used EUR in 2012/8/25? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which gas station has the highest amount of revenue?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What is the percentage of ""premium"" against the overall segment in ""SVK""?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What is the amount spent by customer ""38508"" at the gas stations? How much had the customer spent in January 2012? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which are the top five best selling products? Please state the full name of them. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used? 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which country had the gas station that sold the most expensive product id No.2 for one unit?
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012. 
Generate just the SQL code starting it with 'sql_start' and ending the sql with 'sql_end' nothing else is allowed on the response. Do not add any explanations or comments. Just create the SQL code right away. SQL_START
"
