{"0": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the highest eligible free rate for K-12 students in the schools in Alameda County? Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)` on which students refers to CDSCode; Alameda County refers to County Name = 'Alameda County'\r\nCREATED SQL: SELECT CAST(`Free Meal Count (K-12)` AS REAL) * 100 / `Enrollment (K-12)` FROM schools WHERE County Name = 'Alameda County' ORDER BY CAST(`Free Meal Count (K-12)` AS REAL) * 100 / `Enrollment (K-12)` DESC LIMIT 1\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tcalifornia_schools", "1": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: Please list the lowest three eligible free rates for students aged 5-17 in continuation schools. Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` * 100%; continuation schools refers to `School Type` = 'Continuation';\r\nCREATED SQL: SELECT T1.`Free Meal Count (Ages 5-17)` / T1.`Enrollment (Ages 5-17)` * 100 FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.`School Type` = 'Continuation' ORDER BY T1.`Free Meal Count (Ages+\n\t----- bird -----\tcalifornia_schools", "2": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: Please list the zip code of all the charter schools in Fresno County Office of Education. Charter schools refers to `Charter School (Y/N)` = 1 in the table fprm county name = 'Fresno County Office of Education'; zip code refers to Zip\r\nCREATED SQL: SELECT DISTINCT T1.Zip FROM schools AS T1 INNER JOIN fprm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'Fresno County Office of Education' AND T2.`Charter School (Y/N)` = 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\tcalifornia_schools", "3": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the unabbreviated mailing address of the school with the highest FRPM count for K-12 students?100% FRPM refers to Percent (%) Eligible FRPM (K-12) = 100%; unabbreviated mailing address refers to MailStreet, MailCity, MailZip, MailState\r\nCREATED SQL: SELECT T2.MailStreet, T2.MailCity, T2.MailZip, T2.MailState FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`Percent (%) Eligible FRPM (+\n\t----- bird -----\tcalifornia_schools", "4": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: Please list the phone numbers of the direct charter-funded schools that are opened after 2000/1/1. Charter schools refers to `Charter School (Y/N)` = 1 in the frpm of which `Charter Funding Type` = 'Direct'; opened after 2000/1/1 refers to OpenDate > '2000/1/1';\r\nCREATED SQL: SELECT DISTINCT T1.Phone FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Charter Funding Type` = 'Direct' AND T2.`Charter School (Y/N)` = 1 AND T1.OpenDate >+\n\t----- bird -----\tcalifornia_schools", "5": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: How many schools with an average score in Math under 400 in the SAT test are exclusively virtual? Exclusively virtual refers to Virtual = 'F'100% and Magnet = 'N'; average score in Math under 400 refers to AvgScrMath < 400\r\nCREATED SQL: SELECT COUNT(T1.cds) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' AND T1.AvgScrMath < 400\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(T1.cds) FROM satscores AS T1+\n\t----- bird -----\tcalifornia_schools", "6": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: Among the schools with the SAT test takers of over 500, please list the schools that are magnet schools or offer a magnet program. Magnet schools or offer a magnet program means that Magnet = 1 on the table satscores;\r\nCREATED SQL: SELECT DISTINCT T1.cname FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumTstTakr > 500 AND T2.Magnet = 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tcalifornia_schools", "7": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the phone number of the school that has the highest number of test takers with an SAT score of over 1500?100% of the students are eligible for free meals? highest number of test takers refers to Max(NumTstTakr); SAT score of over 1500 refers to NumGE1500 = 1; phone number refers to Phone; 100% of the students are eligible for free meals refers to Percent (%) Eligible Free (K-12) = 1.0\r\nCREATED SQL: SELECT T1.Phone FROM satscores AS T1 INNER JOIN schools AS T2+\n\t----- bird -----\tcalifornia_schools", "8": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the number of SAT test takers of the schools with the highest FRPM count for K-12 students?100% FRPM count for K-12 students refers to Percent (%) Eligible FRPM (K-12) = 1; highest FRPM count refers to Max(FRPM Count (K-12))\r\nCREATED SQL: SELECT COUNT(T1.cds) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Percent(%) Eligible FRPM (K-12) = 1\r\nEND OF QUESTION+\n\t----- bird -----\tcalifornia_schools", "9": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: Among the schools with the average score in Math over 560 in the SAT test, how many schools are directly charter-funded?100% of schools with the average score in Math over 560 in the SAT test refers to AvgScrMath > 560; directly charter-funded refers to FundingType = 'Directly Chartered'\r\nCREATED SQL: SELECT COUNT(*) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrMath > 560 AND T1.FundingType = 'Directly Chartered'\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tcalifornia_schools", "10": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: For the school with the highest average score in Reading in the SAT test, what is its FRPM count for students aged 5-17?100% highest average score in Reading refers to MAX(AvgScrRead); FRPM count for students aged 5-17 refers to FRPM Count (Ages 5-17)\r\nCREATED SQL: SELECT T2.FRPM Count (Ages 5-17) FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrRead DESC LIMIT 1\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tcalifornia_schools", "11": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: Please list the codes of the schools with a total enrollment of over 500. Total enrollment can be represented by `Enrollment (K-12)` + `Enrollment (Ages 5-17)`100%\r\nCREATED SQL: SELECT CDSCode FROM schools WHERE CAST(`Enrollment (K-12)` AS REAL) + CAST(`Enrollment (Ages 5-17)` AS REAL) > 500\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tcalifornia_schools", "12": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: Among the schools with an SAT excellence rate of over 0.3, what is the highest eligible free rate for students aged 5-17? Excellence rate = NumGE1500 / NumTstTakr; Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`;\r\nCREATED SQL: SELECT MAX(T2.`Percent (%) Eligible Free (Ages 5-17)`) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 / T1.NumTstTakr > 0.3\r\nEND OF QUESTION\r\nCREATED SQL\r\nCREATED BY: Daphne\r\nDATE: 2020-05-04\r\nEND OF CREATION\r\n+\n\t----- bird -----\tcalifornia_schools", "13": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: Please list the phone numbers of the schools with the top 3 SAT excellence rate. Excellence rate = NumGE1500 / NumTstTakr100%\r\nCREATED SQL: SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 / T1.NumTstTakr DESC LIMIT 3\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY CAST(T1.NumGE1500+\n\t----- bird -----\tcalifornia_schools", "14": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: List the top five schools, by descending order, from the highest to the lowest, the most number of Enrollment (Ages 5-17). Please give their NCES school identification number.100 most number of Enrollment (Ages 5-17) refers to MAX(Enrollment (Ages 5-17)) where Enrollment (Ages 5-17) > 0\r\nCREATED SQL: SELECT T1.NCESSchool FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.`Enrollment (Ages 5-17)` DESC LIMIT 5\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tcalifornia_schools", "15": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: Which active district has the highest average score in Reading?100% active district refers to StatusType = 'Active'; highest average score in Reading refers to MAX(AvgScrRead)\r\nCREATED SQL: SELECT DISTINCT T2.District FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrRead = ( SELECT MAX(AvgScrRead) FROM satscores ) AND T2.StatusType = 'Active'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\tcalifornia_schools", "16": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: How many schools in merged Alameda have number of test takers less than 100?100 is the number of test takers; merged Alameda refers to District Name = 'Alameda Unified'\r\nCREATED SQL: SELECT COUNT(DISTINCT T2.cds) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.District = 'Alameda Unified' AND T2.NumTstTakr < 100\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(DISTINCT T2.cds+\n\t----- bird -----\tcalifornia_schools", "17": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the charter number of the school that the average score in Writing is 499?100?200? average score in Writing refers to AvgScrWrite; AvgScrWrite = 499 OR AvgScrWrite = 100 OR AvgScrWrite = 200;\r\nCREATED SQL: SELECT DISTINCT T1.cname FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrWrite = 499 OR T1.AvgScrWrite = 100 OR T1.AvgScrWrite = 200\r\n+\n\t----- bird -----\tcalifornia_schools", "18": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: How many schools in Contra Costa (directly funded) have number of test takers not more than 250?100% of the test takers refer to NumTstTakr = 250; in Contra Costa refers to County = 'Contra Costa'; directly funded refers to FundingType = 'Directly Funded'\r\nCREATED SQL: SELECT COUNT(T2.cname) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.FundingType = 'Directly Funded' AND T2.NumTstTakr+\n\t----- bird -----\tcalifornia_schools", "19": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the phone number of the school that has the highest average score in Math?100% average score in Math refers to Max(AvgScrMath)\r\nCREATED SQL: SELECT Phone FROM schools WHERE AvgScrMath = ( SELECT MAX(AvgScrMath) FROM satscores )\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\tcalifornia_schools", "20": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: How many schools in Amador which the Low Grade is 9 and the High Grade is 12?100% of students in the school are eligible for free meals? Amador refers to County Name = 'Amador'; Low Grade = 9; High Grade = 12; 100% of students in the school are eligible for free meals refers to Percent (%) Eligible Free (K-12) = 100\r\nCREATED SQL: SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDS+\n\t----- bird -----\tcalifornia_schools", "21": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: In Los Angeles how many schools have more than 500 free meals but less than 700 free or reduced price meals for K-12? on the street of Los Angeles; more than 500 free meals refer to Free Meal Count (K-12) > 500; less than 700 free or reduced price meals for K-12 refer to Free Meal Count (K-12) < 700; Free Meal Count (K-12) refers to Free Meal Count (Ages 5-17);\r\nCREATED SQL: SELECT COUNT(T2.CDSCode) FROM schools AS T1 INNER JOIN frpm AS T2 ON+\n\t----- bird -----\tcalifornia_schools", "22": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: Which school in Contra Costa has the highest number of test takers?100% highest number of test takers refers to Max(NumTstTakr)\r\nCREATED SQL: SELECT T1.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.District = 'Contra Costa' ORDER BY T1.NumTstTakr DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\tcalifornia_schools", "23": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools. Diffrence in enrollement = `Enrollment (K-12)` - `Enrollment (Ages 5-17)` > 30; full street adress refers to Street, StreetAbr, City, Zip\r\nCREATED SQL: SELECT DISTINCT T1.`Street`, T1.`StreetAbr`, T1.City, T1.Zip FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)` > 30\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tcalifornia_schools", "24": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: Give the names of the schools with the percent eligible for free meals in K-12 is more than 0.1 and test takers whose test score is greater than or equal to 1500? on the test score of 1500 refers to AvgScrRead, AvgScrMath, AvgScrWrite = 1500; names of the schools refers to School\r\nCREATED SQL: SELECT T1.School FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.PercentEligibleFreeK12 > 0.1 AND T2.AvgScrRead = 1500 OR T2.AvgScrMath+\n\t----- bird -----\tcalifornia_schools", "25": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: Name schools in Riverside which the average of average math score for SAT is grater than 400, what is the funding type of these schools? Average of average math = sum(average math scores) / count(schools). 400 is the average math score; Riverside is the name of district\r\nCREATED SQL: SELECT DISTINCT T1.FundingType FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.District = 'Riverside' AND T2.AvgScrMath > 400\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.FundingType FROM schools AS T1 INNER JOIN satscores AS T2 ON+\n\t----- bird -----\tcalifornia_schools", "26": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17? Full communication address should include Zip, Street, City, State100% Free Meals refers to Free Meal Count (Ages 5-17) = 0; Reduced Price Meals refers to Free Meal Count (Ages 5-17) > 0; more than 800 refers to Free Meal Count (Ages 5-17) > 800; high school refers to School Type = 'High School'; Monterey refers to City = 'Monterey';\r\nCREATED SQL: SELECT T2.City, T2.Zip, T2.State,+\n\t----- bird -----\tcalifornia_schools", "27": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the average score in writing for the schools that were opened after 1991 or closed before 2000? List the school names along with the score. Also, list the communication number of the schools if there is any. Communication number refers to phone number.100% refers to all; average score in writing refers to AvgScrWrite; opened after 1991 or closed before 2000 refers to OpenDate > = '1991-01-01' OR ClosedDate < = '2000-01-01'\r\nCREATED SQL: SELECT T2.AvgScrWrite, T2.School, T2.CommNum FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE+\n\t----- bird -----\tcalifornia_schools", "28": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average. Difference between K-12 enrollment and 15-17 enrollment can be computed by `Enrollment (K-12)` - `Enrollment (Ages 5-17)`; locally funded refers to FundingType = 'Local'; difference above the average refers to `Enrollment (K-12)` - `Enrollment (Ages 5-17)` > AVG(`Enrollment (K-12)` - `Enrollment (Ages 5-17)`)\r\nCREATED SQL: SELECT T1.School, T1.DOCType FROM schools AS T1 INNER JOIN ( SELECT T1.School, T1.`Enrollment (K-12)` -+\n\t----- bird -----\tcalifornia_schools", "29": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: When did the first-through-twelfth-grade school with the largest enrollment open? K-12 means First-through-twelfth-grade10000.0; school with the largest enrollment refers to MAX(Enrollment (K-12))\r\nCREATED SQL: SELECT MAX(Enrollment (K-12)) FROM schools WHERE OpenDate IS NOT NULL\r\nEND OF QUESTION\r\nCREATED SQL\r\nCREATED BY: Chih-Yu Chen\r\nCREATED ON: 2020/4/13\r\nEND OF CREATION INFORMATION\r\nCREATED BY: Chih-Yu Chen\r\nCREATED ON: 2020/4/+\n\t----- bird -----\tcalifornia_schools", "30": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: Which cities have the top 5 lowest enrollment number for students in grades 1 through 12? K-12 refers to students in grades 1 through 12. on lowest enrollment number refers to Min(Enrollment (K-12))\r\nCREATED SQL: SELECT DISTINCT City FROM schools ORDER BY Enrollment (K-12) LIMIT 5\r\nEND OF QUESTION\r\nCREATED SQL: SELECT City FROM schools WHERE Grade = 'K-12' ORDER BY Enrollment (K-12) LIMIT 5\r\nCREATED SQL: SELECT City FROM schools WHERE Grade = 'K-12' ORDER BY Enrollment (K-12) DESC LIMIT 5\r\nCREATED SQL+\n\t----- bird -----\tcalifornia_schools", "31": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12? K-12 refers to students in grades 1 through 12; Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)` on 2013-14;\r\nCREATED SQL: SELECT CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)` FROM schools WHERE `High Grade` = '12' AND `Low Grade` = '1' ORDER BY `Enrollment (K-12)` DESC LIMIT 10\r\nEND OF QUESTION\r\nCREATED SQL\r\nCREATED BY: Tien-Chen Lin\r\nCREATED AT: 2020-05-03\r\nLAST+\n\t----- bird -----\tcalifornia_schools", "32": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the eligible free or reduced price meal rate for the top 5 schools in grades 1-12 with the highest free or reduced price meal count of the schools with the ownership code 66? grades 1-12 means K-12; Eligible free or reduced price meal rate for K-12 = `FRPM Count (K-12)` / `Enrollment (K-12)` * 100; top 5 schools refers to the highest `FRPM Count (K-12)`; ownership code 66 refers to IRC = 66;\r\nCREATED SQL: SELECT T1.`Percent (%) Eligible Free (K-12)` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.IRC = 66 ORDER BY T2.`FRPM Count (K-12)` DESC LIMIT 5+\n\t----- bird -----\tcalifornia_schools", "33": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: If there are any, what are the websites address of the schools with a free meal count of 1,900-2,000 to students aged 5-17? Include the name of the school.1000 \u2264 Free Meal Count (Ages 5-17) < 2000\r\nCREATED SQL: SELECT T1.website, T1.school FROM schools AS T1 INNER JOIN ( SELECT T1.cname, T1.enroll12 FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.enroll12 > 1000 AND T1.enroll12 < 2000 ) AS T2 ON T+\n\t----- bird -----\tcalifornia_schools", "34": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the free rate for students between the ages of 5 and 17 at the school run by Kacey Gibson? Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`100%; run by Kacey Gibson refers to AdmFName1 = 'Kacey' AND AdmLName1 = 'Gibson';\r\nCREATED SQL: SELECT CAST(FREE MEAL COUNT AS REAL) * 100 / ENROLLMENT FROM frpm WHERE `ADM F NAME 1` = 'Kacey' AND `ADM L NAME 1` = 'Gibson' AND ENROLLMENT (AGES 5-17) > 0\r\nEND OF QUESTION+\n\t----- bird -----\tcalifornia_schools", "35": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the administrator's email address of the chartered school with the fewest students enrolled in grades 1 through 12? Charted school means `Charter School (Y/N)` = 1 in the table frpm; Students enrolled in grades 1 through 12 refers to `Enrollment (K-12)`'s value; administrator's email address refers to AdmEmail1\r\nCREATED SQL: SELECT T1.AdmEmail1 FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Charter School (Y/N)` = 1 AND T2.`Enrollment (K-12)` = ( SELECT MIN(`Enrollment (K-12)`) FROM frpm )\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\tcalifornia_schools", "36": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: Under whose administration does the school with the highest number of test takers whose total SAT Scores are greater or equal to 1500 belong to? Indicate his or her full name. full name means first name, last name; There are at most 3 administrators for each school; SAT Scores are greater or equal to 1500 refers to NumGE1500 on the rtype = 'SAT'\r\nCREATED SQL: SELECT T1.AdmlName1, T1.AdmlName2, T1.AdmlName3 FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.NumGE1500 = 3 ORDER BY T2.NumGE1500 DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF CREATION+\n\t----- bird -----\tcalifornia_schools", "37": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State. Execellence Rate = NumGE1500 / NumTstTakr; complete address has Street, City, State, Zip code of the school\r\nCREATED SQL: SELECT T1.Street, T1.City, T1.Zip, T1.State FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.NumTstTakr > 0 AND T2.NumGE1500 > 0 ORDER BY T2.NumGE1500 / T2.NumTstTakr ASC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\tcalifornia_schools", "38": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What are the webpages for the Los Angeles County school that has between 2,000 and 3,000 test takers?2000 < NumTstTakr < 3000\r\nCREATED SQL: SELECT DISTINCT T1.website FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.county = 'Los Angeles County' AND T1.NumTstTakr BETWEEN 2000 AND 3000\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tcalifornia_schools", "39": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980? between 1/1/1980 and 12/31/1980 means the year = 1980100;\r\nCREATED SQL: SELECT AVG(T2.NumTstTakr) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.OpenDate BETWEEN '1980-01-01' AND '1980-12-31' AND T1.City = 'Fresno'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF CREATION OF SQL\r\nEND OF CREATION+\n\t----- bird -----\tcalifornia_schools", "40": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the telephone number for the school with the lowest average score in reading in Fresno Unified? Fresno Unified is a name of district; on average, the score in reading refers to AvgScrRead; the lowest average score in reading refers to Min(AvgScrRead)\r\nCREATED SQL: SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.District = 'Fresno Unified' ORDER BY T1.AvgScrRead LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\tcalifornia_schools", "41": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: Which exclusively virtual schools have the top 5 highest average reading scores? Exclusively virtual refers to Virtual = 'F'.100% refers to AvgScrRead = 100; top 5 highest average reading scores refers to Max(AvgScrRead)\r\nCREATED SQL: SELECT T1.cname FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'T' ORDER BY T1.AvgScrRead DESC LIMIT 5\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\tcalifornia_schools", "42": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the type of education offered in the school who scored the highest average in Math?100% of students in the school who scored the highest average in Math are eligible for free meals; type of education refers to EdOpsName; highest average in Math refers to Max(AvgScrMath)\r\nCREATED SQL: SELECT T2.EdOpsName FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath = ( SELECT Max(AvgScrMath) FROM satscores ) AND T1.Percent+\n\t----- bird -----\tcalifornia_schools", "43": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the average math score of the school with the lowest average score for all subjects, and in which county is it located? Average score for all subjects can be computed by AvgScrMath + AvgScrRead + AvgScrWrite on satscores; lowest average score for all subjects refers to MIN(AvgScrMath + AvgScrRead + AvgScrWrite); school refers to sname; county refers to cname;\r\nCREATED SQL: SELECT AVG(T1.AvgScrMath), T2.cname FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath + T1.AvgScrRead + T1.AvgScr+\n\t----- bird -----\tcalifornia_schools", "44": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the average writing score of the school who has the highest number of test takers whose total SAT sscores are greater or equal to 1500? Indicate the city to where the school is situated. on the highest number of test takers refers to MAX(NumTstTakr); the total SAT sscores are greater or equal to 1500 refers to NumGE1500 = 1500; the city to where the school is situated refers to City\r\nCREATED SQL: SELECT AVG(AvgScrWrite), City FROM satscores WHERE NumGE1500 = 1500 ORDER BY NumTstTakr DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nCRE+\n\t----- bird -----\tcalifornia_schools", "45": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the average writing score of each of the schools managed by Ricci Ulrich? List the schools and the corresponding average writing scores. Usually, administrators manage the school stuff. on average writing score refers to avg(AvgScrWrite)\r\nCREATED SQL: SELECT T2.School, T2.AvgScrWrite FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.`AdminFName1` = 'Ricci' AND T1.`AdminLName1` = 'Ulrich'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF CRE+\n\t----- bird -----\tcalifornia_schools", "46": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: Which state special schools have the highest number of enrollees from grades 1 through 12? State Special Schools refers to DOC = 31; Grades 1 through 12 means K-12 on the table\r\nCREATED SQL: SELECT T1.State FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.LowGrade = 'K' AND T2.HighGrade = '12' AND T1.DOC = 31 ORDER BY T2.Enrollment (K-12) DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tcalifornia_schools", "47": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980? Elementary School District refers to DOC = 52; Monthly average number of schools that opened in 2018 = count(schools that opened in 1980) / 12; opened in 1980 refers to OpenDate like '1980%';\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN YEAR(`OpenDate`) = 1980 THEN 1 ELSE 0 END) AS REAL) / 12 FROM schools WHERE County = 'Alameda County' AND DOC = 52\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(*) FROM schools WHERE OpenDate LIKE '1980%' AND County = 'Alameda County' AND DOC = 52+\n\t----- bird -----\tcalifornia_schools", "48": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools? Elementary School District refers to DOC = 52; Unified School District refers to DOC = 54.10000000000001; ratio = divide(count(DOC = 52), count(DOC = 54.10000000000001))\r\nCREATED SQL: SELECT CAST(SUM(DOC = 52) AS REAL) / SUM(DOC = 54.1) FROM schools WHERE County = 'Orange' AND DOC IN (52, 54.1)\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(T2.DOC) FROM schools AS T1 INNER JOIN schools AS T+\n\t----- bird -----\tcalifornia_schools", "49": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: Which different county has the most number of closed schools? Please provide the name of each school as well as the closure date. Closure date and closed date are synonyms; 'Closed' was mentioned in schools.StatusType.100 refers to closed schools; the most number of closed schools refers to max(count(CDSCode where StatusType = 'Closed'))\r\nCREATED SQL: SELECT DISTINCT T1.cname, T2.ClosedDate FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.StatusType = 'Closed' ORDER BY COUNT(T2.CDSCode) DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nCREATED SQL refers+\n\t----- bird -----\tcalifornia_schools", "50": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the postal street address for the school with the 6th highest Math average? Indicate the school's name. Postal street and mailing street are synonyms.2007-08 is the academic year; Math average refers to AvgScrMath; 6th highest Math average refers to AVG(AvgScrMath) DESC LIMIT 6;\r\nCREATED SQL: SELECT T1.school FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrMath = ( SELECT AvgScrMath FROM satscores ORDER BY AvgScrMath DESC LIMIT 6 ) AND T1.Acad+\n\t----- bird -----\tcalifornia_schools", "51": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: In which mailing street address can you find the school that has the lowest average score in reading? Also give the school's name.100% average score in reading refers to AvgScrRead = 100; mailing street address refers to MailStreet; lowest average score in reading refers to MIN(AvgScrRead)\r\nCREATED SQL: SELECT T1.MailStreet, T1.school FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrRead = 100\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\tcalifornia_schools", "52": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the total number of schools whose total SAT scores are greater or equal to 1500 whose mailing city is Lakeport? Total SAT scores can be computed by AvgScrRead + AvgScrMath + AvgScrWrite on the table satscores; mailing city is Lakeport refers to MailCity = 'Lakeport';\r\nCREATED SQL: SELECT COUNT(T2.cds) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrRead + T2.AvgScrMath + T2.AvgScrWrite >= 1500 AND T1.MailCity = 'Lakeport'\r\nEND OF QUESTION\r\nCREATED SQL\r\nCRE+\n\t----- bird -----\tcalifornia_schools", "53": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: How many test takers are there at the school/s whose mailing city address is in Fresno? on Fresno refers to MailCity = 'Fresno';\r\nCREATED SQL: SELECT COUNT(T1.NumTstTakr) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Fresno'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tcalifornia_schools", "54": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: Please specify all of the schools and their related mailing zip codes that are under Avetik Atoian's administration.1000% is equivalent to Percent(%) = 100\r\nCREATED SQL: SELECT T1.school, T1.MailZip FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Open' AND T1.AdmFName1 = 'Avetik' AND T1.AdmLName1 = 'Atoian' AND T1.MailZip = '100%' GROUP BY T1.school+\n\t----- bird -----\tcalifornia_schools", "55": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: Of the schools with a mailing state address in California, what is the ratio of the schools located in the county of Colusa against the school located in the county of Humboldt? Ratio = count(schools in Colusa) / count(schools in Humboldt) where schools in Colusa refers to District Name = 'Colusa'; schools in Humboldt refers to District Name = 'Humboldt'\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T2.DistrictName = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.DistrictName = 'Humboldt' THEN 1 ELSE 0 END) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.C+\n\t----- bird -----\tcalifornia_schools", "56": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: Of all the schools with a mailing state address in California, how many are active in San Joaquin? County = 'San Joaquin'; State = 'CA'; active refers to StatusType = 'Active'\r\nCREATED SQL: SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' AND T1.State = 'CA' AND T1.District = 'San Joaquin'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tcalifornia_schools", "57": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the phone number and extension number for the school that had the 333rd highest average writing score?100 highest average writing score refers to AvgScrWrite DESC LIMIT 100; the 333rd highest average writing score refers to AvgScrWrite DESC LIMIT 333;\r\nCREATED SQL: SELECT T1.Phone, T1.Ext FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrWrite DESC LIMIT 333\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tcalifornia_schools", "58": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the phone number and extension number for the school with the zip code 95203-3704? Indicate the school's name. on the database schema; phone number refers to Phone; extension number refers to Ext; zip code 95203-3704 refers to Zip = '95203-3704'\r\nCREATED SQL: SELECT T1.Phone, T1.Ext, T1.`School` FROM schools AS T1 WHERE T1.Zip = '95203-3704'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tcalifornia_schools", "59": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the website for the schools under the administrations of Mike Larson and Dante Alvarez?100% of students are eligible for free meals. website refers to Website; Mike Larson and Dante Alvarez refer to AdmFName1 = 'Mike Larson' AND AdmLName1 = 'Dante Alvarez'; 100% of students are eligible for free meals refers to Percent (%) Eligible Free = 1.0;\r\nCREATED SQL: SELECT DISTINCT T2.Website FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDS+\n\t----- bird -----\tcalifornia_schools", "60": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What are the websites for all the partially virtual chartered schools located in San Joaquin? Virtual = 'P' means partially virtual; Charter schools refers to Charter = 1 in the table schools of chartered schools; located in San Joaquin refers to City = 'San Joaquin'\r\nCREATED SQL: SELECT Website FROM schools WHERE City = 'San Joaquin' AND Virtual = 'P' AND Charter = 1\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T2.Website FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.City = 'San Joaquin' AND T+\n\t----- bird -----\tcalifornia_schools", "61": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: How many chartered schools located in the city of Hickman are owned by the Elementary School District? Elementary School District refers to DOC = 52; Chartered schools refer to Charter = 1 in the table schools100; Hickman refers to City = 'Hickman'\r\nCREATED SQL: SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.City = 'Hickman' AND T1.DOC = 52 AND T1.Charter = 1\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN schools AS+\n\t----- bird -----\tcalifornia_schools", "62": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%? non-chartered schools refer to schools whose Charter = 0; K-12 means grades 1 through 12; percent of eligible free rate for K-12 = `Free Meal Count (K-12)` * 100 / `Enrollment (K-12)`; percent of eligible free rate for K-12 < 0.18% refers to `Percent (%) Eligible Free (K-12)` < 0.18\r\nCREATED SQL: SELECT COUNT(CDSCode) FROM schools WHERE County = 'Los Angeles' AND Charter = 0 AND CAST(`Percent (%) Eligible Free (K-12)` AS REAL) < 0.18\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(CDSCode) FROM schools WHERE County =+\n\t----- bird -----\tcalifornia_schools", "63": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: In chartered schools with charter number 00D2, what are the names of all the administrators? Include the name of the school and the city to which it belongs Chartered schools refer to Charter = 1 in the table schools; Full name refers to first name, last name county, district, and school name refers to County Name, District Name, School Name respectively; charter number refers to CharterNum; administrators refers to AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3\r\nCREATED SQL: SELECT DISTINCT T1.SchoolName, T1.City FROM schools AS T1+\n\t----- bird -----\tcalifornia_schools", "64": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the total number of schools with a mailing city in Hickman belonging to the charter number 00D4?100D4 refers to charter number; Hickman refers to City = 'Hickman'\r\nCREATED SQL: SELECT COUNT(T1.cname) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cname = T2.CDSCode WHERE T2.City = 'Hickman' AND T2.CharterNum = '00D4'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\tcalifornia_schools", "65": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the ratio in percentage of Santa Clara County schools that are locally funded compared to all other types of charter school funding? Ratio in percentage = (count(locally funded schools in Santa Clara) / count(all funding type schools in Santa Clara) * 100%100% refers to percentage; Santa Clara refers to County = 'Santa Clara'\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T2.FundingType = 'Locally' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.CDSCode) FROM schools AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'Santa Clara'\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\tcalifornia_schools", "66": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: Between 1/1/2000 to 12/31/2005, how many directly funded schools opened in the county of Stanislaus? Directly funded schools refers to FundingType = 'Directly Funded'100% of schools in Stanislaus County refers to County = 'Stanislaus County'\r\nCREATED SQL: SELECT COUNT(T1.cds) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.cds = T2.cds WHERE T1.FundingType = 'Directly Funded' AND T1.County = 'Stanislaus County' AND T1.OpenDate BETWEEN '2000-01-01' AND '2005-12-31+\n\t----- bird -----\tcalifornia_schools", "67": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the total amount of Community College District closure in 1989 in the city of San Francisco?100% of Community College District refers to District = 'Community College District'; 1989 refers to year('ClosedDate') = 1989; San Francisco refers to City = 'San Francisco'\r\nCREATED SQL: SELECT COUNT(DISTINCT T1.District) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.District = 'Community College District' AND T1.City = 'San Francisco' AND T+\n\t----- bird -----\tcalifornia_schools", "68": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: Which county reported the most number of school closure in the 1980s with school wonership code belonging to Youth Authority Facilities (CEA)? Youth Authority Facilities (CEA) refers to SOC = 11; 1980s = years between 1980 and 1989; most number of school closure refers to max(count(ClosedDate where year(ClosedDate) between 1980 and 1989))\r\nCREATED SQL: SELECT County FROM schools WHERE SOC = 11 AND year(ClosedDate) BETWEEN 1980 AND 1989 GROUP BY County ORDER BY COUNT(ClosedDate) DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nCREATED BY: Kien Truong\r\nDATE: 2020-03-31\r\nEND OF CRE+\n\t----- bird -----\tcalifornia_schools", "69": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: Please provide the National Center for Educational Statistics school district identification number for all schools with a School Ownership Code that are part of the State Special Schools. State Special Schools means that SOC = 31.200;\r\nCREATED SQL: SELECT DISTINCT SOC FROM schools WHERE SOC = 31.200\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\tcalifornia_schools", "70": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: How many active and closed District Community Day Schools are there in the county of Alpine?100% of the schools in the county of Alpine refers to County = 'Alpine'\r\nCREATED SQL: SELECT COUNT(T1.StatusType) FROM schools AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.StatusType IN ('Active', 'Closed') AND T1.County = 'Alpine'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(T1.StatusType) FROM schools AS T1 INNER JOIN schools AS T2+\n\t----- bird -----\tcalifornia_schools", "71": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the district code for the School that does not offer a magnet program in the city of Fresno? When magent is equal to 0 in the database, it means ths school doesn't offer a magnet program.100% of the students in the school are eligible for free meals and the school is located in the city of Fresno\r\nCREATED SQL: SELECT T1.DistrictCode FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.City = 'Fresno' AND T2.Percent (%) Eligible Free (K-12) = 100 AND T2.Magnet = 0\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tcalifornia_schools", "72": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: How many students from the ages of 5 to 17 are enrolled at the State Special School school in Fremont for the 2014-2015 academic year? State Special School means EdOpsCode = 'SSS' on the schools table; Fremont refers to City = 'Fremont'; 2014-2015 academic year refers to Academic Year = '2014-15'\r\nCREATED SQL: SELECT SUM(T1.`Enrollment (Ages 5-17)`) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.City = 'Fremont' AND T1.AcademicYear = '2014+\n\t----- bird -----\tcalifornia_schools", "73": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the free or reduced price meal count for ages 5 to 17 in the Youth Authority School with a mailing street address of PO Box 1040?100% free or reduced price meal count refers to Percent (%) Eligible Free (Ages 5-17) = 1; mailing street address of PO Box 1040 refers to MailStreet = 'PO Box 1040';\r\nCREATED SQL: SELECT T1.`Percent (%) Eligible Free (Ages 5-17)` FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.MailStreet = '+\n\t----- bird -----\tcalifornia_schools", "74": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the lowest grade for the District Special Education Consortia School with National Center for Educational Statistics school district identification number of 613360? District Special Education Consortia School refers to EdOpsCode = 'SPECON'. on lowest grade refers to Min( Low Grade)\r\nCREATED SQL: SELECT MIN(`Low Grade`) FROM schools WHERE EdOpsCode = 'SPECON' AND NCESDist = '613360'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nCREATED SQL refers to the SQL code that will return the desired result\r\nEND OF CREATED SQL\r\nEND OF CREATED SQL refers to the SQL code that will return the desired result\r\nEND OF CREATED SQL+\n\t----- bird -----\tcalifornia_schools", "75": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the educational level name for the schools with Breakfast Provision 2 in county code 37? Indicate the name of the school. 37 is the County Code; Breakfast Provision 2 refers to NSLP Provision Status = 'Breakfast Provision 2'\r\nCREATED SQL: SELECT T1.SchoolName FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`County Code` = '37' AND T2.`NSLP Provision Status` = 'Breakfast Provision 2'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tcalifornia_schools", "76": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the city location of the high school level school with Lunch Provision 2 whose lowest grade is 9 and the highest grade is 12 in the county of Merced? High school can be represented as EILCode = 'HS' code; lowest grade is 9 and the highest grade is 12 refers to Low Grade = '9' and High Grade = '12'; county of Merced refers to County Name = 'Merced'\r\nCREATED SQL: SELECT COUNT(DISTINCT T1.City) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County Name = 'Merced' AND T2.Low Grade = '9' AND+\n\t----- bird -----\tcalifornia_schools", "77": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: Which schools served a grade span of Kindergarten to 9th grade in the county of Los Angeles and what is its Percent (%) Eligible FRPM (Ages 5-17)? Percent (%) Eligible FRPM (Ages 5-17) can be acquired by `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` * 100% where county = 'Los Angeles'\r\nCREATED SQL: SELECT T1.SchoolName, CAST(T2.`Free Meal Count (Ages 5-17)` AS REAL) / T2.`Enrollment (Ages 5-17)` * 100 FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'Los Angeles' AND T2.LowGrade = 'Kindergarten' AND T2+\n\t----- bird -----\tcalifornia_schools", "78": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the most common type of grade span served in the city of Adelanto? on the city of Adelanto refers to City = 'Adelanto'\r\nCREATED SQL: SELECT COUNT(DISTINCT T1.GSserved) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.City = 'Adelanto'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(DISTINCT T1.GSserved) FROM schools AS T1 INNER JOIN satscores AS T2 ON+\n\t----- bird -----\tcalifornia_schools", "79": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: Between San Diego and Santa Barbara, which county offers the most number of schools that does not offer physical building? Indicate the amount. 'Does not offer physical building' means Virtual = F in the database. on San Diego and Santa Barbara refers to County Name = 'San Diego' OR County Name = 'Santa Barbara'\r\nCREATED SQL: SELECT COUNT(T2.CDSCode) FROM schools AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.Virtual = 0 AND (T1.`County Name` = 'San Diego' OR T1.`County Name` = 'Santa Barbara')\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tcalifornia_schools", "80": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the school type of the school with the highest latitude? Indicate the name of the school as well as the latitude coordinates.'school type' refers to School Type; highest latitude refers to Max(Latitude);\r\nCREATED SQL: SELECT DISTINCT T1.SchoolType, T1.Latitude, T1.School FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T1.Latitude DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\tcalifornia_schools", "81": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: In which city can you find the school in the state of California with the lowest latitude coordinates and what is its lowest grade? Indicate the school name. State of California refers to state = 'CA'100%; lowest latitude coordinates refers to MIN(Latitude); lowest grade refers to MIN(Low Grade)\r\nCREATED SQL: SELECT T2.City, T2.Low Grade FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.State = 'CA' AND T1.Latitude = ( SELECT MIN(T1.Latitude) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2+\n\t----- bird -----\tcalifornia_schools", "82": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the grade span offered in the school with the highest longitude? County Name refers to County; highest longitude refers to max(Longitude); grade span refers to Low Grade; Low Grade; High Grade\r\nCREATED SQL: SELECT LowGrade, HighGrade FROM schools WHERE Longitude = ( SELECT MAX(Longitude) FROM schools )\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\tcalifornia_schools", "83": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city. Kindergarten to 8th grade refers to K-8; 'Offers a magnet program' means Magnet = 1. on offer a magnet program refers to Magnet = 1; 'Offers Multiple Provision Types' refers to EdOpsName = 'Multiple Provision Types';\r\nCREATED SQL: SELECT COUNT(DISTINCT T1.CDSCode) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.Magnet = 1 AND T1.GSoffered LIKE 'K-8' AND T2.EdOpsName = 'Multiple Provision Types+\n\t----- bird -----\tcalifornia_schools", "84": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What are the two most common first names among the school administrators? Indicate the district to which they administer. on the school administrator refers to AdmFName1, AdmLName1, AdmEmail1; the most common first name refers to MAX(COUNT(AdmFName1)); the district refers to District Name\r\nCREATED SQL: SELECT T1.DistrictName, T1.AdmFName1 FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode GROUP BY T1.DistrictName, T1.Ad+\n\t----- bird -----\tcalifornia_schools", "85": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school. Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100% on the school name; administrator whose first name is Alusine refers to AdmFName1 = 'Alusine';\r\nCREATED SQL: SELECT T1.Percentage, T1.DistrictCode FROM ( SELECT CAST(FREE MEAL COUNT (K-12) AS REAL) * 100 / ENROLLMENT (K-12) AS Percentage, District Code AS DistrictCode FROM frpm WHERE AdmFName1 = 'Alusine' ) T1\r\nEND OF QUESTION+\n\t----- bird -----\tcalifornia_schools", "86": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the administrator's last name that oversees the school with Charter number 40? Indicate the district, the county where the school is situated, and the name of the school.100% refers to Percent (%) Eligible FRPM = 1; administrator's last name refers to AdmLName1; Charter number 40 refers to CharterNum = '40'; district refers to District Name; county refers to County Name; name of the school refers to School Name\r\nCREATED SQL: SELECT DISTINCT T1.DistrictName, T1.CountyName, T1.SchoolName FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode+\n\t----- bird -----\tcalifornia_schools", "87": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the e-mail address of the administrator of the school located in the San Bernardino county, District of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Scools? Intermediate/Middle Schools refers to SOC = 62; Unified School refers to DOC = 54; years between 2009 and 2010 can refer to 'between 1/1/2009 to 12/31/2010' refers to OpenDate between '2009-01-01' and '2010-12-31'; San Bernardino county refers to County = 'San Bernardino'\r\nCREATED SQL: SELECT T2.AdmlEmail1 FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'San Bernardino' AND T1.District = 'San Bernardino City Unified' AND T2.SOC = 62 AND T+\n\t----- bird -----\tcalifornia_schools", "88": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE frpm (\r\nCDSCode text,\r\nAcademic Year text,\r\nCounty Code text,\r\nDistrict Code integer,\r\nSchool Code text,\r\nCounty Name text,\r\nDistrict Name text,\r\nSchool Name text,\r\nDistrict Type text,\r\nSchool Type text,\r\nEducational Option Type text,\r\nNSLP Provision Status text,\r\nCharter School (Y/N) integer,\r\nCharter School Number text,\r\nCharter Funding Type text,\r\nIRC integer,\r\nLow Grade text,\r\nHigh Grade text,\r\nEnrollment (K-12) real,\r\nFree Meal Count (K-12) real,\r\nPercent (%) Eligible Free (K-12) real,\r\nFRPM Count (K-12) real,\r\nPercent (%) Eligible FRPM (K-12) real,\r\nEnrollment (Ages 5-17) real,\r\nFree Meal Count (Ages 5-17) real,\r\nPercent (%) Eligible Free (Ages 5-17) real,\r\nFRPM Count (Ages 5-17) real,\r\nPercent (%) Eligible FRPM (Ages 5-17) real,\r\n2013-14 CALPADS Fall 1 Certification Status integer,\r\nPRIMARY KEY (CDSCode),\r\nFOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE satscores (\r\ncds text,\r\nrtype text,\r\nsname text,\r\ndname text,\r\ncname text,\r\nenroll12 integer,\r\nNumTstTakr integer,\r\nAvgScrRead integer,\r\nAvgScrMath integer,\r\nAvgScrWrite integer,\r\nNumGE1500 integer,\r\nPRIMARY KEY (cds),\r\nFOREIGN KEY (cds) REFERENCES schools(CDSCode),\r\n);\r\nCREATE TABLE schools (\r\nCDSCode text,\r\nNCESDist text,\r\nNCESSchool text,\r\nStatusType text,\r\nCounty text,\r\nDistrict text,\r\nSchool text,\r\nStreet text,\r\nStreetAbr text,\r\nCity text,\r\nZip text,\r\nState text,\r\nMailStreet text,\r\nMailStrAbr text,\r\nMailCity text,\r\nMailZip text,\r\nMailState text,\r\nPhone text,\r\nExt text,\r\nWebsite text,\r\nOpenDate date,\r\nClosedDate date,\r\nCharter integer,\r\nCharterNum text,\r\nFundingType text,\r\nDOC text,\r\nDOCType text,\r\nSOC text,\r\nSOCType text,\r\nEdOpsCode text,\r\nEdOpsName text,\r\nEILCode text,\r\nEILName text,\r\nGSoffered text,\r\nGSserved text,\r\nVirtual text,\r\nMagnet integer,\r\nLatitude real,\r\nLongitude real,\r\nAdmFName1 text,\r\nAdmLName1 text,\r\nAdmEmail1 text,\r\nAdmFName2 text,\r\nAdmLName2 text,\r\nAdmEmail2 text,\r\nAdmFName3 text,\r\nAdmLName3 text,\r\nAdmEmail3 text,\r\nLastUpdate date,\r\nPRIMARY KEY (CDSCode),\r\n);\r\n---------------------\r\nQUESTION: What is the administrator's email address for the school with the highest number of test takers who received SAT scores of at least 1500?Provide the name of the school. administrator's email address refers to AdmEmail1; the highest number of test takers who received SAT scores of at least 1500 refers to Max(NumGE1500); the name of the school refers to sname\r\nCREATED SQL: SELECT T1.AdmlEmail1 FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 = ( SELECT MAX(NumGE1500) FROM+\n\t----- bird -----\tcalifornia_schools", "89": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: How many accounts who choose issuance after transaction are staying in East Bohemia region? A3 contains the data of region; 'POPLATEK PO OBRATU' represents for 'issuance after transaction'. the account refers to account_id; account_id refers to client_id\r\nCREATED SQL: SELECT COUNT(DISTINCT T2.account_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.client_id = T3.client_id INNER JOIN account AS T4 ON T3.account_id = T4.account_id WHERE T1.A3 = 'East Bohemia' AND T4.frequency = '+\n\t----- bird -----\tfinancial", "90": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: How many accounts who have region in Prague are eligible for loans? A3 contains the data of region the account belongs to; A3 = 'Prague' indicates that the account belongs to the region of Prague; eligible for loans refers to status = 'paid in full'\r\nCREATED SQL: SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T1.district_id IN ( SELECT district_id FROM district WHERE A3 = 'Prague' ) AND T2.status = 'paid in full'\r\nEND+\n\t----- bird -----\tfinancial", "91": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: The average unemployment ratio of 1995 and 1996, which one has higher percentage? A12 refers to unemploymant rate 1995; A13 refers to unemploymant rate 1996 the average unemployment ratio = divide(sum(A12), sum(A13)); higher percentage refers to the percentage of A12/A13 that is larger than 1;\r\nCREATED SQL: SELECT CASE  WHEN AVG(T1.A12) > AVG(T1.A13) THEN AVG(T1.A12) ELSE AVG(T1.A13) END FROM district AS T1 WHERE T1.A2 = 'Bratislava'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\tfinancial", "92": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: List out the no. of districts that have female average salary is more than 6000 but less than 10000? A11 refers to average salary; Female mapps to gender = 'F' on client;\r\nCREATED SQL: SELECT COUNT(DISTINCT T1.district_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' AND T1.A11 BETWEEN 6000 AND 10000\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tfinancial", "93": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: How many male customers who are living in North Bohemia have average salary greater than 8000? Male means that gender = 'M'; A3 refers to region; A11 pertains to average salary. the average salary of district refers to avg(A11)\r\nCREATED SQL: SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'North Bohemia' AND T2.A11 > 8000\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tfinancial", "94": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary? Female means gender = 'F'; A11 refers to average salary; Gap = highest average salary - lowest average salary; If the person A's birthdate > B's birthdate, it means that person B is order than person A. the oldest and has lowest average salary refers to min(birth_date), min(A11);\r\nCREATED SQL: SELECT T1.account_id FROM account AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' ORDER BY T2.birth_date ASC, T2.A11 DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\tfinancial", "95": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: List out the account numbers of clients who are youngest and have highest average salary? If the person A's birthdate < B's birthdate, it means that person B is younger than person A; A11 refers to average salary the client has; average salary = DIVIDE(SUM(A11), COUNT(client_id));\r\nCREATED SQL: SELECT T1.account_id FROM account AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.birth_date = ( SELECT MIN(birth_date) FROM client ) OR T2.birth_date = ( SELECT MAX(birth_date) FROM client )\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.account_id FROM account AS T1+\n\t----- bird -----\tfinancial", "96": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: How many customers who choose statement of weekly issuance are Owner? 'POPLATEK TYDNE' stands for weekly issuance on statement; Owner refers to type = 'Owner';\r\nCREATED SQL: SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T1.frequency = 'POPLATEK TYDNE' AND T3.gender = 'Owner'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\tfinancial", "97": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: List out the clients who choose statement of issuance after transaction are Disponent? 'POPLATEK PO OBRATU' stands for issuance after transaction the client choose statement of issuance; Disponent refers to type = 'Disponent';\r\nCREATED SQL: SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T2.type = 'Disponent' AND T3.operation = 'POPLATEK PO OBRATU'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\tfinancial", "98": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement. 'POPLATEK TYDNE' stands for weekly issuance the statement; approved loan date in 1997 refers to loan.date LIKE '1997%'; lowest approved amount refers to MIN(amount);\r\nCREATED SQL: SELECT DISTINCT T2.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.date LIKE '1997%' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nCRE+\n\t----- bird -----\tfinancial", "99": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: Among the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993. Loan validity more than 12 months refers to duration > 12; approved amount refers to amount; account opening date in 1993 refers to date LIKE '1993%';\r\nCREATED SQL: SELECT T1.amount FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration > 12 AND T2.date LIKE '1993%' ORDER BY T1.amount DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tfinancial", "100": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: Among the account opened, how many female customers who were born before 1950 and stayed in Slokolov? Customers refer to clients; Female refers to gender = 'F'; Names of districts appear in column A2 the most are considered as the main district; born before 1950 refers to birth_date < '1950-01-01'; Slokolov refers to A2 = 'Slokolov';\r\nCREATED SQL: SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T1.birth_date < '1950-01-01' AND T2+\n\t----- bird -----\tfinancial", "101": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: List out the accounts who have the earliest trading date in 1995? the earliest trading date refers to MIN(date); in 1995 refers to date like '1995%';\r\nCREATED SQL: SELECT account_id FROM account WHERE date LIKE '1995%' ORDER BY date LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tfinancial", "102": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: State different accounts who have account opening date before 1997 and own an amount of money greater than 3000USD the account opening date before 1997 refers to date < '1997-01-01'; own an amount of money greater than 3000USD refers to balance > 3000\r\nCREATED SQL: SELECT DISTINCT T1.account_id FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount > 3000 AND T1.date < '1997-01-01'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\tfinancial", "103": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: Which client issued his/her card in 1994/3/3, give his/her client id. the card issued in 1994/3/3 refers to issued = '1994-03-03';\r\nCREATED SQL: SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued = '1994-03-03'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tfinancial", "104": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: The transaction of 840 USD happened in 1998/10/14, when was this account opened? the transaction of 840 USD refers to amount = 840; in 1998/10/14 refers to date = '1998-10-14'; when was this account opened refers to date of issued;\r\nCREATED SQL: SELECT T1.date FROM trans AS T1 INNER JOIN card AS T2 ON T1.account_id = T2.card_id WHERE T1.amount = 840 AND T1.date = '1998-10-14' AND T2.issued = T+\n\t----- bird -----\tfinancial", "105": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: There was a loan approved in 1994/8/25, where was that account opened, give the district Id of the branch. the loan was approved in 1994/8/25 refers to date = '1994-08-25'; branch refers to district_id; district_id of the branch refers to district_id\r\nCREATED SQL: SELECT T1.district_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1994-08-25' AND T2.status = 'Approved'\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\tfinancial", "106": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: What is the biggest amount of transaction that the client whose card was opened in 1996/10/21 made? the biggest amount refers to MAX(amount); card opened in 1996/10/21 refers to issued = '1996-10-21';\r\nCREATED SQL: SELECT MAX(T2.amount) FROM card AS T1 INNER JOIN trans AS T2 ON T1.card_id = T2.account_id WHERE T1.issued = '1996-10-21'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\tfinancial", "107": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: What is the gender of the oldest client who opened his/her account in the highest average salary branch? Earlier birthdate refers to older age; A11 refers to average salary the district has; average salary refers to avg(A11)\r\nCREATED SQL: SELECT T1.gender FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A11 = ( SELECT AVG(A11) FROM district ) ORDER BY T1.birth_date LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\tfinancial", "108": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: For the client who applied the biggest loan, what was his/her first amount of transaction after opened the account? the biggest loan refers to max(amount); first amount of transaction after opened the account refers to MIN(trans_id)\r\nCREATED SQL: SELECT T1.amount FROM loan AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.trans_id = ( SELECT MIN(trans_id) FROM trans )\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tfinancial", "109": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: How many clients opened their accounts in Jesenik branch were women? A2 has region names; Woman and female share the same meaning; female refers to gender = 'F' where F stands for female; Jesenik refers to A2 = 'Jesenik';\r\nCREATED SQL: SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Jesenik' AND T1.gender = 'F'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\tfinancial", "110": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: What is the disposition id of the client who made 5100 USD transaction in 1998/9/2?100 USD = 100 * 1000 / 100000; 1998/9/2 refers to date = '1998-09-02'\r\nCREATED SQL: SELECT T1.disp_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.date = '1998-09-02' AND T3.amount =+\n\t----- bird -----\tfinancial", "111": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: How many accounts were opened in Litomerice in 1996? A2 refers to district name; Litomerice is one of district names. the year 1996 refers to date between '1996-01-01' and '1996-12-31';\r\nCREATED SQL: SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Litomerice' AND T1.date BETWEEN '1996-01-01' AND '1996-12-31'\r\nEND OF QUESTION\r\n+\n\t----- bird -----\tfinancial", "112": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: For the female client who was born in 1976/1/29, which district did she opened her account? Female refers to gender = 'F'; A2 refers to district names the client opened her account in; born in 1976/1/29 refers to birth_date = '1976-01-29';\r\nCREATED SQL: SELECT T1.district_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T1.birth_date = '1976-01-29' AND T1.gender = 'F'\r\nEND OF+\n\t----- bird -----\tfinancial", "113": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: For the client who applied 98832 USD loan in 1996/1/3, when was his/her birthday? the client who applied 98832 USD loan in 1996/1/3 refers to loan_id = 98832 and date = '1996-01-03'; when was his/her birthday refers to birth_date\r\nCREATED SQL: SELECT T1.birth_date FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.amount = 98832+\n\t----- bird -----\tfinancial", "114": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: For the first client who opened his/her account in Prague, what is his/her account ID? A3 stands for region names the client lives in; Prague refers to A3 = 'Prague'\r\nCREATED SQL: SELECT T2.account_id FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.district_id = ( SELECT district_id FROM district WHERE A3 = 'Prague' LIMIT 1 ) ORDER BY T1.client_id LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tfinancial", "115": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients? Percentage of the male clients = DIVIDE(COUNT(male clients), COUNT(clients)) * 100%; Male refers to gender = 'M', A3 is the region name. A4 contains the information about inhabitants. the south Bohemia refers to A3 = 'South Bohemia';\r\nCREATED SQL: SELECT CAST(COUNT(CASE WHEN T1.A3 = 'South Bohemia' THEN T2.gender WHEN T2.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.A3) FROM district AS T1 INNER JOIN client AS T2 ON T2.district_id = T1.district_id\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\tfinancial", "116": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: For the client who first applied the loan in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27? Increase rate of his/her account balance = [(balance of date A - balance of date B) / balance of Date B] * 100% ; first applied the loan refers to MIN(date); MIN(date) = '1993-07-05'; date A = '1998-12-27'; date B = '1993-03-22';\r\nCREATED SQL: SELECT CAST((T2.balance - T1.balance) AS REAL) * 100 / T1.balance FROM trans AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.date = '1993-07+\n\t----- bird -----\tfinancial", "117": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: What is the percentage of loan amount that has been fully paid with no issue. Loan paid with no issue means contract finished, no problems; status = 'A' means contract finished, no problems; Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100% the percentage of loan amount that has been fully paid with no issue = (SUM(amount) WHERE status = 'A') / (SUM(amount)) * 100%\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T1.status = 'A' THEN T2.amount ELSE 0 END) AS REAL) * 100 / SUM(T2.amount) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tfinancial", "118": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: For loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue. Status = 'C' stands for running contract, ok so far; Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100%. the percentage of accounts that is still running with no issue refers to DIVIDE(SUM(status = 'C' AND amount < 100000), COUNT(account_id))\r\nCREATED SQL: SELECT SUM(CASE WHEN T2.status = 'C' AND T1.amount < 100000 THEN 1 ELSE 0 END) * 100 / COUNT(T1.account_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id\r\nEND OF QUESTION+\n\t----- bird -----\tfinancial", "119": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: For accounts in 1993 with statement issued after transaction, list the account ID, district name and district region. Records about district names could be found in A2; A3 contains the information about regions. 'POPLATEK PO OBRATU' stands for issuance after transaction the transaction refers to trans_id; issued after transaction refers to trans_id > card_id; issued after transaction refers to trans_id > card_id;\r\nCREATED SQL: SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.date LIKE '1993%' AND T1.trans_id > T3.card_id\r\nEND OF QUESTION\r\nCREATED SQL: SELECT+\n\t----- bird -----\tfinancial", "120": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: From Year 1995 to 2000, who are the accounts holders from 'east Bohemia'. State the account ID the frequency of statement issuance. Accounts holder refers to the person who own this account. the account ID refers to account_id; the frequency of statement issuance refers to frequency; from 'east Bohemia' refers to A2 = 'east Bohemia'\r\nCREATED SQL: SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'east Bohemia' AND T1.date BETWEEN '1995-01-01' AND '2000-12-+\n\t----- bird -----\tfinancial", "121": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: List account ID and account opening date for accounts from 'Prachatice'. A2 refers to the names of districts. the name of district = 'Prachatice'\r\nCREATED SQL: SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Prachatice'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2+\n\t----- bird -----\tfinancial", "122": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: State the district and region for loan ID '4990'. A2, A3 contains the information about district and region respectively. the loan ID '4990' refers to loan_id = '4990'\r\nCREATED SQL: SELECT T1.A2, T1.A3 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T2.loan_id = '4990'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\tfinancial", "123": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: Provide the account ID, district and region for loan amount greater than USD300,000. A2 contains district names and A3 contains region names. on loan amount greater than USD300,000 refers to amount > 300000;\r\nCREATED SQL: SELECT T1.account_id, T1.district_id, T2.A2 FROM loan AS T1 INNER JOIN district AS T2 ON T1.account_id = T2.district_id WHERE T1.amount > 300000\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\tfinancial", "124": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: List the loan ID, district and average salary for loan with duration of 60 months. A3 refers to regions; A11 refers to average salary the client's district; duration of 60 months refers to duration = 60;\r\nCREATED SQL: SELECT T1.loan_id, T3.A3, T3.A11 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.duration = 60\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\tfinancial", "125": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996. Unemployment increment rate in percentage = [(unemployment rate 2016 - unemployment rate 2015) / unemployment rate 2015] * 100%; unemployment rate 2015 appears in the A12; unemployment rate 2016 appears in the A13; Loan contracts which are still running where client are in debt can be presented as status = 'D' and duration > 0;\r\nCREATED SQL: SELECT T1.district_id, (T2.A13 - T2.A12) * 100 / T2.A12 AS percentage FROM district AS T1 INNER JOIN loan AS T3 ON T1.district_id = T3.account_id INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T3.status = 'D' AND T3.duration > 0\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tfinancial", "126": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: Calculate the percentage of account from 'Decin' district for all accounts are opened in 1993. A2 contains the information about district. on 1993 refers to date = '1993-01-01'; percentage = divide(count(account_id where district_id = 2 and date = '1993-01-01'), count(account_id)) * 100%\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T1.district_id = 2 AND T2.date = '1993-01-01' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.account_id)+\n\t----- bird -----\tfinancial", "127": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: List the account IDs with monthly issuance of statements. 'POPLATEK MESICNE' stands for monthly issuance on statements;\r\nCREATED SQL: SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\tfinancial", "128": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: List the top ten districts, by descending order, from the highest to the lowest, the number of female account holders. A2 refers to districts; Female refers to gender = 'F' the number of female account holders refers to count(client_id) where gender = 'F'\r\nCREATED SQL: SELECT T1.A2 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' ORDER BY T2.district_id DESC LIMIT 10\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tfinancial", "129": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: Which are the top ten withdrawals (non-credit card) by district names for the month of January 1996? Non-credit card withdraws refers to type = 'VYDAJ'; January 1996 can be found by date LIKE '1996-01%' in the database; A2 means district names\r\nCREATED SQL: SELECT T1.A2, SUM(T3.amount) FROM district AS T1 INNER JOIN trans AS T2 ON T1.district_id = T2.account_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T2.type = 'VYDAJ' AND T2.date LIKE '1996-01%' GROUP BY T1.A2 ORDER BY SUM(T3.amount) DESC LIMIT 10\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tfinancial", "130": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: How many of the account holders in South Bohemia still do not own credit cards? A3 contains the region names; South Bohemia is one of region names. the account holders still do not own credit cards refers to type = 'credit' and status = 'active'\r\nCREATED SQL: SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN loan AS T2 ON T1.district_id = T2.account_id WHERE T1.A3 = 'South Bohemia' AND T2.status = 'active' AND T2.type = 'credit'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tfinancial", "131": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: Which district has highest active loan? A3 refers to district names; Active loan refers to running contracts; Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt the bank; Status = 'E' stands for running contract, client in debt the bank, but he has enough money to pay back; Status = 'F' stands for running contract, client in debt the bank, but he has enough money to pay back, the bank has not started the recovery proceedings; Status = 'G' stands for running contract, client in debt the bank, but he has enough money to pay back, the bank has started the recovery proceedings;\r\nCREATED SQL: SELECT+\n\t----- bird -----\tfinancial", "132": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: What is the average loan amount by male borrowers? Male refers to gender = 'M' the average loan amount refers to DIVIDE(SUM(amount), COUNT(account_id))\r\nCREATED SQL: SELECT AVG(T.amount) FROM ( SELECT T2.amount FROM client AS T1 INNER JOIN loan AS T2 ON T1.client_id = T2.account_id WHERE T1.gender = 'M' ) AS T\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\tfinancial", "133": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: In 1996, which districts have the highest unemployment rate? List their branch location and district name. A2 refers to district names; A13 refers to unemploymant rate in 1996 the highest unemployment rate refers to MAX(A13);\r\nCREATED SQL: SELECT T1.A2, T1.district_id FROM district AS T1 INNER JOIN ( SELECT T1.district_id, T2.A13 FROM district AS T1 INNER JOIN loan AS T2 ON T1.district_id = T2.account_id WHERE T2.date = '1996-01-01' GROUP BY T1.district_id, T2.A13 ORDER BY T2.A13 DESC LIMIT +\n\t----- bird -----\tfinancial", "134": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: In the branch where the largest number of crimes were committed in 1996, how many accounts were opened? A16 stands for no. of committed crimes 1996 the year of the account was opened; the largest number of crimes refers to max(A16); in 1996 refers to strftime('%Y', date) = '1996';\r\nCREATED SQL: SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A16 = ( SELECT MAX(A16) FROM district ) AND strftime('%Y', T2.date) = '1996'\r\nEND+\n\t----- bird -----\tfinancial", "135": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: After making a credit card withdrawal, how many account/s with monthly issuance has a negative balance? Negative balance means balance < 0; Operation = 'VYBER KARTOU' stands for credit card withdraw. Frequency = 'POPLATEK MESICNE' stands for monthly issurance on card;\r\nCREATED SQL: SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN card AS T2 ON T1.account_id = T2.card_id WHERE T2.type = 'credit' AND T1.operation = 'VYBER KARTOU' AND T1.balance < 0 AND T2.frequency = 'POPLATEK MESICNE'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tfinancial", "136": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: Between 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved? Frequency = 'POPLATEK MESICNE' stands for monthly issurance; 250000 is amount; approved refers to status = 'OK'; 1/1/1995 and 12/31/1997 refers to date BETWEEN '1995-01-01' AND '1997-12-31'\r\nCREATED SQL: SELECT COUNT(T1.amount) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount >= 250000 AND T2.frequency = 'POPLATEK+\n\t----- bird -----\tfinancial", "137": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: How many accounts have running contracts in Branch location 1? Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt the bank; Status = 'F' stands for running contract, client in default; Status = 'S' stands for finished contract; Branch location 1 refers to district_id = 1;\r\nCREATED SQL: SELECT COUNT(DISTINCT T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.district_id = 1 AND T2.status = 'C'\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tfinancial", "138": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there? Male refers to gender = 'M'; A15 stands for no. of commited crimes 1995 the year when the crime was committed; the second-highest number of crimes refers to max(A15) where year(date) = 1995\r\nCREATED SQL: SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A15 = ( SELECT MAX(A15) FROM district WHERE strftime('%Y', T1.birth_date) = '1995+\n\t----- bird -----\tfinancial", "139": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: How many high-level credit cards have \"disponent\" type of disposition? High-level credit cards refers to the cards with the gold type. the gold type refers to type = 'gold'\r\nCREATED SQL: SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'disponent'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tfinancial", "140": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: How many accounts are there in the district of \"Pisek\"? A2 refers to district name the district of Pisek refers to A2 = 'Pisek';\r\nCREATED SQL: SELECT COUNT(district_id) FROM district WHERE A2 = 'Pisek'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tfinancial", "141": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: Which districts have transactions greater than USS$10,000 in 1997? the district refers to district_id; greater than USS$10,000 refers to amount > 10000; in 1997 refers to date like '1997%'\r\nCREATED SQL: SELECT T1.district_id FROM district AS T1 INNER JOIN trans AS T2 ON T1.district_id = T2.account_id WHERE T2.date LIKE '1997%' AND T2.amount > 10000\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tfinancial", "142": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: Which accounts placed orders for household payment in Pisek? k_symbol = 'SIPO' refers to household payment the account placed orders; Pisek refers to A2 = 'Pisek';\r\nCREATED SQL: SELECT T2.account_id FROM order AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.account_to = 0 AND T1.k_symbol = 'SIPO' AND T2.A2 = 'Pisek'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tfinancial", "143": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: What are the accounts that have both gold and junior credit cards? the accounts refers to account_id; gold and junior credit cards refers to type = 'gold' and type = 'junior'\r\nCREATED SQL: SELECT DISTINCT T1.account_id FROM account AS T1 INNER JOIN card AS T2 ON T1.account_id = T2.disp_id WHERE T2.type = 'gold' OR T2.type = 'junior'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\tfinancial", "144": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: How much is the average amount in credit card made by account holders in a month, in year 2021? Operation = 'VYBER KARTOU' refers to credit card withdrawn the most; average amount = DIVIDE(SUM(amount), COUNT(amount))\r\nCREATED SQL: SELECT CAST(SUM(T2.amount) AS REAL) / COUNT(T2.amount) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.operation = 'VYBER KARTOU' AND T2.date LIKE '2021%' AND T2.frequency ='monthly'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tfinancial", "145": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: Who are the account holder identification numbers whose spent per month on the credit card is less than the average, in 1998? Operation = 'VYBER KARTOU' refers to credit card withdrawal the amount spent on credit card; spent per month on the credit card refers to average(amount); spent per month on the credit card is less than the average refers to average(amount) < (SELECT AVG(amount) FROM trans WHERE type = 'VYBER KARTOU'); in 1998 refers to date LIKE '1998%';\r\nCREATED SQL: SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE+\n\t----- bird -----\tfinancial", "146": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: Who are the female account holders who own credit cards and also have loans? Female refers to gender = 'F' the account holders refers to client_id; own credit cards refers to card_id; have loans refers to loan_id;\r\nCREATED SQL: SELECT DISTINCT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id INNER JOIN loan AS T4 ON T2.account_id = T4.account_id WHERE T1.gender = 'F' AND T3.type+\n\t----- bird -----\tfinancial", "147": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: How many female clients' accounts are in the region of South Bohemia? Female refers to gender = 'F'; A3 contains the region'south Bohemia' the region of South Bohemia refers to A3 ='south Bohemia'\r\nCREATED SQL: SELECT COUNT(T1.account_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A3 ='south Bohemia'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tfinancial", "148": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: Please list the accounts whose district is Tabor that are eligible for loans. District refers to column A2; when the account type = 'OWNER', it's eligible for loans the account type = 'OWNER'\r\nCREATED SQL: SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Tabor' AND T1.type = 'OWNER'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\tfinancial", "149": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000. A11 represents the average salary; Salary and income share the similar meanings; when the account type = 'OWNER', it's eligible for loans; not eligible for loans refers to account type \u2260 'OWNER'; average income of residents refers to DIVIDE(SUM(A11), COUNT(A11))\r\nCREATED SQL: SELECT T2.type, AVG(T1.A11) FROM district AS T1 INNER JOIN disp AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 > 8000 AND T1.A11 < 9000 AND T2.type <> 'OWNER'\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tfinancial", "150": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: How many accounts in North Bohemia has made a transaction with the partner's bank being AB? A3 contains the region names; North Bohemia is a region. the partner's bank being AB refers to bank = 'AB';\r\nCREATED SQL: SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'North Bohemia' AND T2.bank = 'AB'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tfinancial", "151": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: Please list the name of the districts with accounts that made withdrawal transactions. A2 refers to district name; type = 'VYDAJ' stands for withdrawal transactions the account made;\r\nCREATED SQL: SELECT T2.A2 FROM trans AS T1 INNER JOIN district AS T2 ON T1.account_id = T2.district_id WHERE T1.type = 'VYDAJ'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tfinancial", "152": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: What is the average number of crimes committed in 1995 in regions where the number exceeds 4000 and the region has accounts that are opened starting from the year 1997? A3 refers to region names; A15 stands for the average number of crimes commited in 1995. average number of crimes commited in 1995 = divide(count(A15 where year(date) = 1995), count(account_id)); year(date) = 1995 refers to year of date = '1995'; account opened from 1997 refers to year(date) = '1997'\r\nCREATED SQL: SELECT SUM(CASE WHEN CAST(SUBSTR(A15, 1, 4) AS integer) = 1995 THEN 1 ELSE 0 END) / COUNT+\n\t----- bird -----\tfinancial", "153": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: How many 'classic' cards are eligible for loan? when the account type = 'OWNER', it's eligible for loan the account type = 'OWNER';\r\nCREATED SQL: SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN loan AS T2 ON T1.card_id = T2.account_id WHERE T1.type = 'classic' AND T2.status = 'paid'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tfinancial", "154": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: How many male clients in 'Hl.m. Praha' district? District data appears in the A2; Male means that gender = 'M' on the client table; male clients refers to client_id where gender = 'M';\r\nCREATED SQL: SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Hl.m. Praha' AND T1.gender = 'M'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\tfinancial", "155": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: How many percent of 'Gold' cards were issued prior to 1998? Percent of Gold = [ count(type = 'gold' and issued date < 1998) / count(all cards)] * 100% the type = 'gold' refers to card.type = 'gold'; issued date < 1998 refers to card.issued < '1998'; issued date < '1998' refers to card.issued < '1998'; issued date < '1998' refers to card.issued < '1998';\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T1.type = 'Gold' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1+\n\t----- bird -----\tfinancial", "156": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: Who is the owner of the account with the largest loan amount? the owner refers to client_id; largest loan amount refers to max(amount);\r\nCREATED SQL: SELECT T2.client_id FROM loan AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id ORDER BY T1.amount DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED BY: Aries Lee\r\nDATE: 2021-01-10\r\nREVISIONS: 2021-01-10: created by Aries Lee\r\n2021-01-+\n\t----- bird -----\tfinancial", "157": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: What is the number of committed crimes in 1995 in the district of the account with the id 532? A15 contains information about number of committed crimes in 1995 the district refers to district_id; account_id = 532\r\nCREATED SQL: SELECT T1.A15 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T2.account_id = 532 AND T2.date = '1995-01-01'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tfinancial", "158": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: What is the district Id of the account that placed the order with the id 33333? the district id refers to district_id; order id 33333 refers to order_id = 33333\r\nCREATED SQL: SELECT T2.district_id FROM order AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.order_id = 33333\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tfinancial", "159": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: List all the withdrawals in cash transactions that the client with the id 3356 makes. operation = 'VYBER' refers to withdrawal in cash on the account; client_id = 3356 refers to the client with the id 3356\r\nCREATED SQL: SELECT T1.operation FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T3.client_id = 3356 AND T1.operation = 'VYBER'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tfinancial", "160": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: Among the weekly issuance accounts, how many have a loan of under 200000? frequency = 'POPLATEK TYDNE' stands for weekly issuance accounts; loan of under 200000 refers to amount < 200000;\r\nCREATED SQL: SELECT COUNT(T1.loan_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount < 200000 AND T2.frequency = 'POPLATEK TYDNE'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tfinancial", "161": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: What type of credit card does the client with the id 13539 own? the client with the id 13539 refers to client_id = 13539\r\nCREATED SQL: SELECT T2.type FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T1.client_id = 13539\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\n+\n\t----- bird -----\tfinancial", "162": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: What is the region of the client with the id 3541 from? A3 refers to region the client is from\r\nCREATED SQL: SELECT T2.A3 FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.client_id = 3541\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND+\n\t----- bird -----\tfinancial", "163": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: Which district has the most accounts with loan contracts finished with no problems? status = 'A' refers to loan contracts finished with no problems the most refers to max(count(district_id))\r\nCREATED SQL: SELECT T1.district_id FROM district AS T1 INNER JOIN loan AS T2 ON T1.district_id = T2.account_id WHERE T2.status = 'A' GROUP BY T1.district_id ORDER BY COUNT(T1.district_id) DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tfinancial", "164": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: Who placed the order with the id 32423? the order id refers to order_id; placed the order refers to account_id;\r\nCREATED SQL: SELECT T1.account_id FROM order AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.order_id = 32423\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\tfinancial", "165": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: Please list all the transactions made by accounts from district 5. the transactions refers to trans_id; account from district 5 refers to district_id = 5;\r\nCREATED SQL: SELECT T1.trans_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.district_id = 5\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\tfinancial", "166": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: How many of the accounts are from Jesenik district? the account refers to account_id; Jesenik district refers to A2 = 'Jesenik'\r\nCREATED SQL: SELECT COUNT(account_id) FROM district WHERE A2 = 'Jesenik'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\tfinancial", "167": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: List all the clients' IDs whose junior credit cards were issued after 1996. After 1996 means date > = '1997-01-01';\r\nCREATED SQL: SELECT T2.client_id FROM card AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id WHERE T1.type = 'junior' AND T1.issued > '1996-01-01'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tfinancial", "168": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women? Female refers to gender = 'F'; Woman and female are closed; Average salary can be found in A11 the average salary of over 10000 refers to A11 > 10000; percentage = divide(sum(gender = 'F'), count(client_id)) * 100%\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T2.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.district_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T+\n\t----- bird -----\tfinancial", "169": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997? Growth rate = (sum of amount_1997 - sum of amount_1996) / (sum of amount_1996) * 100%; Male refers to gender = 'M' the total amount of loans refers to sum(amount); account refers to account_id; 1996 refers to date = '1996'; 1997 refers to date = '1997';\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T1.date = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN T1.date = '1996' THEN T1.amount ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T+\n\t----- bird -----\tfinancial", "170": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: How many credit card withdrawals were recorded after 1995? Operation = 'VYBER KARTOU' means credit card withdrawals the most recent date of trans is 1995;\r\nCREATED SQL: SELECT COUNT(*) FROM trans WHERE operation = 'VYBER KARTOU' AND date > '1995'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tfinancial", "171": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: What was the difference in the number of crimes committed in East and North Bohemia in 1996? Difference in no. of committed crimes between 2 regions = Total no. of committed crimes in 1996 in North Bohemia - Total no. of committed crimes in 1996 in East Bohemia. A3 refers to region. Data about no. of committed crimes 1996 appears in A16\r\nCREATED SQL: SELECT SUM(CASE WHEN A3 = 'North Bohemia' THEN A16 ELSE 0 END) - SUM(CASE WHEN A3 = 'East Bohemia' THEN A16 ELSE 0 END) FROM district WHERE strftime('%Y', date) = '1996'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tfinancial", "172": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: How many owner and disponent dispositions are there from account number 1 to account number 10? the disponent dispositions refer to disp_id; account number refers to account_id; account_id BETWEEN 1 AND 10\r\nCREATED SQL: SELECT COUNT(T1.disp_id) FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.account_id BETWEEN 1 AND 10\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tfinancial", "173": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total? k_symbol refers to the purpose of payments the account holder made; debit refers to type = 'debit'; account_id = 3;\r\nCREATED SQL: SELECT COUNT(T1.frequency), T2.k_symbol FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.type = 'debit' AND T2.amount = 3539\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tfinancial", "174": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: What year was account owner number 130 born? the year was born refers to SUBSTR(birth_date, 1, 4)\r\nCREATED SQL: SELECT SUBSTR(T2.birth_date, 1, 4) FROM account AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.account_id = 130\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\tfinancial", "175": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: How many accounts have an owner disposition and request for a statement to be generated upon a transaction? Frequency = 'POPLATEK PO OBRATU' stands for issuance after transaction on account; request for a statement to be generated upon a transaction refers to type ='statement';\r\nCREATED SQL: SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.type ='statement'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\tfinancial", "176": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: What is the amount of debt that client number 992 has, and how is this client doing with payments? the amount of debt refers to amount; client number 992 refers to client_id = 992; how is this client doing with payments refers to payments\r\nCREATED SQL: SELECT T1.amount, T1.payments FROM loan AS T1 INNER JOIN client AS T2 ON T1.account_id = T2.client_id WHERE T2.client_id = 992\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tfinancial", "177": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: What is the sum that client number 4's account has following transaction 851? Who owns this account, a man or a woman? the sum refers to sum(amount); account refers to account_id; client number 4 refers to client_id = 4; transaction 851 refers to trans_id = 851; man refers to gender = 'M'; woman refers to gender = 'F'\r\nCREATED SQL: SELECT SUM(T.amount), T2.gender FROM trans AS T INNER JOIN client AS T2 ON T.account_id = T2.client_id WHERE T.trans_id = 851 AND T2.client_id = 4\r\nEND+\n\t----- bird -----\tfinancial", "178": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: Which kind of credit card does client number 9 possess? the credit card refers to card_id; client number 9 refers to client_id = 9\r\nCREATED SQL: SELECT T2.type FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T1.client_id = 9\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tfinancial", "179": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: How much, in total, did client number 617 pay for all of the transactions in 1998? the client number refers to client_id; in 1998 refers to date LIKE '1998%';\r\nCREATED SQL: SELECT SUM(T2.amount) FROM client AS T1 INNER JOIN trans AS T2 ON T1.client_id = T2.account_id WHERE T1.client_id = 617 AND T2.date LIKE '1998%'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tfinancial", "180": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: Please provide a list of clients who were born between 1983 and 1987 and whose account branch is in East Bohemia, along with their IDs. the account branch is in East Bohemia refers to district_id = 2; born between 1983 and 1987 refers to birth_date BETWEEN '1983-01-01' AND '1987-12-31';\r\nCREATED SQL: SELECT T1.client_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.birth_date BETWEEN '1983-01-01' AND '1987-12-+\n\t----- bird -----\tfinancial", "181": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: Please provide the IDs of the 3 female clients with the largest loans. Female refers to gender = 'F' the largest loan refers to max(amount);\r\nCREATED SQL: SELECT DISTINCT T1.client_id FROM client AS T1 INNER JOIN loan AS T2 ON T1.client_id = T2.account_id WHERE T1.gender = 'F' ORDER BY T2.amount DESC LIMIT 3\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\tfinancial", "182": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: How many male customers who were born between 1974 and 1976 have made a payment on their home in excess of $4000? Man and male refers to gender = 'M'; 'SIPO' stands for household payment; amount > 4000; born between 1974 and 1976 refers to birth_date BETWEEN '1974-01-01' AND '1976-12-31'\r\nCREATED SQL: SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN loan AS T2 ON T1.client_id = T2.account_id WHERE T1.gender = 'M' AND T2.status = 'paid' AND T2.amount > 4000 AND T1.birth_date BETWEEN+\n\t----- bird -----\tfinancial", "183": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: How many accounts in Beroun were opened after 1996? the account refers to account_id; opened after 1996 refers to date > '1996';\r\nCREATED SQL: SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Beroun' AND T1.date > '1996'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\tfinancial", "184": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: How many female customers have a junior credit card? Female refers to gender = 'F' the junior credit card refers to type = 'junior'\r\nCREATED SQL: SELECT COUNT(T1.card_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.gender = 'F' AND T3.type = 'junior'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tfinancial", "185": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: What proportion of customers who have accounts at the Prague branch are female? Female refers to gender = 'F'; Percentage of female clients in Prague branch = count[female clients with accounts in Prague branch / count(clients with accounts in Prague branch)] * 100%; A3 may contain information about Prague branch;\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.gender) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\tfinancial", "186": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: What percentage of male clients request for weekly statements to be issued? Percentage of male clients = [count(male clients who requested weekly statements / count(clients who requested weekly statements)] * 100%; Male means gender = 'M'; 'POPLATEK TYDNE' stands for weekly issuance\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN account AS T2 ON T1.client_id = T2.account_id WHERE T2.frequency = 'POPLATEK TYDNE'\r\nEND OF QUESTION\r\nCREATED BY: Ngoc Thien Tran\r\nDATE: 2020-07-27\r\nRE+\n\t----- bird -----\tfinancial", "187": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: How many clients who choose statement of weekly issuance are User? Frequency = 'POPLATEK TYDNE' refers to weekly issuance on statement; User refers to gender = 'User';\r\nCREATED SQL: SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T3.frequency = 'POPLATEK TYDNE' AND T1.gender = 'User'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\tfinancial", "188": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: Among the accounts who have loan validity more than 24 months, list out the accounts that have the lowest approved amount and have account opening date before 1997. the lowest approved amount refers to MIN(amount); loan validity more than 24 months refers to duration > 24; account opening date before 1997 refers to date < '1997-01-01';\r\nCREATED SQL: SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration > 24 AND T2.date < '1997-01-01' ORDER BY T1.amount LIMIT 1+\n\t----- bird -----\tfinancial", "189": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: Name the account numbers of female clients who are oldest and have lowest average salary? Female refers to 'F' in the gender; A11 contains information about average salary the client has; oldest refers to max(birth_date); lowest average salary refers to min(A11)\r\nCREATED SQL: SELECT DISTINCT T2.account_id FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T1.birth_date = ( SELECT MAX(birth_date) FROM client ) AND T2.A11 = ( SELECT MIN(A11) FROM district )\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tfinancial", "190": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: How many clients who were born in 1920 stay in east Bohemia? East Bohemia appears in the column A3, which refers to the region. the region = 'East Bohemia';\r\nCREATED SQL: SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.`A3` = 'East Bohemia' AND T1.birth_date = '1920-01-01'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tfinancial", "191": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: How many loan accounts are for pre-payment of duration of 24 months with weekly issuance of statement. Frequency = 'POPLATEK TYDNE' referes to weekly statement on the account; duration = 24 months refers to duration = 24;\r\nCREATED SQL: SELECT COUNT(T1.loan_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK TYDNE' AND T1.duration = 24\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tfinancial", "192": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: What is the average amount of loan which are still on running contract with statement issuance after each transaction? status = 'C' stands for running contract, OK so far; status = 'D' stands for running contract, client in debt. 'POPLATEK PO OBRATU' stands for issuance after transaction; 'POPLATEK PO OBRATU' = type\r\nCREATED SQL: SELECT AVG(T2.amount) FROM trans AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T1.type = 'POPLATEK PO OBRATU' AND T2.status = 'C'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT AVG(T2.amount) FROM trans AS T1 INNER JOIN loan AS T2 ON T1.account_id+\n\t----- bird -----\tfinancial", "193": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: List all ID and district for clients that can only have the right to issue permanent orders or apply for loans. Only the owner accounts have the right to issue permanent orders or apply for loans the ID refers to client_id; ID refers to client_id;\r\nCREATED SQL: SELECT T1.client_id, T1.district_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'F' AND T2.type = 'Permanent' OR T3.status = 'Active'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\tfinancial", "194": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE account (\r\naccount_id integer,\r\ndistrict_id integer,\r\nfrequency text,\r\ndate date,\r\nPRIMARY KEY (account_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE card (\r\ncard_id integer,\r\ndisp_id integer,\r\ntype text,\r\nissued date,\r\nPRIMARY KEY (card_id),\r\nFOREIGN KEY (disp_id) REFERENCES disp(disp_id),\r\n);\r\nCREATE TABLE client (\r\nclient_id integer,\r\ngender text,\r\nbirth_date date,\r\ndistrict_id integer,\r\nPRIMARY KEY (client_id),\r\nFOREIGN KEY (district_id) REFERENCES district(district_id),\r\n);\r\nCREATE TABLE disp (\r\ndisp_id integer,\r\nclient_id integer,\r\naccount_id integer,\r\ntype text,\r\nPRIMARY KEY (disp_id),\r\nFOREIGN KEY (client_id) REFERENCES client(client_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE district (\r\ndistrict_id integer,\r\nA2 text,\r\nA3 text,\r\nA4 text,\r\nA5 text,\r\nA6 text,\r\nA7 text,\r\nA8 integer,\r\nA9 integer,\r\nA10 real,\r\nA11 integer,\r\nA12 real,\r\nA13 real,\r\nA14 integer,\r\nA15 integer,\r\nA16 integer,\r\nPRIMARY KEY (district_id),\r\n);\r\nCREATE TABLE loan (\r\nloan_id integer,\r\naccount_id integer,\r\ndate date,\r\namount integer,\r\nduration integer,\r\npayments real,\r\nstatus text,\r\nPRIMARY KEY (loan_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE order (\r\norder_id integer,\r\naccount_id integer,\r\nbank_to text,\r\naccount_to integer,\r\namount real,\r\nk_symbol text,\r\nPRIMARY KEY (order_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\nCREATE TABLE trans (\r\ntrans_id integer,\r\naccount_id integer,\r\ndate date,\r\ntype text,\r\noperation text,\r\namount integer,\r\nbalance integer,\r\nk_symbol text,\r\nbank text,\r\naccount integer,\r\nPRIMARY KEY (trans_id),\r\nFOREIGN KEY (account_id) REFERENCES account(account_id),\r\n);\r\n---------------------\r\nQUESTION: Provide the IDs and age of the client with high level credit card, which is eligible for loans. When type is gold, the credit card is high-level the credit card; when status = 'paid', the account is eligible for loans;\r\nCREATED SQL: SELECT T1.client_id, CAST(JULIANDAY(NOW()) - JULIANDAY(T1.birth_date) AS INT) AS age FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T2.type = 'gold' AND T3.status+\n\t----- bird -----\tfinancial", "195": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What is the most common bond type? most common bond type refers MAX(COUNT(bond_type)) the most common bond type = MAX(COUNT(bond_type))\r\nCREATED SQL: SELECT T1.bond_type FROM bond AS T1 GROUP BY T1.bond_type ORDER BY COUNT(T1.bond_type) DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\ttoxicology", "196": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: In the non-carcinogenic molecules, how many contain chlorine atoms? non-carcinogenic molecules refers to label = '-'; chlorine atoms refers to element = 'cl' on atom_id\r\nCREATED SQL: SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.element = 'Cl'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.element+\n\t----- bird -----\ttoxicology", "197": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Calculate the average number of oxygen atoms in single-bonded molecules. single-bonded molecules refers to bond_type = '-' ; average number of oxygen atom = AVG(element = 'o') the molecule has\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T1.element = 'O' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\ttoxicology", "198": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: On average how many carcinogenic molecules are single bonded? carcinogenic molecules refers to label = '+'; single-bonded refers to bond_type = '-'; average = DIVIDE(SUM(bond_type = '-'), COUNT(atom_id)) on molecule_id\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T1.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) / COUNT(DISTINCT T1.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nEND OF CREATION OF SQL\r\nCREATED SQL\r\nEND OF CRE+\n\t----- bird -----\ttoxicology", "199": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: In the molecule containing sodium atoms, how many are non-carcinogenic? non-carcinogenic refers to label = '-'; sodium atoms refers to element = 'na' on molecule\r\nCREATED SQL: SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.element = 'Na'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\ttoxicology", "200": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Find the triple-bonded molecules which are carcinogenic. triple-bonded molecules refers to bond_type = '#'; carcinogenic refers to label = '+' the label = '+'\r\nCREATED SQL: SELECT T1.label FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND T1.label = '+'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\ttoxicology", "201": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What is the percentage of carbon in double-bond molecules? carbon refers to element = 'c'; double-bond molecules refers to bond_type ='= '; percentage = DIVIDE(SUM(element = 'c'), COUNT(atom_id)) the multiply by 100%\r\nCREATED SQL: SELECT CAST(COUNT(CASE WHEN element = 'C' THEN molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond_type = '='\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\ttoxicology", "202": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: How many triple type bonds are there? triple type bonds refers to bond_type = '#' the number of triple type bonds refers to count(bond_id where bond_type = '#')\r\nCREATED SQL: SELECT COUNT(bond_id) FROM bond WHERE bond_type = '#'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\ttoxicology", "203": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: In how many atoms is there no bromine? atoms with no bromine refers to element! = 'br' the number of atoms is count(atom_id)\r\nCREATED SQL: SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element!= 'Br'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\ttoxicology", "204": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Of the first 100 molecules in number order, how many are carcinogenic? first 100 molecules in number order refers to molecule_id between 'TR000' and 'TR099'; label = '+' means molecules are carcinogenic on the contrary\r\nCREATED SQL: SELECT COUNT(*) FROM molecule WHERE label = '+' AND molecule_id BETWEEN 'TR000' AND 'TR099'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\ttoxicology", "205": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Identify by their ID the molecules in which there is silicon. silicon refers to element ='si'; on the molecule\r\nCREATED SQL: SELECT molecule_id FROM atom WHERE element = 'Si'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\ttoxicology", "206": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What elements are in the TR004_8_9 bond atoms? TR004_8_9 bond atoms refers to bond_id = 'TR004_8_9'; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element ='s' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element ='sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium\r\nCREATED SQL: SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T2.bond_id = 'TR004_8_9'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN molecule+\n\t----- bird -----\ttoxicology", "207": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What elements are in a double type bond? double type bond refers to bond_type ='= '; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element ='s' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element ='sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium the element of the atom is the element of atom_id\r\nCREATED SQL: SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type ='= '\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2+\n\t----- bird -----\ttoxicology", "208": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Which type of label is the most numerous in atoms with hydrogen? with hydrogen refers to element = 'h'; label most numerous in atoms refers to MAX(COUNT(label)); label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic the label = '-' is the most numerous\r\nCREATED SQL: SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'H' GROUP BY T2.label ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\ttoxicology", "209": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Tellurium is in what type of bond? type of bond refers to bond_type; Tellurium refers to element = 'te' on the atom table\r\nCREATED SQL: SELECT T1.bond_type FROM bond AS T1 INNER JOIN atom AS T2 ON T2.atom_id = T1.bond_id WHERE T2.element = 'Te'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\ttoxicology", "210": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What atoms are connected in single type bonds? single type bond refers to bond_type = '-'; the atoms are connected refers to atom_id\r\nCREATED SQL: SELECT T1.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '-'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nEND OF CREATION OF SQL\r\nCREATED BY: Cherie Tan\r\nCREATED ON: 2020-04-23\r\nCREATED AT: 22:11\r\nCREATED+\n\t----- bird -----\ttoxicology", "211": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Indicate which atoms are connected in non-carcinogenic type molecules. label = '-' means molecules are non-carcinogenic the type of molecule refers to bond_type\r\nCREATED SQL: SELECT DISTINCT T1.atom_id FROM connected AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = 'non-carcinogenic' )\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\ttoxicology", "212": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Which element is the least numerous in non-carcinogenic molecules? label = '-' means molecules are non-carcinogenic; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element ='s' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element ='sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium; element = 'ba' means Barium; element = 'fe' means Iron; element = 'cu' means Copper; element ='mn' means Manganese; element = 'ni' means Nickel; element = 'co' means Cobalt; element = 'zn' means Zinc; element = 'ag' means Silver; element = 'cd' means Cadmium; element = 'cr' means Chromium; element ='mo' means Molybdenum; element = '+\n\t----- bird -----\ttoxicology", "213": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What type of bond is there between the atoms TR004_8 and TR004_20? type of bond refers to bond_type; between the atoms TR004_8 and TR004_20 refers to atom_id between atom_id = 'TR004_8' and atom_id = 'TR004_20'; the atoms refers to molecule_id\r\nCREATED SQL: SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.b+\n\t----- bird -----\ttoxicology", "214": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What type of label is not on molecules with atoms with tin? tin refers to element! ='sn'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic on human; label = '?' means molecules are unknown carcinogenic on human\r\nCREATED SQL: SELECT DISTINCT T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element!= 'Sn'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element!= 'Sn'\r\nEND OF+\n\t----- bird -----\ttoxicology", "215": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: How many atoms with iodine and sulfur type elements are there in single bond molecules? with iodine element refer to element = 'i'; with sulfur element refers to element ='s'; single type bond refers to bond_type = '-'; the number of atoms refers to COUNT(atom_id)\r\nCREATED SQL: SELECT COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'i' OR T1.element ='s' AND T2.bond_type = '-'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\ttoxicology", "216": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Identify all connected atoms with a triple bond. triple bond refers to bond_type = '#'; the connected atoms refers to atom_id, atom_id2\r\nCREATED SQL: SELECT T1.atom_id, T2.atom_id FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id2 = T2.atom_id WHERE T1.bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = '#' )\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\ttoxicology", "217": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Identify all the atoms that are connected to the atoms of the TR181 molecule. TR181 molecule refers to molecule_id = 'TR181' the atoms refers to atom_id\r\nCREATED SQL: SELECT T1.atom_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.atom_id2 = 'TR181'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\ttoxicology", "218": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What percentage of carcinogenic-type molecules does not contain fluorine? label = '+' mean molecules are carcinogenic; contain fluorine refers to element = 'f'; percentage = DIVIDE(SUM(element = 'f'), COUNT(molecule_id)) as percent where label = '+' the percentage of molecules that are carcinogenic and do not contain fluorine = SUBTRACT(1, DIVIDE(SUM(element = 'f'), COUNT(molecule_id)) as percent where label = '+');\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T2.element = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T+\n\t----- bird -----\ttoxicology", "219": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What is the percentage of carcinogenic molecules in triple type bonds? label = '+' mean molecules are carcinogenic; triple bond refers to bond_type = '#'; percentage = DIVIDE(SUM(bond_type = '#'), COUNT(bond_id)) as percent where label = '+' the percentage of carcinogenic molecules in triple type bonds = DIVIDE(SUM(bond_type = '#'), COUNT(bond_id)) as percent where label = '+'\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T2.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.bond_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label+\n\t----- bird -----\ttoxicology", "220": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Please list top three elements of the toxicology of the molecule TR000 in alphabetical order. TR000 is the molecule id; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element ='s' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element ='sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium; element = 'k' means Potassium; element = 'fe' means Iron; element ='mn' means Manganese; element = 'cu' means Copper; element = 'zn' means Zinc; element = 'ag' means Silver; element = 'cd' means Cadmium; element = 'cr' means Chromium; element = 'ni' means Nickel; element = 'co' means Cobalt; element = 'as' means Arsenic; element ='se'+\n\t----- bird -----\ttoxicology", "221": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What are the atoms that are bonded in the molecule TR001 with the bond ID of TR001_2_6? TR001 is the molecule id; TR001_2_6 is the bond id the molecule is bonded in\r\nCREATED SQL: SELECT T1.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = 'TR001' AND T2.bond_id = 'TR001_2_6'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\ttoxicology", "222": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What is the difference between the number of molecules that are carcinogenic and those that are not? label = '+' means molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; difference = SUBTRACT(SUM(label = '+'), SUM(label = '-')) the number of molecules that are carcinogenic\r\nCREATED SQL: SELECT SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) - SUM(CASE WHEN label = '-' THEN 1 ELSE 0 END) FROM molecule\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nCREATED SQL: SELECT SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) - SUM(CASE WHEN label = '-' THEN 1 ELSE 0 END) FROM molecule\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\ttoxicology", "223": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What are the atom IDs of the bond TR_000_2_5? TR_000_2_5 is the bond id the question refers to\r\nCREATED SQL: SELECT T2.atom_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_id = 'TR_000_2_5'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\ttoxicology", "224": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What are the bond IDs that have the same atom ID 2 of TR000_2? TR000_2 is the atom id; atom ID 2 refers to atom_id2 the same as 'TR000_2'; bond ID refers to bond_id\r\nCREATED SQL: SELECT T2.bond_id FROM molecule AS T1 INNER JOIN connected AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR000_2'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\ttoxicology", "225": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Please list top five molecules that have double bonds in alphabetical order. double bond refers to bond_type ='= '; the top 5 molecules refer to label order by DESC LIMIT 5\r\nCREATED SQL: SELECT label FROM molecule WHERE molecule_id IN ( SELECT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' ORDER BY T2.label LIMIT 5 )\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\ttoxicology", "226": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What is the percentage of double bonds in the molecule TR008? double bond refers to bond_type ='= '; TR008 is the molecule id; percentage = DIVIDE(SUM(bond_type ='= '), COUNT(bond_id)) as percent where molecule_id = 'TR008' the percentage of double bonds refers to DIVIDE(SUM(bond_type ='= '), COUNT(bond_id)) as percent where molecule_id = 'TR008'\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T1.bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.bond_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label+\n\t----- bird -----\ttoxicology", "227": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What is the percentage of molecules that are carcinogenic? label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+'), COUNT(molecule_id)) as percent the percent of molecules that are carcinogenic\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(molecule_id) FROM molecule\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\ttoxicology", "228": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer in percentage. hydrogen refers to element = 'h'; TR206 is the molecule id; percentage = DIVIDE(SUM(element = 'h'), COUNT(atom_id)) as percent where molecule_id = 'TR206' on atom_id\r\nCREATED SQL: SELECT CAST(COUNT(CASE WHEN element = 'H' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(element) FROM atom WHERE molecule_id = 'TR206'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\ttoxicology", "229": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What is the type of bond that molecule TR000 has when involved in any bonds? type of bond refers to bond_type; TR000 is the molecule id the molecule refers to\r\nCREATED SQL: SELECT T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR000'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\ttoxicology", "230": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What are the elements of the toxicology and label of molecule TR060? TR060 is the molecule id; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element ='s' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element ='sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium; element = 'cu' means Copper; element = 'ag' means Silver; element = 'au' means Gold; element = 'fe' means Iron; element ='mn' means Manganese; element = 'ni' means Nickel; element = 'co' means Cobalt; element = 'cr' means Chromium; element ='mo' means Molybdenum; element = 'vd' means Vanadium; element = 'zr' means Zirconium; element+\n\t----- bird -----\ttoxicology", "231": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Which bond type accounted for the majority of the bonds found in molecule TR018 and state whether or not this molecule is carcinogenic? TR018 is the molecule id; majority of the bond found refers to MAX(COUNT(bond_type)); label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic on human\r\nCREATED SQL: SELECT T1.bond_type, CASE WHEN T2.label = '+' THEN 'carcinogenic' ELSE 'non-carcinogenic' END FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR018' GROUP BY T1.bond_type\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.bond_type, CASE WHEN T2.label = '+'+\n\t----- bird -----\ttoxicology", "232": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order. label = '-' means molecules are not carcinogenic; single type bond refers to bond_type = '-' on the molecule;\r\nCREATED SQL: SELECT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-' GROUP BY T2.molecule_id ORDER BY T2.label ASC LIMIT 3\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\ttoxicology", "233": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Please list top two bonds that happened with the molecule TR006 in alphabetical order. TR006 is the molecule id on the label; top two bonds refer to max(count(bond_id))\r\nCREATED SQL: SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = 'TR006' GROUP BY T1.bond_id ORDER BY COUNT(T1.bond_id) DESC LIMIT 2\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\ttoxicology", "234": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: How many bonds which involved atom 12 does molecule TR009 have? TR009 is the molecule id; molecule_id = 'TR009' means the bond_id LIKE 'TR009_%'; involved atom 12 refers to atom_id = 'TR009_12' or atom_id2 = 'TR009_12' or atom_id = 'TR009_12'\r\nCREATED SQL: SELECT COUNT(DISTINCT bond_id) FROM connected WHERE atom_id = 'TR009_12' OR atom_id2 = 'TR009_12' OR atom_id = 'TR009_12'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\ttoxicology", "235": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: How many molecules are carcinogenic and have the bromine element? label = '+' mean molecules are carcinogenic; have bromine element refers to element = 'br' on molecule_id\r\nCREATED SQL: SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'br' AND T1.label = '+'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\ttoxicology", "236": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What are the bond type and the atoms of the bond ID of TR001_6_9? double bond refers to bond_type ='= '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#'; atoms refer to atom_id or atom_id2 on connected table\r\nCREATED SQL: SELECT T2.bond_type, T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_id = 'TR001_6_9'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\ttoxicology", "237": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Which molecule does the atom TR001_10 belong to? Please state whether this molecule is carcinogenic or not. TR001_10 is the atom id; label = '+' mean molecules are carcinogenic the label = '-' mean molecules are not carcinogenic\r\nCREATED SQL: SELECT T1.label, CASE WHEN T2.label = '+' THEN 'Carcinogenic' ELSE 'Not carcinogenic' END FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.atom_id = 'TR001_10'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.label, CASE WHEN T2.label = '+' THEN 'Carc+\n\t----- bird -----\ttoxicology", "238": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: How many molecules have a triple bond type? triple bond refers to bond_type = '#'; the number of molecules refers to COUNT(bond_id)\r\nCREATED SQL: SELECT COUNT(DISTINCT T1.molecule_id) FROM bond AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '#'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\ttoxicology", "239": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: How many connections does the atom 19 have? connections refers to bond_id; atom 19 refers to atom_id like 'TR%_19'; on atom_id = atom_id2\r\nCREATED SQL: SELECT COUNT(DISTINCT T1.bond_id) FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T2.atom_id LIKE 'TR%_19'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\ttoxicology", "240": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: List all the elements of the toxicology of the molecule \"TR004\". TR004 is the molecule id; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element ='s' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element ='sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium the toxicology of the molecule refers to label = 'toxicology'\r\nCREATED SQL: SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = 'toxicology' AND T1.molecule_id = 'TR004'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2+\n\t----- bird -----\ttoxicology", "241": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: How many of the molecules are not carcinogenic? label = '-' means molecules are non-carcinogenic the other labels are carcinogenic\r\nCREATED SQL: SELECT COUNT(*) FROM molecule WHERE label <> '-'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\ttoxicology", "242": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Among all the atoms from 21 to 25, list all the molecules that are carcinogenic. atoms from 21 to 25 refers to SUBSTRING(atom_id, 7, 2) between 21 and 25; label = '+' mean molecules are carcinogenic on humans\r\nCREATED SQL: SELECT T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.atom_id LIKE 'ATM_%' AND SUBSTR(T2.atom_id, 7, 2) BETWEEN 21 AND 25 AND T1.label = '+'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.label FROM molecule AS T1 INNER JOIN atom+\n\t----- bird -----\ttoxicology", "243": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What are the bonds that have phosphorus and nitrogen as their atom elements? have phosphorus as atom elements refers to element = 'p'; have nitrogen as atom elements refers to element = 'n' the nitrogen atoms are connected by a bond refers to bond_id\r\nCREATED SQL: SELECT DISTINCT T1.bond_id FROM bond AS T1 INNER JOIN atom AS T2 ON T2.atom_id = T1.bond_id WHERE T2.element = 'n' OR T2.element = 'p'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\ttoxicology", "244": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Is the molecule with the most double bonds carcinogenic? double bond refers to bond_type ='= '; label = '+' mean molecules are carcinogenic the most double bonds refers to max(count(bond_id where bond_type ='= '))\r\nCREATED SQL: SELECT T1.label FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '=' GROUP BY T1.label ORDER BY COUNT(T2.bond_id) DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\ttoxicology", "245": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What is the average number of bonds the atoms with the element iodine have? atoms with the element iodine refers to element = 'i'; average = DIVIDE(COUND(bond_id), COUNT(atom_id)) where element = 'i' the number of bonds refers to COUNT(bond_id)\r\nCREATED SQL: SELECT CAST(COUNT(DISTINCT T2.bond_id) AS REAL) / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'i'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\ttoxicology", "246": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: List the bond type and the bond ID of the atom 45. bond ID of atom 45 refers to SUBSTR(atom_id, 7, 2) + 0 = 45; double bond refers to bond_type ='= '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#'; the atom ID refers to atom_id\r\nCREATED SQL: SELECT T2.bond_type, T2.bond_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.molecule_id = T3.atom_id WHERE T3.atom_id = 'AT45'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T2.bond_type, T2.bond_id FROM molecule AS T1 INNER+\n\t----- bird -----\ttoxicology", "247": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: List all the elements of atoms that can not bond with any other atoms. element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element ='s' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element ='sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium; atoms cannot bond with other atoms means atom_id NOT in connected table; atoms can bond with other atoms means atom_id in connected table\r\nCREATED SQL: SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id GROUP BY T1.element HAVING COUNT(T2.atom_id) = 0\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id GROUP BY T1.element HAVING COUNT+\n\t----- bird -----\ttoxicology", "248": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What are the atoms of the triple bond with the molecule \"TR447\"? TR447 is the molecule id; triple bond refers to bond_type = '#'; the atoms of the triple bond refers to atom_id\r\nCREATED SQL: SELECT T1.atom_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T1.molecule_id = 'TR447'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\ttoxicology", "249": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What are the elements of the atoms of TR144_8_19? TR144_8_19 is the bond id; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element ='s' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element ='sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium; element ='mg' means Magnesium; element = 'al' means Aluminium; element = 'fe' means Iron; element ='mn' means Manganese; element = 'ni' means Nickel; element = 'cu' means Copper; element = 'zn' means Zinc\r\nCREATED SQL: SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id+\n\t----- bird -----\ttoxicology", "250": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Of all the carcinogenic molecules, which one has the most double bonds? label = '+' mean molecules are carcinogenic; double bond refers to bond_type ='= '; the most double bonds refers to MAX(COUNT(bond_id))\r\nCREATED SQL: SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' GROUP BY T2.label ORDER BY COUNT(T1.bond_id) DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\ttoxicology", "251": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What is the least common element of all carcinogenic molecules? label = '+' mean molecules are carcinogenic on human; the least common element refers to MIN(COUNT(element))\r\nCREATED SQL: SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' GROUP BY T1.element ORDER BY COUNT(T1.element) ASC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\ttoxicology", "252": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What are the atoms that can bond with the atom that has the element lead? atom that has the element lead refers to atom_id where element = 'pb' the element 'pb' stands for 'pb'\r\nCREATED SQL: SELECT T2.atom_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'pb'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\ttoxicology", "253": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: List the elements of all the triple bonds. triple bond refers to bond_type = '#'; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element ='s' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element ='sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium the triple bonds refer to bond_type = '#'\r\nCREATED SQL: SELECT T2.element FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T2.element FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\ttoxicology", "254": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What percentage of bonds have the most common combination of atoms' elements? DIVIDE(COUNT(bond_id), COUNT(atom_id where MAX(COUNT(atom_id)) )) on element where element = 'C' and element = 'C';\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T1.element = 'C' AND T2.element = 'C' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\ttoxicology", "255": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What proportion of single bonds are carcinogenic? single bond refers to bond_type = '-'; label = '+' mean molecules are carcinogenic; proportion = DIVIDE(SUM(label = '+'), COUNT(bond_id)) where bond_type = '-' the result should be divided by 100%\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.label) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-'\r\nEND OF QUESTION\r\nCREATED SQL\r\nCREATED BY: Kuan-Ju Chen\r\nCREATED ON: +\n\t----- bird -----\ttoxicology", "256": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Calculate the total atoms consisting of the element carbon and hydrogen. consisting of element carbon and hydrogen refers to element in('c', 'h') on atom;\r\nCREATED SQL: SELECT COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element IN ('C', 'H')\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\ttoxicology", "257": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: List down atom id2 for atoms with element sulfur. element sulfur refers to element ='s' the element\r\nCREATED SQL: SELECT T1.atom_id2 FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T2.element = 'S'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\ttoxicology", "258": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What are the bond type for atoms with element Tin? element Tin refers to element ='sn'; double bond refers to bond_type ='= '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#' on atoms refers to atom_id\r\nCREATED SQL: SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T3.element = 'Sn'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond+\n\t----- bird -----\ttoxicology", "259": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: How many elements are there for single bond molecules? single bond refers to bond_type = '-'; the number of elements refers to COUNT(DISTINCT element)\r\nCREATED SQL: SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\ttoxicology", "260": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Calculate the total atoms with triple-bond molecules containing the element phosphorus or bromine. triple bond refers to bond_type = '#'; phosphorus refers to element = 'p'; bromine refers to element = 'br' the total atoms refers to COUNT(atom_id)\r\nCREATED SQL: SELECT COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'p' OR T1.element = 'br' AND T3.bond_type = '#'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\ttoxicology", "261": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Write down bond id for molecules that are carcinogenic. label = '+' mean molecules are carcinogenic the molecules are carcinogenic refers to label = '+'\r\nCREATED SQL: SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\ttoxicology", "262": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Among the single bond molecule id, which molecules are not carcinogenic? label = '-' means molecules are non-carcinogenic; single bond refers to bond_type = '-'; the molecules are carcinogenic refers to label = '+'\r\nCREATED SQL: SELECT molecule_id FROM molecule WHERE label = '+' AND bond_type = '-'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\ttoxicology", "263": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What is the composition of element chlorine in percentage among the single bond molecules? element chlorine refers to element = 'cl'; single bond refers to bond_type = '-'; percentage = DIVIDE(SUM(element = 'cl'), COUNT(atom_id)) as percent where bond_type = '-'\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN element = 'Cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(element) FROM atom WHERE bond_type = '-'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\ttoxicology", "264": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What are the labels for TR000, TR001 and TR002? TR000, TR001 and TR002 are molecule id; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic on the human body\r\nCREATED SQL: SELECT label FROM molecule WHERE molecule_id IN ( 'TR000', 'TR001', 'TR002' )\r\nEND OF QUESTION\r\nCREATED SQL: SELECT label FROM molecule WHERE molecule_id IN ( 'TR000', 'TR001', 'TR002' )\r\nEND OF QUESTION\r\nCREATED SQL: SELECT label FROM molecule WHERE molecule_id IN ( 'TR000', 'TR001', 'TR002' )\r\nEND OF QUESTION+\n\t----- bird -----\ttoxicology", "265": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: List down the molecule id for non carcinogenic molecules. label = '-' means molecules are non-carcinogenic the other labels are carcinogenic\r\nCREATED SQL: SELECT molecule_id FROM molecule WHERE label <> '-'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\ttoxicology", "266": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Calculate the total carcinogenic molecules for molecule id from TR000 to TR030. label = '+' mean molecules are carcinogenic the total carcinogenic molecules = SUM(label = '+')\r\nCREATED SQL: SELECT COUNT(label) FROM molecule WHERE label = '+' AND molecule_id BETWEEN 'TR000' AND 'TR030'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\ttoxicology", "267": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: List down the bond type for molecules from molecule id TR000 to TR050. double bond refers to bond_type ='= '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#'; on the other hand, no bond refers to bond_type = 'None'\r\nCREATED SQL: SELECT T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id BETWEEN 'TR000' AND 'TR050'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule+\n\t----- bird -----\ttoxicology", "268": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What are the elements for bond id TR001_10_11? element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element ='s' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element ='sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium; element = 'fe' means Iron; element ='mn' means Manganese; element = 'co' means Cobalt; element = 'cu' means Copper; element = 'zn' means Zinc; element = 'ag' means Silver; element = 'cd' means Cadmium; element = 'ni' means Nickel; element = 'cr' means Chromium; element ='mo' means Molybdenum; element = 'ru' means Ruthenium; element =+\n\t----- bird -----\ttoxicology", "269": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: How many bond id have element iodine? iodine refers to element = 'i' on atom table\r\nCREATED SQL: SELECT COUNT(DISTINCT T2.bond_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'i'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(DISTINCT T2.bond_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'i'\r\n+\n\t----- bird -----\ttoxicology", "270": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Among the molecules with element Calcium, are they mostly carcinogenic or non carcinogenic? calcium refers to element = 'ca'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; MAX(label) on molecules with element = 'ca'\r\nCREATED SQL: SELECT CASE WHEN MAX(label) = '+' THEN 'carcinogenic' ELSE 'non carcinogenic' END FROM molecule WHERE element = 'ca'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\ttoxicology", "271": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Does bond id TR001_1_8 have both element of chlorine and carbon? chlorine refers to element = 'cl'; carbon refers to element = 'c' on atom_id and atom_id2\r\nCREATED SQL: SELECT COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN atom AS T3 ON T2.atom_id2 = T3.atom_id WHERE T1.element = 'Cl' AND T3.element = 'C' AND T2.bond_id = 'TR001_1_8'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT+\n\t----- bird -----\ttoxicology", "272": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: List down two molecule id of triple bond non carcinogenic molecules with element carbon. carbon refers to element = 'c'; triple bond refers to bond_type = '#'; label = '-' means molecules are non-carcinogenic the molecules\r\nCREATED SQL: SELECT T1.molecule_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND T1.label = '-' AND T1.element = 'c' LIMIT 2\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\ttoxicology", "273": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What is the percentage of element chlorine in carcinogenic molecules? chlorine refers to element = 'cl'; label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(element = 'pb'); COUNT(molecule_id)) as percentage where label = '+' the percentage of element chlorine in carcinogenic molecules = DIVIDE(SUM(element = 'cl'), COUNT(molecule_id)) where label = '+'\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T2.element = 'Cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'\r\nEND+\n\t----- bird -----\ttoxicology", "274": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: List the toxicology elements associated with molecule TR001. TR001 is the molecule id on the label; toxicology elements refers to element = 'C' OR element = 'O' OR element = 'N'\r\nCREATED SQL: SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = 'TR001' AND (T1.element = 'C' OR T1.element = 'O' OR T1.element = 'N')\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\ttoxicology", "275": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Give me the molecule ID of the double bond type. double bond refers to bond_type ='= '; on double bond type, give me the molecule ID refers to molecule_id\r\nCREATED SQL: SELECT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '='\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\ttoxicology", "276": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Write down the atom IDs of the first and second atoms of triple bond type molecules. first atom refers to atom_id; second atom refers to atom_id2; triple bond refers to bond_type = '#'; the atom IDs of the first and second atoms = atom_id, atom_id2\r\nCREATED SQL: SELECT T1.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#' ORDER BY T2.atom_id2 LIMIT 2\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\ttoxicology", "277": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What are the toxicology elements associated with bond ID TR005_16_26? element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element ='s' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element ='sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium; element = 'fe' means Iron; element = 'cu' means Copper; element ='mn' means Manganese; element = 'zn' means Zinc; element = 'cd' means Cadmium; element = 'cr' means Chromium; element = 'ni' means Nickel; element = 'co' means Cobalt; element = 'li' means Lithium; element = 'k' means Potassium; element = 'rb' means Rubidium; element ='sr+\n\t----- bird -----\ttoxicology", "278": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: How many of the single bond type molecules are non-carcinogenic? label = '-' means molecules are non-carcinogenic; single bond refers to bond_type = '-'; the number of molecules = COUNT(bond_id)\r\nCREATED SQL: SELECT COUNT(DISTINCT T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type ='single' AND T2.label = '-'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\ttoxicology", "279": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What is the label for bond ID TR001_10_11? label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic the label of molecule refers to molecule.label\r\nCREATED SQL: SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_10_11'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nEND OF CREATED SQL\r\nEND OF CREATED SQL\r\nEND OF CREATED SQL\r\nEND OF CREATED SQL\r\nEND OF CREATED SQL\r\nEND OF CRE+\n\t----- bird -----\ttoxicology", "280": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Enumerate the bond ID of triple bond type molecules and tell me if they are carcinogenic or not. triple bond refers to bond_type = '#'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic on humans\r\nCREATED SQL: SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label+\n\t----- bird -----\ttoxicology", "281": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Tally the toxicology element of the 4th atom of each molecule that was carcinogenic. label = '+' means molecules are carcinogenic; 4th atom of each molecule refers to substr(atom_id, 7, 1) = 4; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element ='s' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element ='sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium the element refers to element\r\nCREATED SQL: SELECT COUNT(CASE WHEN element = 'cl' THEN 1 ELSE NULL END) FROM atom WHERE atom_id LIKE '4%'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(CASE WHEN element = 'c' THEN 1 ELSE NULL END) FROM atom WHERE atom_id LIKE '4%'\r\nCREATED SQL: SELECT COUNT(CASE WHEN element = 'h' THEN 1 ELSE NULL END) FROM atom WHERE atom_id LIKE '+\n\t----- bird -----\ttoxicology", "282": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What is the ratio of Hydrogen elements in molecule ID TR006? Please indicate its label. hydrogen refers to element = 'h'; ratio = DIVIDE(SUM(element = 'h'), count(element)) where molecule_id = 'TR006' ; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic on the human body\r\nCREATED SQL: SELECT SUM(CASE WHEN element = 'H' THEN 1 ELSE 0 END) / COUNT(element) AS ratio, label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule_id = 'TR006'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\ttoxicology", "283": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Identify whether the chemical compound that contains Calcium is carcinogenic. calcium refers to element = 'ca'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; on the other hand, label = '?' means molecules are unknown\r\nCREATED SQL: SELECT T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'Ca'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'Ca'\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\ttoxicology", "284": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Determine the bond type that is formed in the chemical compound containing element Tellurium. Tellurium refers to element = 'te'; double bond refers to bond_type ='= '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#'; the chemical compound refers to label\r\nCREATED SQL: SELECT T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN atom AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.element = 'Te'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\ttoxicology", "285": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Name chemical elements that form a bond TR001_10_11. element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element ='s' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element ='sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium; TR001_10_11 is the bond id; molecule id refers to SUBSTR(bond_id, 1, 5); atom 1 refers to SUBSTR(bond_id, 7, 2); atom 2 refers to SUBSTR(bond_id, 10, 2) where atom_id2 = 'TR001_10_11';\r\nCREATED SQL: SELECT T2.element FROM bond AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.molecule_id = 'TR001_10_11'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T2.element FROM bond AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.molecule_id = 'TR001+\n\t----- bird -----\ttoxicology", "286": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Among all chemical compounds identified in the database, what percent of compounds form a triple-bond. triple bond refers to bond_type = '#'; the percent of compounds form a triple-bond refers to divide(count(bond_id where bond_type = '#'), count(bond_id)) as percent where bond_type = '#'\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T2.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.bond_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id\r\nEND+\n\t----- bird -----\ttoxicology", "287": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Among all chemical compounds that contain molecule TR047, identify the percent that form a double-bond. TR047 is the molecule id; double bond refers to bond_type ='= '; percentage = DIVIDE(SUM(bond_type ='= '), COUNT(all bond_id)) as percent where molecule_id = 'TR047' the percentage of the double bond is 100%\r\nCREATED SQL: SELECT CAST(COUNT(CASE WHEN T1.bond_type = '=' THEN T1.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.bond_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = 'TR047'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\ttoxicology", "288": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Identify whether the molecule that contains atom TR001_1 is carcinogenic. label = '+' mean molecules are carcinogenic; the molecule that contains atom TR001_1 refers to molecule_id where atom_id = 'TR001_1'\r\nCREATED SQL: SELECT T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.atom_id = 'TR001_1'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nEND OF CREATION\r\nCREATED SQL\r\nCREATED SQL refers to 'SELECT T1.label FROM molecule AS+\n\t----- bird -----\ttoxicology", "289": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Is molecule TR151 carcinogenic? label = '+' mean molecules are carcinogenic; the label = '-' mean molecules are not carcinogenic\r\nCREATED SQL: SELECT label FROM molecule WHERE molecule_id = 'TR151'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\ttoxicology", "290": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Which toxic element can be found in the molecule TR151? element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element ='s' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element ='sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium; element = 'fe' means Iron; element ='mn' means Manganese; element = 'cu' means Copper; element = 'zn' means Zinc; element = 'cr' means Chromium; element = 'ni' means Nickel; element = 'co' means Cobalt; element = 'li' means Lithium; element = 'k' means Potassium; element = 'rb' means Rubidium; element ='sr' means Strontium; element = '+\n\t----- bird -----\ttoxicology", "291": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: How many chemical compounds in the database are identified as carcinogenic. label = '+' mean molecules are carcinogenic; the label = '-' mean molecules are not carcinogenic; carcinogenic molecules refer to label = '+'\r\nCREATED SQL: SELECT COUNT(*) FROM molecule WHERE label = '+'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\ttoxicology", "292": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Identify the atoms belong to the molecule with ID between TR010 to TR050 that contain the element carbon. carbon refers to element = 'c'; between TR010 to TR050 refers to substr(molecule_id, 3, 3)>10 AND substr(molecule_id, 3, 3) < 50 the molecule ID starts with 'TR'\r\nCREATED SQL: SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'C' AND T2.molecule_id BETWEEN 'TR010' AND 'TR050'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\ttoxicology", "293": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: How many atoms belong to the molecule labeled with carcinogenic compounds? label = '+' mean molecules are carcinogenic; the molecule refers to molecule_id\r\nCREATED SQL: SELECT COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\ttoxicology", "294": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Which bond ids are double-bond with carcinogenic compound? label = '+' mean molecules are carcinogenic; double bond refers to bond_type ='= '; on the other hand, label = '-' mean molecules are not carcinogenic\r\nCREATED SQL: SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.bond_type ='= '\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\n+\n\t----- bird -----\ttoxicology", "295": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: How many atoms belong to the molecule that element is hydrogen and labeled with carcinogenic compound? label = '+' mean molecules are carcinogenic; hydrogen refers to element = h' on element; carcinogenic compound refers to label = 'carcinogenic compound'\r\nCREATED SQL: SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = 'carcinogenic compound' AND T1.element = 'H'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule+\n\t----- bird -----\ttoxicology", "296": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Indicate the molecule id is belonging to the TR00_1_2 bond that has the first atom named TR00_1. the first atom named TR00_1 refers to atom_id = 'TR00_1'\r\nCREATED SQL: SELECT T1.molecule_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T1.atom_id = T3.atom_id WHERE T3.atom_id = 'TR00_1' AND T2.bond_type = 'TR00_1_2'\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\ttoxicology", "297": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Among the atoms that contain element carbon, which one does not contain compound carcinogenic? label = '-' means molecules are non-carcinogenic; carbon refers to element = 'c' on atom\r\nCREATED SQL: SELECT T2.atom_id FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'c' AND T1.label!= '-'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\ttoxicology", "298": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Calculate the percentage of molecules containing carcinogenic compounds that element is hydrogen. hydrogen refers to element = 'h'; label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+' and element = 'h'), COUNT(molecule_id)) * 100.0 on label = '+' and element = 'h'\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'H'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\ttoxicology", "299": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Is molecule TR124 carcinogenic? label = '+' mean molecules are carcinogenic; on the other hand, label = '-' mean molecules are not carcinogenic\r\nCREATED SQL: SELECT label FROM molecule WHERE molecule_id = 'TR124'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT label FROM molecule WHERE molecule_id = 'TR124'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT label FROM molecule WHERE molecule_id = 'TR124'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT label FROM molecule WHERE molecule_id = 'TR124'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT+\n\t----- bird -----\ttoxicology", "300": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What atoms comprise TR186? TR186 is a molecule id the label of which is 'TR186'\r\nCREATED SQL: SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = 'TR186'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\ttoxicology", "301": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What is the bond type of TR007_4_19? double bond refers to bond_type ='= '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#'; on the other hand, bond_type ='' means no bond\r\nCREATED SQL: SELECT T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR007_4_19'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE+\n\t----- bird -----\ttoxicology", "302": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Name the elements that comprise the atoms of bond TR001_2_4. element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element ='s' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element ='sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium; element = 'ba' means Barium; element ='sr' means Strontium; element = 'zn' means Zinc; element = 'cu' means Copper; element = 'ag' means Silver; element = 'au' means Gold; element ='mg' means Magnesium; element ='mn' means Manganese; element = 'fe' means Iron; element = 'ni' means Nickel; element = 'co' means Cobalt; element = 'cr'+\n\t----- bird -----\ttoxicology", "303": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: How many double bonds does TR006 have and is it carcinogenic? label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; double bond refers to bond_type ='= '; on the molecule with label = '-', how many of them have double bonds? double bonds refers to bond_type ='= '\r\nCREATED SQL: SELECT COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '=' AND T1.molecule_id = 'TR006' AND T1+\n\t----- bird -----\ttoxicology", "304": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: List all carcinogenic molecules and their elements. label = '+' mean molecules are carcinogenic; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element ='s' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element ='sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium the molecule is carcinogenic\r\nCREATED SQL: SELECT T1.label, T2.element FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element IN ('Cl', 'C', 'H', 'O', 'S', 'N', 'P', 'Na', 'Br', 'F', 'I', 'Sn', 'Pb', 'Te', 'Ca')\r\nEND OF QUESTION\r\nCREATED SQL:+\n\t----- bird -----\ttoxicology", "305": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Name all bonds with single bond types and what atoms are connected to the molecules. single bond refers to bond_type = '-'; the atoms connected to the molecules refers to atom_id\r\nCREATED SQL: SELECT T2.bond_id, T1.atom_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_type = '-'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\ttoxicology", "306": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Which molecules have triple bonds and list all the elements they contain. triple bond refers to bond_type = '#'; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element ='s' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element ='sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium\r\nCREATED SQL: SELECT DISTINCT T2.element FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' UNION SELECT DISTINCT T2.element FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '='\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.element FROM molecule AS T1 INNER JOIN bond AS+\n\t----- bird -----\ttoxicology", "307": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Name the atoms' elements that form bond TR000_2_3. element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element ='s' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element ='sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium the atoms' elements refers to element\r\nCREATED SQL: SELECT T2.element FROM bond AS T1 INNER JOIN atom AS T2 ON T1.bond_id = T2.atom_id WHERE T1.bond_id = 'TR000_2_3'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T2.element FROM bond AS T1 INNER JOIN atom AS T2 ON T1.bond_id = T2.atom_id WHERE T1.bond_id = 'TR000_2_+\n\t----- bird -----\ttoxicology", "308": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: How many bonds are created by bonding atoms with chlorine element? chlorine refers to element = 'cl' on atom\r\nCREATED SQL: SELECT COUNT(DISTINCT T1.bond_id) FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id INNER JOIN atom AS T3 ON T1.atom_id2 = T3.atom_id WHERE T2.element = 'Cl'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\ttoxicology", "309": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: List out the atom id that belongs to the TR346 molecule and how many bond type can be created by this molecule? the TR346 molecule refers to label = 'TR346'\r\nCREATED SQL: SELECT T1.atom_id, COUNT(T2.bond_type) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = ( SELECT molecule_id FROM molecule WHERE label = 'TR346' )\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\ttoxicology", "310": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: How many molecules have a double bond type and among these molecule, how many are labeled as carcinogenic compound? double bond refers to bond_type ='= '; label = '+' mean molecules are carcinogenic; the molecules are carcinogenic refers to COUNT(molecule_id) > 0\r\nCREATED SQL: SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '=' AND T1.label LIKE '%+%' GROUP BY T1.molecule_id\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\ttoxicology", "311": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: How many molecules without sulphur element is not having double bond? double bond refers to bond_type ='= '; bond_type! ='= '; sulphur refers to element ='s' the element ='s' refers to element = 'S';\r\nCREATED SQL: SELECT COUNT(T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN atom AS T3 ON T1.molecule_id = T3.molecule_id WHERE T2.bond_type <>'='AND T3.element <> 'S'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\ttoxicology", "312": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What is the carcinogenic label for bond TR001_2_4? label = '+' mean molecules are carcinogenic on human; label = '-' mean molecules are not carcinogenic on human; label = 'U' mean unknown carcinogenic effect on human\r\nCREATED SQL: SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_2_4'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1+\n\t----- bird -----\ttoxicology", "313": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: How many atoms belong to molecule id TR005? the atom ID refers to atom_id\r\nCREATED SQL: SELECT COUNT(atom_id) FROM atom WHERE molecule_id = 'TR005'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\ttoxicology", "314": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: How many single bonds are there in the list? single bond refers to bond_type = '-'; the list refers to label\r\nCREATED SQL: SELECT COUNT(bond_id) FROM bond WHERE bond_type = '-'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\ttoxicology", "315": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Among the molecules which contain \"cl\" element, which of them are carcinogenic? label = '+' mean molecules are carcinogenic; the molecule contains \"cl\" element refers to molecule_id where atom_id contains 'cl'\r\nCREATED SQL: SELECT T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'Cl'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\ttoxicology", "316": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Among the molecules which contain \"c\" element, which of them are not carcinogenic? label = '-' means molecules are non-carcinogenic the molecules which contain \"c\" element refers to element = 'c'\r\nCREATED SQL: SELECT molecule_id FROM molecule WHERE molecule_id IN ( SELECT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'\r\n)\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\ttoxicology", "317": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Calculate the percentage of carcinogenic molecules which contain the Chlorine element. label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+' and element = 'cl'), COUNT(molecule_id)) as percentage on element = 'cl'\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T1.label = '+' AND T2.element = 'Cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(T1.molecule_id) FROM molecule AS T1+\n\t----- bird -----\ttoxicology", "318": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What is the molecule id of bond id TR001_1_7? the molecule id of bond id TR001_1_7 refers to molecule_id where bond_id = 'TR001_1_7'\r\nCREATED SQL: SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\ttoxicology", "319": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: How many elements are contained in bond_id TR001_3_4? element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element ='s' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element ='sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium; element ='mn' means Manganese\r\nCREATED SQL: SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_3_4'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER+\n\t----- bird -----\ttoxicology", "320": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What is the type of the bond which is presenting the connection between two atoms TR000_1 and TR000_2? type of bond refers to bond_type; double bond refers to bond_type ='= '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#'; the connection between two atoms TR000_1 and TR000_2 refers to atom_id = 'TR000_1' and atom_id2 = 'TR000_2'\r\nCREATED SQL: SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_1' AND T2.atom_id2 = 'TR000_2'\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\ttoxicology", "321": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What is the molecule of atom id \"TR000_2\" and atom id 2 \"TR000_4\"? the molecule refers to molecule_id; atom id \"TR000_2\" refers to atom_id = 'TR000_2'; atom id 2 \"TR000_4\" refers to atom_id2 = 'TR000_4'\r\nCREATED SQL: SELECT T2.molecule_id FROM connected AS T1 INNER JOIN molecule AS T2 ON T1.atom_id = T2.molecule_id WHERE T1.atom_id = 'TR000_2' OR T1.atom_id2 = '+\n\t----- bird -----\ttoxicology", "322": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What is the element of toxicology for the atom with the ID of TR000_1? atom with ID refers to atom_id; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element ='s' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element ='sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium; element = 'ba' means Barium; element = 'cu' means Copper; element ='mn' means Manganese; element = 'ag' means Silver; element = 'fe' means Iron; element = 'co' means Cobalt; element = 'ni' means Nickel; element = 'zn' means Zinc; element = 'cr' means Chromium; element ='mo' means Molybdenum; element = 'wd' means Tungsten; element =+\n\t----- bird -----\ttoxicology", "323": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Is molecule TR000 is carcinogenic or not? label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic the molecule ID is TR000\r\nCREATED SQL: SELECT label FROM molecule WHERE molecule_id = 'TR000'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.label FROM molecule AS T1 INNER JOIN connected AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.atom_id = 'A0001'\r\nEND OF CREATION\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.label FROM molecule AS T1 INNER JOIN connected AS T2 ON T1+\n\t----- bird -----\ttoxicology", "324": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Find the percentage of atoms with single bond. single bond refers to bond_type = '-'; percentage = DIVIDE(SUM(bond_type = '-'), COUNT(bond_id)) as percentage the percentage of atoms with single bond\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T2.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\ttoxicology", "325": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: How many carcinogenic molecules that consisted of Nitrogen? nitrogen refers to element = 'n'; label = '+' mean molecules are carcinogenic; the number of molecules = COUNT(molecule_id)\r\nCREATED SQL: SELECT COUNT(DISTINCT molecule_id) FROM molecule WHERE label = '+' AND element = 'n'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\ttoxicology", "326": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Which molecule consisted of Sulphur atom with double bond? sulphur refers to element -'s'; double bond refers to bond_type ='= '; on molecule refers to molecule_id\r\nCREATED SQL: SELECT T1.molecule_id FROM molecule AS T1 INNER JOIN connected AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T3.element = 'S' AND T2.bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = '=' )\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\ttoxicology", "327": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Which non-carcinogenic molecules consisted more than 5 atoms? label = '-' means molecules are non-carcinogenic; molecules consisted more than 5 atoms refers to COUNT(molecule_id) > 5 the molecule_id is atom_id\r\nCREATED SQL: SELECT molecule_id FROM molecule WHERE label = '-' GROUP BY molecule_id HAVING COUNT(molecule_id) > 5\r\nEND OF QUESTION\r\nCREATED SQL: SELECT molecule_id FROM molecule WHERE label = '-' GROUP BY molecule_id HAVING COUNT(molecule_id) > 5\r\nEND OF QUESTION\r\nCREATED SQL: SELECT molecule_id FROM molecule WHERE label = '-' GROUP BY molecule_id HAVING COUNT(molecule_id) > 5\r\nEND+\n\t----- bird -----\ttoxicology", "328": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: List all the elements with double bond, consisted in molecule TR024. double bond refers to bond_type = '='; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element ='s' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element ='sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium the elements are: 'C', 'O', 'H', 'N', 'P', 'Na', 'Br', 'F', 'I', 'Sn', 'Pb', 'Te', 'Ca'\r\nCREATED SQL: SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type+\n\t----- bird -----\ttoxicology", "329": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Which carcinogenic molecule have the highest number of atoms consisted in it? label = '+' mean molecules are carcinogenic; molecule that have the highest number of atoms consisted in in refers to MAX(COUNT(atom.molecule_id)) the number of atoms consisted in it\r\nCREATED SQL: SELECT T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id GROUP BY T1.label ORDER BY COUNT(T2.atom_id) DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id GROUP BY T1.label ORDER BY COUNT+\n\t----- bird -----\ttoxicology", "330": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Calculate the percentage of carcinogenic molecules with triple bonded Hidrogen atoms. hydrogen refers to element = 'h'; label = '+' mean molecules are carcinogenic; triple bond refers to bond_type = '#'; percentage = DIVIDE(SUM(label = '+'), COUNT(molecule_id)) * 100.0 where element = 'h' AND bond_type = '#'; on molecules\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM molecule AS T1 INNER JOIN connected AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T1.molecule_id = T3.molecule_id INNER JOIN atom AS T4 ON T1.molecule_id = T4.molecule_id+\n\t----- bird -----\ttoxicology", "331": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: How many of the molecules are carcinogenic? label = '+' mean molecules are carcinogenic; the label = '-' mean molecules are not carcinogenic\r\nCREATED SQL: SELECT COUNT(*) FROM molecule WHERE label = '+'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF QUESTION+\n\t----- bird -----\ttoxicology", "332": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: Among the molecules between TR004 to TR010, how many of them has single bonds? single bond refers to bond_type = '-'; molecules between TR004 to TR010 refers molecule_id BETWEEN 'TR004' and 'TR010'; the number of molecules refers to COUNT(molecule_id)\r\nCREATED SQL: SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-' AND T1.molecule_id BETWEEN 'TR004' AND 'TR010'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\ttoxicology", "333": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: In the molecule TR008, how many carbons are present? carbon refers to element = 'c' on the atom table; molecule TR008 refers to label = 'TR008' on the molecule table\r\nCREATED SQL: SELECT COUNT(DISTINCT T2.atom_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = 'TR008' AND T2.element = 'C'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\ttoxicology", "334": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What is the element with the atom ID of TR004_7 in molecule that is not carcinogenic? label = '-' means molecules are non-carcinogenic; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element ='s' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element ='sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium; element = 'k' means Potassium; element = 'fe' means Iron; element ='mn' means Manganese; element = 'cu' means Copper; element = 'zn' means Zinc; element = 'al' means Aluminum; element = 'li' means Lithium; element = 'ba' means Barium; element ='sr' means Strontium; element = 'ag' means Silver; element = 'cd' means Cadmium; element = 'hg+\n\t----- bird -----\ttoxicology", "335": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What is the total number of molecules with double bonded oxygen? oxygen refers to element = 'o'; double bond refers to bond_type ='= '; the total number of molecules refers to COUNT(molecule_id)\r\nCREATED SQL: SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '=' AND T1.element = 'o'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\ttoxicology", "336": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: in molecules with triple bonds, how many of them are not carcinogenic? triple bond refers to bond_type = '#'; label = '-' means molecules are non-carcinogenic the label = '+' means molecules are carcinogenic\r\nCREATED SQL: SELECT COUNT(DISTINCT T1.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label!= '+'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\ttoxicology", "337": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: List the element and bond type included in the molecule with molecule ID of TR016. element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element ='s' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element ='sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium; double bond refers to bond_type ='= '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#'; the molecule ID of TR016\r\nCREATED SQL: SELECT T1.element, T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.atom_id = T2.bond_id INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.molecule_id = 'TR016'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.element, T2.bond_type FROM atom AS T1 INNER JOIN bond AS T+\n\t----- bird -----\ttoxicology", "338": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: What is the atom ID of double bonded carbon in TR012 molecule? carbon refers to element = 'c'; double bond refers to bond_type ='= '; on TR012 refers to molecule_id = 'TR012'\r\nCREATED SQL: SELECT T1.atom_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'c' AND T3.bond_type = '=' AND T3.molecule_id = 'TR012'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\ttoxicology", "339": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE atom (\r\natom_id text,\r\nmolecule_id text,\r\nelement text,\r\nPRIMARY KEY (atom_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE bond (\r\nbond_id text,\r\nmolecule_id text,\r\nbond_type text,\r\nPRIMARY KEY (bond_id),\r\nFOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),\r\n);\r\nCREATE TABLE connected (\r\natom_id text,\r\natom_id2 text,\r\nbond_id text,\r\nFOREIGN KEY (atom_id) REFERENCES atom(atom_id),\r\nFOREIGN KEY (atom_id2) REFERENCES atom(atom_id),\r\nFOREIGN KEY (bond_id) REFERENCES bond(bond_id),\r\n);\r\nCREATE TABLE molecule (\r\nmolecule_id text,\r\nlabel text,\r\nPRIMARY KEY (molecule_id),\r\n);\r\n---------------------\r\nQUESTION: List the atom ID of the carcinogenic molecule that contains oxygen? label = '+' mean molecules are carcinogenic; oxygen refers to element = 'o' the element of atom\r\nCREATED SQL: SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'O'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\ttoxicology", "340": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Which are the cards that have incredibly powerful foils. poweful foils refers to cardKingdomFoilId = cardKingdomId AND cardKingdomId is not nullbrew\r\nCREATED SQL: SELECT name FROM cards WHERE cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL\r\nEND OF QUESTION\r\nCREATED SQL: SELECT name FROM cards WHERE cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL\r\nEND OF QUESTION\r\nCREATED SQL: SELECT name FROM cards WHERE cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL\r\nEND OF QUESTION+\n\t----- bird -----\tcard_games", "341": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What are the borderless cards available without powerful foils? borderless' refers to borderColor; poweful foils refers to cardKingdomFoilId paired with cardKingdomId AND cardKingdomId is not nullAcquire the cardKingdomFoilId and cardKingdomId from cards; cardKingdomFoilId is null refers to no foils; cardKingdomId is not null refers to foils\r\nCREATED SQL: SELECT DISTINCT T1.cardKingdomFoilId FROM cards AS T1 INNER JOIN cards AS T2 ON T1.cardKingdomId = T2.cardKingdomId WHERE T2.cardKingdomFoilId IS NULL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tcard_games", "342": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: List the card names with value that cost more converted mana for the face. more converted mana for the face refers to Max(faceConvertedManaCost);falling under face refers to isFullArt = 0\r\nCREATED SQL: SELECT name FROM cards WHERE isFullArt = 0 AND faceConvertedManaCost > ( SELECT MAX(faceConvertedManaCost) FROM cards )\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL: SELECT name FROM cards WHERE isFullArt = 0 AND faceConvertedManaCost > ( SELECT MAX(faceConvertedManaCost) FROM cards )\r\nEND OF QUESTION\r\nCREATED SQL: SELECT name FROM+\n\t----- bird -----\tcard_games", "343": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Name all cards with 2015 frame style ranking below 100 on EDHRec. below 100 on EDHRec refers to EDHRec <100; with 2015 frame style refers to frameVersion = 2015; name refers to name\r\nCREATED SQL: SELECT DISTINCT name FROM cards WHERE edhrecRank < 100 AND frameVersion = 2015\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.language = 'en' AND T1.edhrecRank < 100 AND T1.frameVersion = 2015\r\nEND OF QUESTION\r\nCREATED SQL:+\n\t----- bird -----\tcard_games", "344": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: List all the mythic rarity print cards banned in gladiator format. mythic rarity printing refers to rarity ='mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator'; = refers to the same\r\nCREATED SQL: SELECT T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity ='mythic' AND T2.status = 'Banned' AND T2.format = 'gladiator'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity =+\n\t----- bird -----\tcard_games", "345": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: For artifact type of cards that do not have multiple faces on the same card, state its legalities for vintage play format. Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage'; legalities refers to status\r\nCREATED SQL: SELECT T1.legalities FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.type = 'Artifact' AND T2.side IS NULL AND T1.format = 'vintage'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\tcard_games", "346": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: List all the card id and artist with unknown power which are legal for commander play format. unknown power refers to power = '*' or POWER IS NULL; commander play format refers to format = 'commander'; legal for commander play format refers to format = 'commander' where status = 'Legal'cards.id;\r\nCREATED SQL: SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T1.power = '*' OR T1.power IS NULL\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'command+\n\t----- bird -----\tcard_games", "347": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Find all cards illustrated by Stephen Daniel and describe the text of the ruling of these cards. State if these cards have missing or degraded properties and values. cards have missing or degraded properties and value refers to hasContentWarning = 1; 'Stephen Daniele' is artist;Cards illustrated by Stephen Daniele refers to artist = 'Stephen Daniele'\r\nCREATED SQL: SELECT T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele' AND T1.hasContentWarning = 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\tcard_games", "348": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Describe the information about rulings for card named 'Sublime Epiphany' with number 74s. Sublime Epiphany' is name of cards; number 74s refers to number = '74s'; information refers to text; 74s refers to number\r\nCREATED SQL: SELECT T1.text FROM rulings AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid WHERE T2.name = 'Sublime Epiphany' AND T2.number = '74s'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tcard_games", "349": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Name the card and artist with the most ruling information. Also state if the card is a promotional printing. with the most ruling information refers to Max(count(rulings.uuid)); the card is the promotional printing refers to isPromo = 1;cards.name;\r\nCREATED SQL: SELECT T1.name, T1.artist FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.isPromo = 1 GROUP BY T1.name, T1.artist ORDER BY COUNT(T2.uuid) DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\tcard_games", "350": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: State the alternative languages available for card named Annul numbered 29. annul refers to name = 'annul'; numbered 29 refers to number = '29'; = alternative language refers to language\r\nCREATED SQL: SELECT DISTINCT T1.language FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Annul' AND T2.number = '29'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tcard_games", "351": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Name all the cards which have alternative language in Japanese. Japanese' is the language;cards which have alternative language refers to hasAlternative = 1;\r\nCREATED SQL: SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.hasAlternative = 1 AND T2.language = 'ja'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\tcard_games", "352": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Calculate the percentage of the cards availabe in Chinese Simplified. Chinese Simplified' is the language; percentage = Divide(Sum(id where language = 'Chinese Simplified'), Count(id)) *100 text;\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T1.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL: SELECT CAST(SUM(C+\n\t----- bird -----\tcard_games", "353": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: List all the sets available in Italian translation. State the total number of cards per set. Italian translation refers to language = 'Italian'; total number of card per set refers to totalSetSize;'setCode'\r\nCREATED SQL: SELECT T1.setCode, T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.language = 'Italian'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\tcard_games", "354": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many types of cards does the artist Aaron Boyd illustrated about card art? Aaron Boyd' is artist;'s card art refers to faceName;\r\nCREATED SQL: SELECT COUNT(DISTINCT T1.type) FROM cards AS T1 INNER JOIN cards AS T2 ON T1.id = T2.id WHERE T1.artist = 'Aaron Boyd' AND T2.faceName = 'card art'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\tcard_games", "355": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What is the keyword found on card 'Angel of Mercy'? Angel of Mercy' is the name of card;card refers to name;\r\nCREATED SQL: SELECT keywords FROM cards WHERE name = 'Angel of Mercy'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tcard_games", "356": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many cards have infinite power? infinite power refers to power = '*';'s power';\r\nCREATED SQL: SELECT COUNT(id) FROM cards WHERE power = '*'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tcard_games", "357": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What type of promotion is of card 'Duress'? card Duress refers to name = 'Duress'; type of promotion refers to promoTypes; of refers to name\r\nCREATED SQL: SELECT T1.promoTypes FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Duress'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\tcard_games", "358": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What is the border color of card \"Ancestor's Chosen\"? Ancestor's Chosen' is the name of card; value of name = 'Ancestor''s Chosen'\r\nCREATED SQL: SELECT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tcard_games", "359": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What is the type of the card \"Ancestor's Chosen\" as originally printed? Ancestor's Chosen' is the name of card; type of the card as originally printed refers to originaltype; originaltype = 'Creature';\r\nCREATED SQL: SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T1.originalType = 'Creature'\r\nEND OF CREATION\r\nCREATED SQL: SELECT T1.type FROM cards AS T1 INNER JOIN+\n\t----- bird -----\tcard_games", "360": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: cards are not directly linked to language but through table'set'. you need to add set in covered table & rephrase your question\r\nWhat are the languages available for the set that card 'Angel of Mercy' is in? Angel of Mercy' is the name of card; language refers to language of cards;\r\nCREATED SQL: SELECT T2.language FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.name = 'Angel of Mercy'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T2.language FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.name = 'Angel of Mercy'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT+\n\t----- bird -----\tcard_games", "361": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many cards of legalities whose status is restricted have text boxes? restricted refers to status ='restricted'; have text boxes refers to is Textless = 0; text boxes refers to isTextless = 0;\r\nCREATED SQL: SELECT COUNT(*) FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.id WHERE T1.status ='restricted' AND T2.isTextless = 0\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL refers to SQL code that will return the desired result of the question; isTextless = 0 refers to the card does not have text boxes+\n\t----- bird -----\tcard_games", "362": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What is the description about the ruling of card \"Condemn\"? Ancestor's Chosen' is the name of card; description about the ruling refers to text;Cards with ruling refers to rulings.text;\r\nCREATED SQL: SELECT T1.text FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Ancestor''s Chosen'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\tcard_games", "363": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many cards of legalities whose status is restricted are found in a starter deck? restricted refers to status ='restricted'; found in the starter deck refers to isStarter = 1; = 1\r\nCREATED SQL: SELECT COUNT(T1.uuid) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.isStarter = 1 AND T2.status ='restricted'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(T1.uuid) FROM cards AS T1 INNER JOIN legalities AS T+\n\t----- bird -----\tcard_games", "364": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What is the status of card \"Cloudchaser Eagle\"? Cloudchaser Eagle is the name of card; a card with name = 'Cloudchaser Eagle';\r\nCREATED SQL: SELECT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tcard_games", "365": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What is the type of card \"Benalish Knight\"? Benalish Knight' is the name of card;  type of card refers to type;\r\nCREATED SQL: SELECT T1.type FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tcard_games", "366": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What is the rule of playing card \"Benalish Knight\"? Benalish Knight' is the name of card; rule of playing card refers to format; the format refers to status = 'Legal'\r\nCREATED SQL: SELECT T1.text FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Benalish Knight' AND T1.status = 'Legal'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tcard_games", "367": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Please provide the names of the artists who illustrated the card art in Phyrexian. Phyrexian' is the language; name of artists refers to artist; the card art refers to illustration\r\nCREATED SQL: SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tcard_games", "368": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What is the percentage of borderless cards? borderless card refers to borderColor = 'borderless'; percentage = Divide(Count (id) where borderColor = 'borderless', Count(id)) *100'sum(id) where borderColor = 'borderless'\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T1.borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.borderColor = 'borderless' THEN 1 ELSE 0 END) AS PER FROM cards AS T1\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON+\n\t----- bird -----\tcard_games", "369": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many cards that illusrtated in German have been reprinted? German' is the language; reprinted refers to isReprint = 1;'storyspotlight' is the type\r\nCREATED SQL: SELECT COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isReprint = 1 AND T2.type ='storyspotlight' AND T2.language = 'German'\r\nEND OF QUESTION\r\nCREATED BY: Xinyi Wang\r\nDATE: 2020/5/4\r\nCREATED BY: Xinyi Wang\r\nDATE: 202+\n\t----- bird -----\tcard_games", "370": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many borderless cards are illustrated in Russian? borderless card refers to borderColor = 'borderless'; 'Russian' is the language; = COUNT(flavorText)\r\nCREATED SQL: SELECT COUNT(T2.flavorText) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'borderless' AND T2.language = 'Russian'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tcard_games", "371": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What is the percentage of cards whose language is French among the Story Spotlight cards? Story Spotlight card refers to isStorySpotlight = 1; French is the language; Percentage = Divide(Count(id) where language = 'French' and isStorySpotlight = 1, Count(id) where isStorySpotlight = 1)*100%\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T1.language = 'fr' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.isStorySpotlight = 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tcard_games", "372": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many cards are there with toughness of 99?cards refers to name; toughness of 99 refers to toughness = 99\r\nCREATED SQL: SELECT COUNT(t1.name) FROM cards AS t1 INNER JOIN rulings AS t2 ON t1.uuid = t2.uuid WHERE t1.toughness = 99\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tcard_games", "373": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Name the cards that were illustrated by Aaron Boyd. Aaron Boyd' is artist;cardKingdomFoilId = 'cardKingdomFoilId';\r\nCREATED SQL: SELECT name FROM cards WHERE artist = 'Aaron Boyd' AND cardKingdomFoilId = 'cardKingdomFoilId'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tcard_games", "374": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many black border cards are only available on mtgo? black border card refers to borderColor = black; available on mtgo refers to availability = mtgo;\r\n\r\nadd quotes for string = 'black' and ='mtgo' on borderColor and availability\r\nCREATED SQL: SELECT COUNT(id) FROM cards WHERE availability ='mtgo' AND borderColor = 'black'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(id) FROM cards WHERE availability ='mtgo' AND borderColor = 'black'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(id) FROM cards WHERE availability ='mtgo'+\n\t----- bird -----\tcard_games", "375": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: List down all the card IDs with converted mana cost of 0. converted mana cost of 0 refers to covertedManaCost = 0;'s cardID' refers to id;\r\nCREATED SQL: SELECT id FROM cards WHERE convertedManaCost = 0\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.id FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.language = 'en' AND T2.translation = 'Legions'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.id FROM cards AS T1 INNER JOIN set_translations AS T2+\n\t----- bird -----\tcard_games", "376": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What are the card layout of cards with keyword of flying? card layout refers to layout; keyword of flying refers to keywords LIKE '%Flying%';\r\nCREATED SQL: SELECT layout FROM cards WHERE keywords LIKE '%Flying%'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\tcard_games", "377": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many cards with original type of \"Summon - Angel\" have subtype other than \"Angel\"? subtype other than Angel refers to subtypes is not 'Angel'; a card refers to name;\r\nCREATED SQL: SELECT COUNT(*) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes!= 'Angel'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tcard_games", "378": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What are the foiled cards that are incredibly powerful when paired with non foiled cards? List the IDs. Incredibly powerful refers to both cardKingdomFoilId and cardKingdomId IS NOT Null; non foiled cards refers to cardKingdomFoilId is Null\r\nCREATED SQL: SELECT T1.id FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.cardKingdomFoilId IS NOT NULL OR T1.cardKingdomId IS NOT NULL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tcard_games", "379": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What are the cards belong to duel deck a? List the ID. duel deck a refers to duelDeck = a; text refers to name;\r\nCREATED SQL: SELECT id FROM cards WHERE duelDeck = 'a'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\tcard_games", "380": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: List the edhrecRank for cards with frame version 2015.fall. frame version 2015.fall refers to frameVersion = '2015.fall';\r\nCREATED SQL: SELECT edhrecRank FROM cards WHERE frameVersion = '2015.fall'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\tcard_games", "381": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: List down the name of artists for cards in Chinese Simplified. Chinese Simplified' is the language;crest;\r\nCREATED SQL: SELECT T2.artist FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.language = 'zh-CN'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tcard_games", "382": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What are the cards that only available in paper and Japanese language? available in paper refers to availability = 'paper'; 'Japanese is the language; 2 Japanese language refers to language = 'Japanese'\r\nCREATED SQL: SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese' AND T1.availability = 'paper'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\tcard_games", "383": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many of the banned cards are white border? banned card refers to status = 'Banned'; white border refers to borderColor = 'white'; = 'Banned' refers to status = 'Banned'\r\nCREATED SQL: SELECT COUNT(id) FROM cards WHERE status = 'Banned' AND borderColor = 'white'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(id) FROM cards WHERE status = 'Banned' AND borderColor = 'white'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(id) FROM cards WHERE status = 'Banned' AND borderColor = 'white'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT+\n\t----- bird -----\tcard_games", "384": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: List down the uuid for legacy cards and the foreign language of these cards. legacy card refers to format = 'legacy'; foreign language refers to language in foreign_data = 'en';\r\nCREATED SQL: SELECT DISTINCT T2.uuid FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.format = 'Legacy' AND T2.language = 'en'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\tcard_games", "385": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Write down the ruling of Beacon of Immortality. Beacon of Immortality' is the name of card;'s ruling' refers to text;\r\nCREATED SQL: SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tcard_games", "386": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many cards are having future frame version and what are the legality status of these cards? future frame version refers to frameVersion = 'future'; legility status refers to status = 'legal';'status' = 'legal' refers to format <> 'format';\r\nCREATED SQL: SELECT COUNT(*) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.id = T2.uuid WHERE T1.frameVersion = 'future' AND T2.status = 'legal'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tcard_games", "387": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What are the cards for set OGW? State the colour for these cards. set OGW refers to setCode = 'OGW'; = 'OGW'; color refers to colorIdentity;\r\nCREATED SQL: SELECT T2.colorIdentity FROM sets AS T1 INNER JOIN cards AS T2 ON T1.id = T2.setCode WHERE T1.setCode = 'OGW'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\tcard_games", "388": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What are the cards in set 10E with converted mana of 5 have translation and what are the languages? set 10E refers to setCode = '10E'; converted mana of 5 refers to convertedManaCost = 5; translation refers to translation; languages refers to language\r\nCREATED SQL: SELECT T1.name, T2.language FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.setCode = '10E' AND T1.convertedManaCost = 5\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\tcard_games", "389": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: List down the name of cards with original types of Creature - Elf and the date of rulings for these cards. Creature - Elf is the originalType;crafts;\r\nCREATED SQL: SELECT T1.name, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.name, T2.date FROM cards AS T1 INNER JOIN+\n\t----- bird -----\tcard_games", "390": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What are the colors of cards from ID 1-20? What are the format of these cards? ID 1-20 refers to id BETWEEN 1 and 20;y format refers to format;\r\nCREATED SQL: SELECT T1.colors, T3.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T2.uuid = T3.uuid WHERE T1.id BETWEEN 1 AND 20\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tcard_games", "391": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Among the Artifact cards, which are black color and comes with foreign languague translation? Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data's language = 'fr';\r\nCREATED SQL: SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B' AND T2.language = 'fr'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF CREATION OF SQL\r\nCREATED SQL refers to the SQL query that will return the desired result; originalType =+\n\t----- bird -----\tcard_games", "392": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Pick 3 cards with rarity of uncommon, list down name these cards according to ascending order of it's ruling date. uncommon refers to rarity = 'uncommon'; = name where rarity = 'uncommon' order by ruling date asc limit 3\r\nCREATED SQL: SELECT name FROM cards WHERE rarity = 'Uncommon' ORDER BY dateOfRuling ASC LIMIT 3\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\tcard_games", "393": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: On how many cards designed by John Avon is its foil non-powerful? John Avon refer to artist; foil poweful foils refers to cardKingdomId and cardKingdomFoildId is NOT NULL  and convertedManaCost = 0\r\nCREATED SQL: SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN cards AS T2 ON T1.id = T2.id WHERE T1.artist = 'John Avon' AND T2.cardKingdomFoilId IS NOT NULL AND T2.cardKingdomId IS NOT NULL AND T2.convertedManaCost = 0\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\tcard_games", "394": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many white bordered cards are powerful? white bordered cards refer to borderColor = 'white'; powerful cards refers to cardKingdomFoilId = cardKingdomId AND cardKingdomId is not null (replace) = 'false'\r\nCREATED SQL: SELECT COUNT(id) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(id) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL\r\nEND OF CREATION\r\nCREATED SQL: SELECT COUNT(id) FROM cards WHERE borderColor =+\n\t----- bird -----\tcard_games", "395": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many cards designed by UDON and available in mtgo print type has a starting maximum hand size of -1? UDON refer to artist; availabe in mtgo refers to availability ='mtgo'; starting maximum hand size of -1 refers to hand = -1 = 0;\r\nCREATED SQL: SELECT COUNT(id) FROM cards WHERE artist = 'UDON' AND availability ='mtgo' AND hand = 0\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tcard_games", "396": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many cards with a 1993 frame version and available on paper have a sensitive content warning? sensitive content warning refer to hasContentWarning = 1; available on paper refer to availability = 'paper' 1993 refer to frameVersion = '1993'\r\nCREATED SQL: SELECT COUNT(id) FROM cards WHERE frameVersion = '1993' AND availability = 'paper' AND hasContentWarning = 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tcard_games", "397": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper and mtgo? available in paper refers to availability = 'paper'; available in mtgo refers to availability ='mtgo; frameVersion = 2003;borderColor = 'black' and availability = 'paper' or availability ='mtgo';\r\nCREATED SQL: SELECT DISTINCT T1.manaCost FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.frameVersion = 2003 AND T1.bordercolor = 'black' AND (T1.availability = 'paper' OR T1.availability ='mtgo')\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tcard_games", "398": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How much unconverted mana do all the cards created by Rob Alexander cost in total? unconverted mana refer to manaCost; Rob Alexander refer to artist's name = 'Rob Alexander';\r\nCREATED SQL: SELECT SUM(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(RE+\n\t----- bird -----\tcard_games", "399": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Lists all types of cards available in arena. all types refer to subtypes and supertypes\r\n\r\navailble in arena refers to availability = 'arena''subtypes' refers to cards.subtypes;'supertypes' refers to cards.supertypes;\r\nCREATED SQL: SELECT DISTINCT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN mtgarena_id AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'arena'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT DISTINCT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN mtgarena_id+\n\t----- bird -----\tcard_games", "400": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Lists the set code of all cards translated into Spanish. Spanish refer to language; set code refers to setCodehaven\r\nCREATED SQL: SELECT DISTINCT T1.setCode FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.language = 'Spanish'\r\nEND OF QUESTION\r\nEND OF DATABASE SCHEMA\r\nCREATED SQL: SELECT T1.setCode FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.language = 'Spanish'\r\nEND OF CREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\tcard_games", "401": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What percentage of legendary frame effect cards have a maximum starting maximun hand\r\nsize of +3? maximun hand size of +3 refer to hand = +3; legendary frame effect cards refer to frameEffects = 'legendary'; percentage refer to DIVIDE(COUNT(hand = '+3'), COUNT(id)) from cards where frameEffects = 'legendary' and hand = '+3'\r\nCREATED SQL: SELECT CAST(COUNT(CASE WHEN hand = '+3' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(id) FROM cards WHERE frameEffects = 'legendary' AND hand = '+3'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tcard_games", "402": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What is the percentage of Story Spotlight cards that also have a text box? List them by their ID. Story Spotlight cards that do not have a text box refers to isStorylight = 1 and isTextless = 1; Percentage refer to DIVIDE(SUM(count(id) where isStorylight = 1), SUM(count(id))) * 100%; ID refers to cards.id\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T1.isStorySpotlight = 1 AND T1.isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1\r\nEND OF QUESTION\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T1.isStorySpotlight = 1 AND T1.isTextless = 0 THEN 1 ELSE +\n\t----- bird -----\tcard_games", "403": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Calculate the percentage of cards in Spanish. List them by name. Spanish refer to language; Percentage refer to DIVIDE(SUM(ID where language = 'Spanish'), COUNT(id))*100 where language = 'Spanish'\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T1.language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\tcard_games", "404": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Indicates the name of all the languages into which the set whose number of cards is 309 is translated. set refer to setCode; number of cards refers to baseSetSize; baseSetsize = 309 text refers to name\r\nCREATED SQL: SELECT T1.language FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.baseSetSize = 309\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tcard_games", "405": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many Brazilian Portuguese translated sets are inside the Commander block? Commander block refer to block = 'Commander'; sets refer to setCode; Portuguese refer to language = 'Portuguese (Brasil)''setCode' refers to setCode;\r\nCREATED SQL: SELECT COUNT(T1.setCode) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.block = 'Commander' AND T2.language = 'Portuguese (Brasil)'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(T1.setCode) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode+\n\t----- bird -----\tcard_games", "406": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Lists by ID all Creature-type cards with legal status. legal status refer to status = 'legal'; Goblin-type cards refer to types = 'Creature';cards with legal status refer to status = 'legal'\r\nCREATED SQL: SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'legal' AND T1.type = 'Creature'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tcard_games", "407": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Lists all types of cards in German. German refer to language; all types refer to the union of subtypes and supertypes where subtypes is not null AND supertypes is not null = (subtypes, supertypes) is not null\r\nCREATED SQL: SELECT DISTINCT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T2.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German'\r\nEND OF CRE+\n\t----- bird -----\tcard_games", "408": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many null power cards contain info about the triggered ability null power cards refers to power is NULL; unknown power cards refers to power is null or power = '*' text refers to originalText\r\nCREATED SQL: SELECT COUNT(*) FROM cards WHERE power IS NULL OR power = '*' AND originalText IS NOT NULL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(*) FROM cards WHERE power IS NULL OR power = '*' AND originalText IS NOT NULL\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(*) FROM cards WHERE power IS NULL OR+\n\t----- bird -----\tcard_games", "409": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Indicates the number of cards with pre-modern format, ruling text \"This is a triggered mana ability\" that do not have multiple faces. do not have multiple faces refers to side IS NULL text LIKE 'This is a triggered mana ability%';\r\nCREATED SQL: SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.side IS NULL AND T2.text LIKE 'This is a triggered mana ability%' AND T1.format = 'premodern'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\tcard_games", "410": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID. available in paper refers to availability = 'paper' = 'paper'; pauper refers to format = 'pauper'\r\nCREATED SQL: SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T1.availability = 'paper' AND T2.format = 'pauper'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tcard_games", "411": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: To which artist does the card with the text \"Das perfekte Gegenmittel zu einer dichten Formation\" belong?cards refers to cards.id; the text refers to cards.flavorText; Das perfekte Gegenmittel zu einer dichten Formation refers to flavorText\r\nCREATED SQL: SELECT T2.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.flavorText = 'Das perfekte Gegenmittel zu einer dichten Formation'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tcard_games", "412": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson? in French refers to language = 'French'; black border color refers to borderColor = 'black' the name of the card refers to name; Creature refers to type = 'Creature'; normal layout refers to layout = 'normal'; black border color refers to borderColor = 'black'\r\nCREATED SQL: SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.layout = 'normal' AND T1.bordercolor = 'black' AND T2.language = 'French' AND T1.artist = 'Matthew D. Wilson'+\n\t----- bird -----\tcard_games", "413": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many cards with print rarity have ruling text printed on 10/01/2009? with print rarity refers to rarity = 'rare'; on 10/01/2009 refers to date = '2009-01-10' = '2009-10-01';\r\nCREATED SQL: SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T2.date = '2009-01-10'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\tcard_games", "414": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What language is the set of 180 cards that belongs to the Ravnica block translated into? set of 180 cards refers to baseSetSize = 180 text; Ravnica block refers to block = 'Ravnica'\r\nCREATED SQL: SELECT T1.language FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.block = 'Ravnica' AND T2.baseSetSize = 180\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\tcard_games", "415": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What percentage of cards with format commander and legal status do not have a content warning? do not have a content warning refers to hasContentWarning = 0; \r\npercentage refers to DIVIDE(COUNT(hasContentWarning = 0),COUNT(ID))*100 where \r\nformat = 'commander' AND Status = 'legal'; Status = 'legal' refers to legalities.status = 'legal'\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'legal' AND T2.format = 'commander'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tcard_games", "416": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What percentage of cards without power are in French? in French refers to language = 'French'; cards without power refers to power IS NULL OR power = '*'; \r\npercentage = DIVIDE(COUNT(language = 'French' and power is NULL or power = '*'), COUNT( power is NULL or power = '*'))*100\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.life) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.life IS NULL OR T1.life = '*'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\tcard_games", "417": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What percentage of Japanese translated sets are expansion sets? Japanese translated refers to language = 'Japanese'; expansion sets refers to type = 'expansion'; percentage = DIVIDE(COUNT(language = 'Japanese'),COUNT(language))*100 100%\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T2.type = 'expansion' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.type) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.language = 'Japanese'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tcard_games", "418": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What kind of printing is on the card that Daren Bader created? kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader' is an alternative;\r\nCREATED SQL: SELECT availability FROM cards WHERE artist = 'Daren Bader'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tcard_games", "419": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many color cards with no borders have been ranked higher than 12000 on EDHRec? color cards with no borders refers to borderColor = 'borderless'; ranked higher than 12000 on EDHRec refers to edhrecRank > 12000 = true\r\nCREATED SQL: SELECT COUNT(id) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(id) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(id) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000\r\nEND OF QUESTION\r\nCREATED SQL:+\n\t----- bird -----\tcard_games", "420": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many cards are oversized, reprinted, and printed for promotions? are oversized refers to isOversized = 1; reprinted refers to isReprint = 1; printed for promotions refers to isPromo = 1 text = 'oversized';\r\nCREATED SQL: SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tcard_games", "421": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Please list top three unknown power cards that have promotional types for arena league in alphabetical order. unknown power cards refers to power is null or power = '*'; promotional types for arena league refers to promoTypes = 'arenaleague' of cards; in alphabetical order refers to name;\r\nCREATED SQL: SELECT name FROM cards WHERE promoTypes = 'arenaleague' AND power IS NULL OR power = '*' ORDER BY name LIMIT 3\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tcard_games", "422": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What is the language of the card with the multiverse number 149934? multiverse number 149934 refers to multiverseid = 149934;cards.name refers to name\r\nCREATED SQL: SELECT language FROM foreign_data WHERE multiverseid = 149934\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\tcard_games", "423": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Please provide the ids of top three powerful pairs of Kingdom Foil and Kingdom Cards sorted by Kingdom Foil id in alphabetical order. poweful refers to cardKingdomFoilId is not null AND cardKingdomId is not null text; id refers to cards.id; Kingdom Foil id in alphabetical order refers to cardKingdomFoilId;\r\nCREATED SQL: SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId LIMIT 3\r\nEND OF QUESTION\r\nCREATED SQL: SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId+\n\t----- bird -----\tcard_games", "424": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What proportion of cards do not have a text box with a normal layout? do not have a text box refers to isTextless = 1; proportion refers to DIVIDE(COUNT(Textless = 1 and layout = 'normal'),COUNT(Textless))*100 card refers to cards\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(uuid) FROM cards\r\nEND OF QUESTION\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(uuid) FROM cards\r\nEND OF QUESTION+\n\t----- bird -----\tcard_games", "425": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What are the card numbers that don't have multiple faces on a single card and have the subtypes Angel and Wizard? don't have multiple faces on a single card side is null cards with subtypes 'Angel' and 'Wizard' are in subtypes\r\nCREATED SQL: SELECT DISTINCT number FROM cards WHERE side IS NULL AND subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\tcard_games", "426": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Please provide top three sets that don't appear in Magic: The Gathering Online, along with their names in in alphabetical order. don't appear in Magic: The Gathering Online refers to mtgoCode is NULL or mtgoCode = '''subset'; names in alphabetical order refers to sort(setCode)\r\nCREATED SQL: SELECT DISTINCT T1.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.mtgoCode IS NULL OR T1.mtgoCode = '' ORDER BY T1.setCode LIMIT 3\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\n+\n\t----- bird -----\tcard_games", "427": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What languages are available in the set known as Archenemy on the magic card market and having the code ARC? known as Archenemy refers to mcmName = 'Archenemy'; having the code ARC refers to setCode = 'ARC' a setCode = 'ARC' refers to code = 'ARC'\r\nCREATED SQL: SELECT DISTINCT T1.language FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.mcmName = 'Archenemy' AND T2.code = 'ARC'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\tcard_games", "428": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What is the name of set number 5 and its translation? set number 5 refers to id = 5 this refers to sets(id); translation refers to translation\r\nCREATED SQL: SELECT T1.name, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.id = 5\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tcard_games", "429": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What is the language and expansion type of set number 206? set number 206 refers to id = 206's setCode\r\nCREATED SQL: SELECT T1.language, T1.setCode FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.id = 206\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tcard_games", "430": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Shadowmoor block in alphabetical order.Cards refers to cards.name; ID refers to cards.id; Italian-language refers to language = 'it'; block ='shadowmoor'; in alphabetical order refers to order by setCode\r\nCREATED SQL: SELECT T1.id, T1.name FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.block ='shadowmoor' AND T2.language = 'it' ORDER BY T1.setCode LIMIT 2\r\nEND+\n\t----- bird -----\tcard_games", "431": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Which set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set ID in your response. available outside of the United States refers to isForeignOnly = 1; has foil cards refers to isFoilOnly = 1; with Japanese writing on them refers to language = 'Japanese' and isFoilOnly = 1\r\nCREATED SQL: SELECT T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.isForeignOnly = 1 AND T2.language = 'Japanese' AND T1.isFoilOnly = 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\tcard_games", "432": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Which Russian set of cards contains the most cards overall? Russian refers to language = 'Russian'; contains the most cards overall refers to MAX(baseSetSize)'setCode';\r\nCREATED SQL: SELECT T2.setCode FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.language = 'Russian' ORDER BY T2.baseSetSize DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tcard_games", "433": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What is the percentage of the set of cards that have Chinese Simplified as the language and are only available for online games? are only available for online games refers to isOnlineOnly = 1; percentage = DIVIDE(COUNT(isOnlineOnly = 1),COUNT(isOnlineOnly))*100\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards AS T INNER JOIN foreign_data AS T1 ON T1.uuid = T.uuid WHERE language = 'Chinese Simplified'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tcard_games", "434": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many sets are available just in Japanese and not in Magic: The Gathering Online? Japanese refers to language = 'Japanese'; not in Magic: The Gathering Online refers to mtgoCode is null or mtgoCode = '' = false;\r\nCREATED SQL: SELECT COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.language = 'Japanese' AND T1.mtgoCode!= ''\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\n+\n\t----- bird -----\tcard_games", "435": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many card border with black color? List out the card id. border with black color refers to borderColor = 'black' = 'Black';\r\nCREATED SQL: SELECT COUNT(id) FROM cards WHERE borderColor = 'black'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\tcard_games", "436": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many cards have frame effect as extendedart? List out the id of those cards. \r\nframe effect as extendedart refers to frameEffects = 'extendedart'; id refers to cards.id;\r\nCREATED SQL: SELECT id FROM cards WHERE frameEffects = 'extendedart'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tcard_games", "437": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Among black card borders, which card has full artwork? white card borders refers to borderColor = 'white'; has full artwork refers to isFullArt = 1cards;\r\nCREATED SQL: SELECT name FROM cards WHERE isFullArt = 1 AND borderColor = 'white'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tcard_games", "438": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Point out the language of set id \"174\"?Cards with the same name will be counted as one; language refers to language; set id refers to id;\r\nCREATED SQL: SELECT DISTINCT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.id = 174\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tcard_games", "439": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: List out the set name of the set code \"ALL\".craft set name refers to name;\r\nCREATED SQL: SELECT name FROM sets WHERE code = 'ALL'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tcard_games", "440": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Which foreign language used by \"A Pedra Fellwar\"? \"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar''s name;\r\nCREATED SQL: SELECT T1.language FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'A Pedra Fellwar'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\tcard_games", "441": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: State the set code of the set with release date of 07/13/2007?cards with release date of 07/13/2007 refers to originalReleaseDate = '2007-07-13'\r\nCREATED SQL: SELECT setCode FROM sets WHERE releaseDate = '2007-07-13'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.language = 'en' GROUP BY T1.setCode\r\nEND OF CREATION\r\nCRE+\n\t----- bird -----\tcard_games", "442": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Mention the base set size and set code of the set that was in block named \"Masques\" and \"Mirage\". the base set size refers to baseSetSize; block named \"Masques\" and \"Mirage\" refers to block = 'Masques' or block = 'Mirage'\r\nCREATED SQL: SELECT SUM(baseSetSize), code FROM sets WHERE block IN ('Masques', 'Mirage')\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\tcard_games", "443": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Give the code of sets have expansion type of 'expansion'? code of sets refers to setCode schema; expansion type refers to type = 'expansion'\r\nCREATED SQL: SELECT code FROM sets WHERE type = 'expansion'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\tcard_games", "444": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Name the foreign name of the card that has boros watermark? List out the type of this card.y name refers to name; boros watermark refers to watermark = 'boros'\r\nCREATED SQL: SELECT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'boros'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\tcard_games", "445": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What is the language and flavor text of the card that has colorpie watermark? List out the type of this card.cards that has colorpie watermark refers to watermark = 'colorpie'\r\nCREATED SQL: SELECT T2.language, T2.flavorText, T2.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'colorpie'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tcard_games", "446": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What is percentage of the cards with a converted Mana Cost of 10 in set of Abyssal Horror? set of Abyssal Horror refers to name = 'Abyssal Horror'; percentage refers to DIVIDE(COUNT(convertedManaCost = 16),COUNT(convertedManaCost))*100; convertedManaCost = 16 refers to convertedManaCost = 16\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN convertedManaCost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards WHERE name = 'Abyssal Horror'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tcard_games", "447": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Give the code of sets have expansion commander type? code of sets refers to setCode a type = 'Expansion Commander'\r\nCREATED SQL: SELECT setCode FROM sets WHERE type = 'Expansion Commander'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCRE+\n\t----- bird -----\tcard_games", "448": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Name the foreign name of the card that has abzan watermark? List out the type of this card.Cards refers to name; abzan watermark refers to watermark = 'abzan';\r\nCREATED SQL: SELECT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'abzan'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tcard_games", "449": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What is the language of the card that has azorius watermark? List out the type of this card.'s language refers to language; has azorius watermark refers to watermark = 'azorius'\r\nCREATED SQL: SELECT T1.language, T1.type FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.watermark = 'azorius'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tcard_games", "450": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Of all the cards that are designed by Aaron Miller, how many of them are incredibly powerful? designed by Aaron Miller refers to artist = 'Aaron Miller'; are icredibily powerful refers to cardKingdomFoilId = cardKingdomId AND cardKingdomId is not null\r\nCREATED SQL: SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tcard_games", "451": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many cards available in paper have a positive starting maximum hand size? available in paper refers to availability like '%paper%'; have a positive starting maximum hand size refers to hand = '+%' = true\r\nCREATED SQL: SELECT COUNT(id) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '%+%'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(id) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '%+%'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(id) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '%+%'\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tcard_games", "452": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Please list the names of the cards that have a text box. have a text box refers to isTextless = 0Cards that have a text box refers to isTextless = 0\r\nCREATED SQL: SELECT name FROM cards WHERE isTextless = 0\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.isTextless = 0\r\nEND OF QUESTION\r\nCREATED SQL: SELECT name FROM cards WHERE isTextless = 0\r\nEND OF QUESTION\r\nCREATED SQL:+\n\t----- bird -----\tcard_games", "453": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What's the unconverted mana cost of the card \"Ancestor's Chosen\"? card \"Ancestor's Chosen\" refers to name = 'Ancestor`s Chosen''s; unconverted mana cost refers to convertedManaCost\r\nCREATED SQL: SELECT T1.convertedManaCost FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\tcard_games", "454": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Among the cards with a white border color, how many of them have unknown power? unknown power refers to power = '*' or power is null cards with a white border color refers to borderColor = 'white'\r\nCREATED SQL: SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND power IS NULL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\tcard_games", "455": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Which of the cards that are a promotional painting have multiple faces on the same card? Please list their names. are a promotional painting refers to isPromo = 1; have multiple faces on the same card refers to side is not Null = 1; names refer to name\r\nCREATED SQL: SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.isPromo = 1 AND T1.side IS NOT NULL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tcard_games", "456": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What's the list of all types for the card \"Molimo, Maro-Sorcerer\"? card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes text\r\nCREATED SQL: SELECT DISTINCT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Molimo, Maro-Sorcerer'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tcard_games", "457": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Please list the websites where I can purchase the cards that have the promotional type of \"bundle\". promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls card;\r\nCREATED SQL: SELECT DISTINCT T2.purchaseUrls FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.promoTypes = 'bundle'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tcard_games", "458": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many artists have designed a card with a black border color and is available in both \"arena\" and \"mtgo\" printing type? available in both \"arena\" and \"mtgo\" refers to availability like '%arena,mtgo%'  black border color refers to borderColor = 'black'\r\nCREATED SQL: SELECT COUNT(DISTINCT T1.artist) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.mtgArenaId = T2.id WHERE T1.borderColor = 'black' AND T1.availability LIKE '%arena,mtgo%' AND T1.mtgArenaId!= '' AND T1.mtgArenaId IS NOT NULL\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(DISTINCT T+\n\t----- bird -----\tcard_games", "459": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Which card costs more converted mana, \"Serra Angel\" or \"Shrine Keeper\"? \"Serra Angel\" refers to name = 'Serra Angel'; \"Shrine Keeper\" refers to name = 'Shrine Keeper'; \r\ncard costs more converted mana when the value of convertedManaCost is greater\r\nCREATED SQL: SELECT T1.name FROM cards AS T1 INNER JOIN cards AS T2 ON T1.id = T2.id WHERE T1.name = 'Serra Angel' OR T1.name = 'Shrine Keeper' ORDER BY T1.convertedManaCost DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.name FROM cards AS T1 INNER JOIN cards AS T2 ON T1.id = T2.id WHERE T1.name = 'Serra+\n\t----- bird -----\tcard_games", "460": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Which artist designed the card whose promotional name is \"Battra, Dark Destroyer\"? promotional name is \"Battra, Dark Destroyer\" refers to flavorName = 'Battra, Dark Destroyer''s;\r\nCREATED SQL: SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tcard_games", "461": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Please list the names of the top 3 cards with the highest converted mana cost and have a 2003 card frame style. name of cards refers to name; 2003 card frame style refers to frameVersion = '2003' = '2003'\r\nCREATED SQL: SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY faceConvertedManaCost DESC LIMIT 3\r\nEND OF QUESTION\r\nCREATED SQL: SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY faceConvertedManaCost DESC LIMIT 3\r\nEND OF QUESTION\r\nCREATED SQL: SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY faceConvertedManaCost DESC LIMIT 3\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tcard_games", "462": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What's the Italian name of the set of cards with \"Ancestor's Chosen\" is in? Italian is a language which refers to language = 'Italian'; with \"Ancestor's Chosen\" in the card set refers to name = 'Ancestor's Chosen' = (SELECT name FROM cards WHERE name = 'Ancestor''s Chosen');\r\nCREATED SQL: SELECT T1.translation FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Commander 2013' AND T1.language = 'Italian' AND T1.translation = 'Ancestor''s Chosen'\r\nEND OF QUESTION\r\nCREATED BY: Daphne\r\nDATE CREATED: 2020-+\n\t----- bird -----\tcard_games", "463": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many translations are there for the set of cards with \"Angel of Mercy\" in it? set of cards with \"Angel of Mercy\" in it refers to name = 'Angel of Mercy' = (SELECT name FROM cards WHERE name = 'Angel of Mercy')\r\nCREATED SQL: SELECT COUNT(DISTINCT T1.setCode) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Angel of Mercy'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(DISTINCT T1.setCode) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code+\n\t----- bird -----\tcard_games", "464": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Please list the names of the cards in the set \"Hauptset Zehnte Edition\". card set \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'  from set_translations;\r\nCREATED SQL: SELECT T1.name FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.translation = 'Hauptset Zehnte Edition'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tcard_games", "465": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: For the set of cards with \"Ancestor's Chosen\" in it, is there a Korean version of it? set of cards with \"Ancestor's Chosen\" in it refers to name = 'Ancestor's Chosen'; Korean version refers to language = 'Korean' is NOT NULL\r\nCREATED SQL: SELECT COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Korean'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2+\n\t----- bird -----\tcard_games", "466": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Among the cards in the set \"Hauptset Zehnte Edition\", how many of them are designed by Adam Rex? card set \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'; designed by Adam refers to artist = 'Adam Rex';\r\nCREATED SQL: SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Haupt+\n\t----- bird -----\tcard_games", "467": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many cards are there in the base set of \"Hauptset Zehnte Edition\"? \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'; number of cards refers to baseSetSize the setCode = '10E'\r\nCREATED SQL: SELECT COUNT(baseSetSize) FROM sets WHERE name = 'Hauptset Zehnte Edition'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\tcard_games", "468": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What is the Simplified Chinese translation of the name of the set \"Eighth Edition\"? Eighth Edition is the name of card set which refers to name = 'Eighth Edition'; Simplified Chinese is the language; translation of the name refers to translation this name\r\nCREATED SQL: SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.name = 'Eighth Edition' AND T2.language = 'zh_cn'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\tcard_games", "469": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online? card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa's\r\nCREATED SQL: SELECT COUNT(*) FROM sets AS T1 INNER JOIN cards AS T2 ON T1.id = T2.setCode WHERE T2.name = 'Angel of Mercy' AND T1.mtgoCode IS NOT NULL\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T2.name FROM sets AS T1 INNER JOIN cards AS T2 ON T1.id = T2.setCode WHERE T2.name = 'Angel of Mercy' AND T1.mtgoCode IS+\n\t----- bird -----\tcard_games", "470": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: When was the set of cards with \"Ancestor's Chosen\" released? card set \"Ancestor's Chosen\" refers to name = 'Ancestor''s Chosen'; when released refers to releaseDate's year\r\nCREATED SQL: SELECT T1.releaseDate FROM sets AS T1 INNER JOIN cards AS T2 ON T1.id = T2.setCode WHERE T2.name = 'Ancestor''s Chosen'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tcard_games", "471": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What is the expansion type of the set \"Hauptset Zehnte Edition\"? card set \"Hauptset Zehnte Edition\" refers to translation ='Hauptset Zehnte Edition'; expansion type refers to type the set belongs to; type of set = 'type'\r\nCREATED SQL: SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.translation = 'Hauptset Zehnte Edition'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.translation = 'Hauptset Z+\n\t----- bird -----\tcard_games", "472": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Among the sets in the block \"Ice Age\", how many of them have an Italian translation? sets in the block \"Ice Age\" refers to block = 'Ice Age'; Italian translation refers to language = 'Italian' = 'it';\r\nCREATED SQL: SELECT COUNT(T1.code) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block = 'Ice Age' AND T2.language = 'it'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tcard_games", "473": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Is the set of cards with Adarkar Valkyrie only available outside the United States? card set Adarkar Valkyrie refers to name = 'Adarkar Valkyrie'; isForeignOnly = 1 means only available outside the United States; = 0 means available in United States\r\nCREATED SQL: SELECT isForeignOnly FROM sets WHERE name = 'Adarkar Valkyrie'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT SUM(isForeignOnly) FROM sets WHERE name = 'Adarkar Valkyrie'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT SUM(isForeignOnly) FROM sets WHERE name = 'Adarkar Valkyrie'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT SUM(isForeignOnly) FROM sets+\n\t----- bird -----\tcard_games", "474": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Among the sets of cards that have an Italian translation, how many of them have a base set number of under 10? Italian translation refers to language = 'Italian'; have a translation means translation is not null; base set number of under 10 refers to baseSetSize < 10cards that have an Italian translation refers to language = 'Italian';\r\nCREATED SQL: SELECT COUNT(T1.setCode) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.language = 'Italian' AND T2.baseSetSize < 10\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\tcard_games", "475": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many cards in the set Coldsnap have a black border color? card set Coldsnap refers to name = 'Coldsnap'; black border color refers to borderColor = 'black' = 'black';\r\nCREATED SQL: SELECT COUNT(id) FROM cards WHERE name = 'Coldsnap' AND borderColor = 'black'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\tcard_games", "476": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Please list the name of the cards in the set Coldsnap with the highest converted mana cost. card set Coldsnap refers to name = 'Coldsnap' = sets.name; highest converted mana cost refers to MAX(convertedManaCost)\r\nCREATED SQL: SELECT name FROM cards WHERE convertedManaCost = ( SELECT MAX(convertedManaCost) FROM cards WHERE sets.name = 'Coldsnap' )\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T2.name FROM sets AS T1 INNER JOIN cards AS T2 ON T1.id = T2.sets_id WHERE T1.name = 'Coldsnap' ORDER BY T2.convertedManaCost+\n\t----- bird -----\tcard_games", "477": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy? card set Coldsnap refers to name = 'Coldsnap'; Jeremy Jarvis, Aaron Miller or Chippy are the name of artists which refers to artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy'); = refers to id\r\nCREATED SQL: SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap'\r\nCREATED SQL: SELECT T1.artist FROM cards AS T1 INNER JOIN+\n\t----- bird -----\tcard_games", "478": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What is card number 4 in the set Coldsnap? card set Coldsnap refers to name = 'Coldsnap'; card number 4 refers to number = 4 = 4\r\nCREATED SQL: SELECT name FROM sets WHERE number = 4 AND name = 'Coldsnap'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\tcard_games", "479": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Among the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power? card set Coldsnap refers to name = 'Coldsnap'; converted mana cost higher than 5 refers to convertedManaCost > 5; unknown power refers to power = '*' or T1.power is null\r\nCREATED SQL: SELECT COUNT(T1.power) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.setCode = 'Coldsnap' AND T1.convertedManaCost > 5 AND T1.power = '*' OR T1.power IS NULL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\tcard_games", "480": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What is the Italian flavor text of the card \"Ancestor's Chosen\"? Italian refers to language = 'Italian'; flavor text refers to flavorText; \"Ancestor''s Chosen\" refers to name = 'Ancestor''s Chosen' = 'Ancestor''s Chosen'\r\nCREATED SQL: SELECT T1.flavorText FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Ancestor''s Chosen' AND T1.language = 'Italian'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\tcard_games", "481": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Please list all the foreign languages in which the card \"Ancestor's Chosen\" has a flavor text. \"Ancestor''s Chosen\" refers to name = 'Ancestor''s Chosen'; has a flavor text refers to flavorText is not null's\r\nCREATED SQL: SELECT DISTINCT T1.language FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Ancestor''s Chosen' AND T1.flavorText IS NOT NULL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tcard_games", "482": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What's the German type of the card \"Ancestor's Chosen\"? German refers to language = 'German'; \"Ancestor's Chosen\" refers to name = 'Ancestor''s Chosen' = name\r\nCREATED SQL: SELECT T1.type FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Ancestor''s Chosen' AND T1.language = 'German'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\tcard_games", "483": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Please list the Italian text ruling of all the cards in the set Coldsnap. card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian''s language;\r\nCREATED SQL: SELECT T1.text FROM rulings AS T1 INNER JOIN set_translations AS T2 ON T1.uuid = T2.setcode INNER JOIN cards AS T3 ON T1.uuid = T3.uuid WHERE T3.name = 'Coldsnap' AND T2.language = 'Italian'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\tcard_games", "484": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost. card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'brewer's keyword text; highest converted mana cost refers to MAX(convertedManaCost)\r\nCREATED SQL: SELECT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.language = 'Italian' AND T1.name = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tcard_games", "485": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: When was the ruling for the card 'Reminisce' created? Reminisce refers to name = 'Reminisce'; when created is the date = MAX(date);\r\nCREATED SQL: SELECT MAX(T2.date) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Reminisce'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\tcard_games", "486": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap? converted mana cost of 7 refers to convertedManaCost = 7; card set Coldsnap refers to name = 'Coldsnap'; percentage = DIVIDE(SUM(convertedManaCost = 7), SUM(convertedManaCost))*100 the SUM(convertedManaCost) = 7 refers to SUM(convertedManaCost where convertedManaCost = 7);\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(uuid) FROM cards WHERE name = 'Coldsnap'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tcard_games", "487": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What is the percentage of incredibly powerful cards in the set Coldsnap? card set Coldsnap refers to name = 'Coldsnap'; foil is incredibly powerful refers to cardKingdomFoilId = cardKingdomId AND cardKingdomId is not null; the percentage of incredibly powerful cards in the set refers to DIVIDE(SUM(incredibly powerful), SUM(name = 'Coldsnap'))*100%\r\nCREATED SQL: SELECT CAST(SUM(T1.cardKingdomFoilId = T1.cardKingdomId AND T1.cardKingdomId IS NOT NULL) AS REAL) * 100 / COUNT(T1.name) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.setCode WHERE T2.name = 'Coldsnap'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tcard_games", "488": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What's the code for the set which was released on 2017/7/14? released on 2017/7/14 refers to releaseDate = '2017-07-14' = 2017/7/14;\r\nCREATED SQL: SELECT code FROM sets WHERE releaseDate = '2017-07-14'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT code FROM sets WHERE releaseDate = '2017-07-14'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT code FROM sets WHERE releaseDate = '2017-07-14'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT code FROM sets WHERE releaseDate = '2017-07-14+\n\t----- bird -----\tcard_games", "489": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: List the keyrune code for the set whose code is 'PKHC'. keyrune code refers to keyruneCode's value; code = 'PKHC'\r\nCREATED SQL: SELECT keyruneCode FROM sets WHERE code = 'PKHC'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\tcard_games", "490": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: For the set which had 'SS2' as the code, what is its magic card market id? magic card market id refers to mcmId 2\r\nCREATED SQL: SELECT mcmId FROM sets WHERE code = 'SS2'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT mcmId FROM sets WHERE code = 'SS2'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT mcmId FROM sets WHERE code = 'SS2'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT mcmId FROM sets WHERE code = 'SS2'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT mcmId FROM sets WHERE code =+\n\t----- bird -----\tcard_games", "491": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What's the magic card market name for the set which was released on 2017/6/9? magic card market name refers to mcmNamecraft; released on 2017/6/9 refers to releaseDate = '2017-06-09';\r\nCREATED SQL: SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tcard_games", "492": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: For the set \"From the Vault: Lore\", what is its expansion type? set \"From the Vault refers to name which contains 'From the Vault: Lore'; expansion type refers to type 2;\r\nCREATED SQL: SELECT type FROM sets WHERE name LIKE 'From the Vault: Lore'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL+\n\t----- bird -----\tcard_games", "493": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: For the set \"Commander 2014 Oversized\", give its parent code. the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized'; = parentCode;\r\nCREATED SQL: SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.parentCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Commander 2014 Oversized'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.parentCode FROM sets AS T1 INNER JOIN set_translations AS T2+\n\t----- bird -----\tcard_games", "494": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: For all cards illustrated by Jim Pavelec. and describe the text of the ruling of these cards. Do these cards have missing or degraded properties and values. all cards illustrated by Jim Pavelec refers to artist = 'Jim Pavelec'; the text of the ruling refers to text; cards have missing or degraded properties and values if hasContentWarning = 1 else it doesn't have; hasContentWarning = 1 refers to hasContentWarning\r\nCREATED SQL: SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Jim Pavelec' AND T1.hasContentWarning = 1\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Jim Pave+\n\t----- bird -----\tcard_games", "495": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What was the release date for the set which card \"Evacuation\" in it? \"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDateCards\r\nCREATED SQL: SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Evacuation'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\tcard_games", "496": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What is the number of cards are there in the set of \"Rinascita di Alara\"? number of cards refers to baseSetSize; set of \"Rinascita di Alara\" refers to translation = 'Rinascita di Alara' from set_translations;\r\nCREATED SQL: SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.translation = 'Rinascita di Alara'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.translation = 'Rinascita di Alara+\n\t----- bird -----\tcard_games", "497": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: List the expansion type of the set \"Huiti\u00e8me \u00e9dition\". the set \"Huiti\u00e8me \u00e9dition\" refers to translation = 'Huiti\u00e8me \u00e9dition'; expansion type refers to type the set is;\r\nCREATED SQL: SELECT T2.type FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.translation = 'Huiti\u00e8me \u00e9dition'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED+\n\t----- bird -----\tcard_games", "498": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What's the French name of the set of cards with \"Tendo Ice Bridge\" is in? French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation a set of cards refers to sets\r\nCREATED SQL: SELECT T1.name FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode INNER JOIN cards AS T3 ON T1.id = T3.setCode WHERE T3.name = 'Tendo Ice Bridge' AND T2.language = 'French'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\tcard_games", "499": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many translations of the name of the set \"Salvat 2011\"? translations of the name refers to translation; translation is not NULL; set \"Salvat 2011\" refers to name = 'Salvat 2011' of sets;\r\nCREATED SQL: SELECT COUNT(*) FROM set_translations WHERE setCode = 'Salvat 2011' AND translation IS NOT NULL\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(*) FROM set_translations WHERE setCode = 'Salvat 2011'\r\nEND OF CREATION OF SQL\r\nCREATED SQL: SELECT COUNT(*) FROM set_translations WHERE setCode = 'Salvat 2011' AND translation IS NOT NULL\r\nEND OF CREATION OF SQL\r\nEND+\n\t----- bird -----\tcard_games", "500": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Tell the Japanese name of the set which card \"Fellwar Stone\" is in it. Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone''set which card \"Fellwar Stone\" is in it' refers to code\r\nCREATED SQL: SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1+\n\t----- bird -----\tcard_games", "501": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Which card name in the set 'Journey into Nyx Hero's Path' has the highest converted mana cost. set 'Journey into Nyx Hero's Path' refers to name = 'Journey into Nyx Hero''s Path'  highest converted mana cost refers to max(convertedManaCost)\r\nCREATED SQL: SELECT name FROM cards WHERE setCode = 'JOUR' ORDER BY convertedManaCost DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tcard_games", "502": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What is the release date for the set \"Ola de fr\u00edo\"? release date is the date of card set being released; set \"Ola de fr\u00edo\" refers to translation = 'Ola de fr\u00edo'  from set_translations;\r\nCREATED SQL: SELECT T2.releaseDate FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.translation = 'Ola de fr\u00edo'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\tcard_games", "503": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What was the expansion type for the set which card \"Samite Pilgrim\" in it? expansion type refers to type; card \"Samite Pilgrim\" refers to name = 'Samite Pilgrim' = name;\r\nCREATED SQL: SELECT T1.type FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode WHERE T2.name = 'Samite Pilgrim'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tcard_games", "504": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many cards are there in the set 'World Championship Decks 2004' with the converted mana cost as '3'. the set 'World Championship Decks 2004' refers to name = 'World Championship Decks 2004''setCode'; converted mana cost as '3' refers to convertedManaCost = 3\r\nCREATED SQL: SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'World Championship Decks 2004' AND T1.convertedManaCost = 3\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2+\n\t----- bird -----\tcard_games", "505": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Show the Simplified Chinese translation of the name of the set \"Mirrodin\"? Simplified Chinese translation refers to language = 'Chinese Simplified'; name of the set \"Mirrodin\" refers to name = 'Mirrodin' = 'Mirrodin'\r\nCREATED SQL: SELECT T1.translation FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Mirrodin' AND T1.language = 'Chinese Simplified'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\tcard_games", "506": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: For all the set of cards that has Japanese translation, what is the percentage of them are only available in non-foil? Japanese translation refers to language = 'Japanese'; in non-foil refers to isNonFoilOnly = 1; percentage of Japanese non foil in Japanese cards refers to DIVIDE(SUM(isNonFoilOnly = 1), SUM(language = 'Japanese'))*100  where language = 'Japanese';\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM sets WHERE language = 'Japanese'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\tcard_games", "507": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: For all the set of cards that has Brazil Portuguese translation, what is the percentage of them are only available online? Brazil Portuguese translation refers to language = 'Portuguese (Brazil)'; only available online refers to isOnlineOnly = 1; percentage of online only Brazil Portuguese in all Brazil Portuguese cards refers to DIVIDE(SUM(isOnlineOnly = 1), SUM(language = 'Portuguese (Brazil)))*100%\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T2.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.language = 'Portuguese (Brazil)' AND T2.translation IS NOT NULL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tcard_games", "508": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What are the available printing types of the cards that doesn't have a text box created by Aleksi Briclot? created by Aleksi Briclot refers to artist = 'Aleksi Briclot'; doesn't have a text box refers to isTextless = 1; available printing types refers to availability = 'Available';\r\nCREATED SQL: SELECT DISTINCT T1.availability FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.artist = 'Aleksi Briclot' AND T1.isTextless = 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\tcard_games", "509": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What is the unique id of the set that has the highest number of cards? the highest number of cards refers to MAX(baseSetSize); unique id refers to idcards;\r\nCREATED SQL: SELECT id FROM sets ORDER BY totalSetSize DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\tcard_games", "510": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Among the cards that doesn't have multiple faces on the same card, who is the illustrator of the card art that has the highest cost of converted mana? doesn't have multiple faces refers to side IS NULL; illustrator refers to artist = 'artist'; highest cost of converted mana refers to MAX(faceConvertedManaCost)\r\nCREATED SQL: SELECT T2.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.side IS NULL ORDER BY T2.faceConvertedManaCost DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T2.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.side+\n\t----- bird -----\tcard_games", "511": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What is the most common visual frame effects among the incredibly powerful foils? when both cardKingdomFoilId and cardKingdomId are not null, this foil is incredibly powerful; most common visual frame effects refers to MAX(frameEffects)'s count\r\nCREATED SQL: SELECT T1.frameEffects FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL GROUP BY T1.frameEffects ORDER BY COUNT(T1.frameEffects) DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1+\n\t----- bird -----\tcard_games", "512": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many cards with unknown power that can't be found in foil is in duel deck A? unknown power refers to power IS NULL or power = '*'; can't be found in foil refers to hasFoil = 0; duel deck A refers to duelDeck = 'a' text;\r\nCREATED SQL: SELECT COUNT(id) FROM cards WHERE power IS NULL OR power = '*' AND hasFoil = 0 AND duelDeck = 'a'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tcard_games", "513": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Among the sets whose expansion type is Commander, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set. expansion type refers to type where type = 'commander'; totalSetSize: The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications; highest total number of cards refers to MAX(totalSetSize) where type = 'commander'; id of the set refers to id;\r\nCREATED SQL: SELECT T1.id FROM sets AS T1 INNER JOIN sets AS T2 ON T1.parentCode = T2.code WHERE T1.type = 'commander' AND T2.type = 'expansion' ORDER BY T1.totalSetSize DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\tcard_games", "514": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: In duels, what are the top 10 cards with the highest uncoverted mana cost? duels refer to format = 'duel'; the highest uncoverted mana cost refers to MAX(manaCost) = MAX(convertedManaCost)\r\nCREATED SQL: SELECT name FROM cards WHERE format = 'duel' ORDER BY convertedManaCost DESC LIMIT 10\r\nEND OF QUESTION\r\nCREATED SQL: SELECT name FROM cards WHERE format = 'duel' ORDER BY convertedManaCost DESC LIMIT 10\r\nEND OF CREATION\r\nCREATED SQL: SELECT name FROM cards WHERE format = 'duel' ORDER BY convertedManaCost DESC LIMIT 10\r\nEND OF CREATION\r\nCREATED SQL:+\n\t----- bird -----\tcard_games", "515": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: When was the oldest mythic card released and what are its legal play formats? the oldest card refers to MIN(originalReleaseDate); mythic card refers to rarity ='mythic'; legal play refers to status = 'legal'; play format refers to format = 'Standard', 'Modern', 'Legacy', 'Commander', 'Vintage'\r\nCREATED SQL: SELECT T1.originalReleaseDate, T1.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.id = T2.uuid WHERE T1.rarity ='mythic' AND T2.status = 'legal'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tcard_games", "516": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many cards did Volkan Ba\u00c7\u00b5a illustrated whose foreign language is in French? Volkan Ba\u00c7\u00b5a refers to artist = 'Volkan Baga'; foreign language is in French refers to language = 'French' text is not null;\r\nCREATED SQL: SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Volkan Baga' AND T2.language = 'French' AND T2.text IS NOT NULL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tcard_games", "517": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: How many rare enchantment Abundance cards are there whose play format status are all legal? rare refers to rarity = 'rare'; enchantment card refers to types = 'Enchantment'; Abundance cards refers to name = 'Abundance'; format status are all legal refers to status = 'Legal' = 'Legal';\r\nCREATED SQL: SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.id = T2.uuid WHERE T1.rarity = 'rare' AND T1.type = 'Enchantment' AND T1.name = 'Abundance' AND T2.status = 'Legal'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tcard_games", "518": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Which of the play formats has the highest number of banned status? Indicate the play format and the name of the card. play format refers to format uuid; banned status refers to status = 'banned'; the highest number of banned status refers to MAX(status = 'banned')'s count\r\nCREATED SQL: SELECT T1.format, T2.name FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.status = 'banned' GROUP BY T1.format, T2.name ORDER BY COUNT(T1.status) DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\tcard_games", "519": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What is the language of the \"Battlebond\" set? \"Battlebond\" set refers to name = 'Battlebond' = name; language refers to language\r\nCREATED SQL: SELECT language FROM set_translations WHERE setCode = 'BON'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tcard_games", "520": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Who is the illustrator that illustrated the least amount of cards? List the format of play of the cards that he/she illustrated. format of the cards refers to format; illustrator refers to artist; the least amount of cards refers to MIN(artist) text;\r\nCREATED SQL: SELECT T1.artist, T1.format FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid GROUP BY T1.artist, T1.format ORDER BY COUNT(T1.format) ASC LIMIT 1\r\nEND OF QUESTION\r\nCREATED BY: Tien Nguyen\r\nDATE: 2020-03-30\r\nCREATED BY: Tien Nguyen\r\nDATE: 2020-03-30\r\nCREATED BY: T+\n\t----- bird -----\tcard_games", "521": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Among the cards whose version of frame style is 1997, what is the status of the card illustrated by D. Alexander Gregory in legacy play format that has sensitive content or Wizards of the Coast? version of frame style is 1997 refers to frameVersion = '1997'; illustrated by D. Alexander Gregory refers to artist = 'D. Alexander Gregory'; sensitive content refers to hasContentWarning = 1; legacy play format refers to format = 'legacy'; status of the card refers to status; Wizards of the Coast refers to name = 'Wizards of the Coast'\r\nCREATED SQL: SELECT T1.status FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.id WHERE T1.format = 'legacy' AND T2.frameVersion = '1997' AND T2.hasContentWarning = 1 AND T2.name = 'Wizards of the Coast'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\tcard_games", "522": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format. ranked 1st on EDHRec refers to edhrecRank = 1; banned refers to status = 'banned'; play format refers to format; cards name refers to name = 'name'\r\nCREATED SQL: SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'banned'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCRE+\n\t----- bird -----\tcard_games", "523": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What is the annual average number of sets that were released between 1/1/2012 to 12/31/2015? Indicate the common langugage of the card. AVG(id); releaseDate BETWEEN 1/1/2012 AND 12/31/2015; the common language refers to MAX(COUNT(language)) text where language is not NULL\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN strftime('%Y', T2.releaseDate) BETWEEN '2012' AND '2015' THEN 1 ELSE 0 END) AS REAL) / COUNT(T2.releaseDate) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.language IS NOT NULL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tcard_games", "524": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: List the artists who illustrated cards with black borders which are available only in arena. black borders refers to BorderColor = 'black'; available only in arena refers to availability = 'arena' = 1;\r\nCREATED SQL: SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.setCode WHERE T1.borderColor = 'black' AND T2.isOnlineOnly = 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCRE+\n\t----- bird -----\tcard_games", "525": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Find the uuid of cards in which the old school format is restricted or banned. old school format refers to format = 'oldschool'; restricted or banned refers to status = 'banned' or'restricted' 2019-06-06\r\nCREATED SQL: SELECT uuid FROM legalities WHERE status IN ('banned','restricted') AND format = 'oldschool'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tcard_games", "526": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Among the card designed by Matthew D. Wilson, how many are available only in the paper? card designed by Matthew D. Wilson refers to artist = 'Matthew D. Wilson'; available only in the paper refers to availability = 'paper' = 1;\r\nCREATED SQL: SELECT COUNT(id) FROM cards WHERE availability = 'paper' AND artist = 'Matthew D. Wilson'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tcard_games", "527": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates. rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date); text = 'The card named and designed by Kev Walker'\r\nCREATED SQL: SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION+\n\t----- bird -----\tcard_games", "528": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: List the names of all the cards in the set Hour of Devastation and find the formats in which these cards are legal. the set Hour of Devastation refers to set.name = 'Hour of Devastation'; names of all the cards in the set refers to cards.name; legal cards refers to status = 'legal'; the formats refers to format\r\nCREATED SQL: SELECT T1.name, T3.format FROM sets AS T1 INNER JOIN legalities AS T2 ON T1.id = T2.uuid INNER JOIN cards AS T3 ON T3.uuid = T2.uuid WHERE T1.name = 'Hour of Devastation'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCRE+\n\t----- bird -----\tcard_games", "529": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: Find and list the names of sets which doesn't have Japanese translation but have Korean translation. names of sets refers to name; doesn't have Japanese translation refers to language not like '%Japanese%'; have Korean translation refers to language = 'Korean''setCode'\r\nCREATED SQL: SELECT T1.name FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.language = 'Korean' AND T2.language!= 'Japanese'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\tcard_games", "530": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE cards (\r\nid integer,\r\nartist text,\r\nasciiName text,\r\navailability text,\r\nborderColor text,\r\ncardKingdomFoilId text,\r\ncardKingdomId text,\r\ncolorIdentity text,\r\ncolorIndicator text,\r\ncolors text,\r\nconvertedManaCost real,\r\nduelDeck text,\r\nedhrecRank integer,\r\nfaceConvertedManaCost real,\r\nfaceName text,\r\nflavorName text,\r\nflavorText text,\r\nframeEffects text,\r\nframeVersion text,\r\nhand text,\r\nhasAlternativeDeckLimit integer,\r\nhasContentWarning integer,\r\nhasFoil integer,\r\nhasNonFoil integer,\r\nisAlternative integer,\r\nisFullArt integer,\r\nisOnlineOnly integer,\r\nisOversized integer,\r\nisPromo integer,\r\nisReprint integer,\r\nisReserved integer,\r\nisStarter integer,\r\nisStorySpotlight integer,\r\nisTextless integer,\r\nisTimeshifted integer,\r\nkeywords text,\r\nlayout text,\r\nleadershipSkills text,\r\nlife text,\r\nloyalty text,\r\nmanaCost text,\r\nmcmId text,\r\nmcmMetaId text,\r\nmtgArenaId text,\r\nmtgjsonV4Id text,\r\nmtgoFoilId text,\r\nmtgoId text,\r\nmultiverseId text,\r\nname text,\r\nnumber text,\r\noriginalReleaseDate text,\r\noriginalText text,\r\noriginalType text,\r\notherFaceIds text,\r\npower text,\r\nprintings text,\r\npromoTypes text,\r\npurchaseUrls text,\r\nrarity text,\r\nscryfallId text,\r\nscryfallIllustrationId text,\r\nscryfallOracleId text,\r\nsetCode text,\r\nside text,\r\nsubtypes text,\r\nsupertypes text,\r\ntcgplayerProductId text,\r\ntext text,\r\ntoughness text,\r\ntype text,\r\ntypes text,\r\nuuid text,\r\nvariations text,\r\nwatermark text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE foreign_data (\r\nid integer,\r\nflavorText text,\r\nlanguage text,\r\nmultiverseid integer,\r\nname text,\r\ntext text,\r\ntype text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE legalities (\r\nid integer,\r\nformat text,\r\nstatus text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\nCREATE TABLE sets (\r\nid integer,\r\nbaseSetSize integer,\r\nblock text,\r\nbooster text,\r\ncode text,\r\nisFoilOnly integer,\r\nisForeignOnly integer,\r\nisNonFoilOnly integer,\r\nisOnlineOnly integer,\r\nisPartialPreview integer,\r\nkeyruneCode text,\r\nmcmId integer,\r\nmcmIdExtras integer,\r\nmcmName text,\r\nmtgoCode text,\r\nname text,\r\nparentCode text,\r\nreleaseDate date,\r\ntcgplayerGroupId integer,\r\ntotalSetSize integer,\r\ntype text,\r\nPRIMARY KEY (id),\r\n);\r\nCREATE TABLE set_translations (\r\nid integer,\r\nlanguage text,\r\nsetCode text,\r\ntranslation text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (setCode) REFERENCES sets(code),\r\n);\r\nCREATE TABLE rulings (\r\nid integer,\r\ndate date,\r\ntext text,\r\nuuid text,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (uuid) REFERENCES cards(uuid),\r\n);\r\n---------------------\r\nQUESTION: List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any. frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'banned''status ='restricted';\r\nCREATED SQL: SELECT DISTINCT T1.frameVersion, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams' AND T2.status = 'banned' OR T2.status ='restricted'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED SQL\r\nCREATED+\n\t----- bird -----\tcard_games", "531": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE badges (\r\nId integer,\r\nUserId integer,\r\nName text,\r\nDate datetime,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE comments (\r\nId integer,\r\nPostId integer,\r\nScore integer,\r\nText text,\r\nCreationDate datetime,\r\nUserId integer,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postHistory (\r\nId integer,\r\nPostHistoryTypeId integer,\r\nPostId integer,\r\nRevisionGUID text,\r\nCreationDate datetime,\r\nUserId integer,\r\nText text,\r\nComment text,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postLinks (\r\nId integer,\r\nCreationDate datetime,\r\nPostId integer,\r\nRelatedPostId integer,\r\nLinkTypeId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (RelatedPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE posts (\r\nId integer,\r\nPostTypeId integer,\r\nAcceptedAnswerId integer,\r\nCreaionDate datetime,\r\nScore integer,\r\nViewCount integer,\r\nBody text,\r\nOwnerUserId integer,\r\nLasActivityDate datetime,\r\nTitle text,\r\nTags text,\r\nAnswerCount integer,\r\nCommentCount integer,\r\nFavoriteCount integer,\r\nLastEditorUserId integer,\r\nLastEditDate datetime,\r\nCommunityOwnedDate datetime,\r\nParentId integer,\r\nClosedDate datetime,\r\nOwnerDisplayName text,\r\nLastEditorDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (OwnerUserId) REFERENCES users(Id),\r\nFOREIGN KEY (LastEditorUserId) REFERENCES users(Id),\r\nFOREIGN KEY (ParentId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE tags (\r\nId integer,\r\nTagName text,\r\nCount integer,\r\nExcerptPostId integer,\r\nWikiPostId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE users (\r\nId integer,\r\nReputation integer,\r\nCreationDate datetime,\r\nDisplayName text,\r\nLastAccessDate datetime,\r\nWebsiteUrl text,\r\nLocation text,\r\nAboutMe text,\r\nViews integer,\r\nUpVotes integer,\r\nDownVotes integer,\r\nAccountId integer,\r\nAge integer,\r\nProfileImageUrl text,\r\nPRIMARY KEY (Id),\r\n);\r\nCREATE TABLE votes (\r\nId integer,\r\nPostId integer,\r\nVoteTypeId integer,\r\nCreationDate date,\r\nUserId integer,\r\nBountyAmount integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\n---------------------\r\nQUESTION: Which user has a higher reputation, Harlan or Jarrod Dixon? \"Harlan\" and \"Jarrod Dixon\" are both DisplayName; highest reputation refers to Max(Reputation) the user has;\r\nCREATED SQL: SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Body LIKE '%Harlan%' OR T2.Body LIKE '%Jarrod Dixon%' ORDER BY T1.Reputation DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T+\n\t----- bird -----\tcodebase_community", "532": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE badges (\r\nId integer,\r\nUserId integer,\r\nName text,\r\nDate datetime,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE comments (\r\nId integer,\r\nPostId integer,\r\nScore integer,\r\nText text,\r\nCreationDate datetime,\r\nUserId integer,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postHistory (\r\nId integer,\r\nPostHistoryTypeId integer,\r\nPostId integer,\r\nRevisionGUID text,\r\nCreationDate datetime,\r\nUserId integer,\r\nText text,\r\nComment text,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postLinks (\r\nId integer,\r\nCreationDate datetime,\r\nPostId integer,\r\nRelatedPostId integer,\r\nLinkTypeId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (RelatedPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE posts (\r\nId integer,\r\nPostTypeId integer,\r\nAcceptedAnswerId integer,\r\nCreaionDate datetime,\r\nScore integer,\r\nViewCount integer,\r\nBody text,\r\nOwnerUserId integer,\r\nLasActivityDate datetime,\r\nTitle text,\r\nTags text,\r\nAnswerCount integer,\r\nCommentCount integer,\r\nFavoriteCount integer,\r\nLastEditorUserId integer,\r\nLastEditDate datetime,\r\nCommunityOwnedDate datetime,\r\nParentId integer,\r\nClosedDate datetime,\r\nOwnerDisplayName text,\r\nLastEditorDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (OwnerUserId) REFERENCES users(Id),\r\nFOREIGN KEY (LastEditorUserId) REFERENCES users(Id),\r\nFOREIGN KEY (ParentId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE tags (\r\nId integer,\r\nTagName text,\r\nCount integer,\r\nExcerptPostId integer,\r\nWikiPostId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE users (\r\nId integer,\r\nReputation integer,\r\nCreationDate datetime,\r\nDisplayName text,\r\nLastAccessDate datetime,\r\nWebsiteUrl text,\r\nLocation text,\r\nAboutMe text,\r\nViews integer,\r\nUpVotes integer,\r\nDownVotes integer,\r\nAccountId integer,\r\nAge integer,\r\nProfileImageUrl text,\r\nPRIMARY KEY (Id),\r\n);\r\nCREATE TABLE votes (\r\nId integer,\r\nPostId integer,\r\nVoteTypeId integer,\r\nCreationDate date,\r\nUserId integer,\r\nBountyAmount integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\n---------------------\r\nQUESTION: Please list the display names of all the users whose accounts were created in the year 2014. account created in the year 2014 refers to year(CreationDate) = 2014 the year(CreationDate) refers to the year of CreationDate;\r\nCREATED SQL: SELECT DisplayName FROM users WHERE strftime('%Y', CreationDate) = '2014'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\tcodebase_community", "533": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE badges (\r\nId integer,\r\nUserId integer,\r\nName text,\r\nDate datetime,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE comments (\r\nId integer,\r\nPostId integer,\r\nScore integer,\r\nText text,\r\nCreationDate datetime,\r\nUserId integer,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postHistory (\r\nId integer,\r\nPostHistoryTypeId integer,\r\nPostId integer,\r\nRevisionGUID text,\r\nCreationDate datetime,\r\nUserId integer,\r\nText text,\r\nComment text,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postLinks (\r\nId integer,\r\nCreationDate datetime,\r\nPostId integer,\r\nRelatedPostId integer,\r\nLinkTypeId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (RelatedPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE posts (\r\nId integer,\r\nPostTypeId integer,\r\nAcceptedAnswerId integer,\r\nCreaionDate datetime,\r\nScore integer,\r\nViewCount integer,\r\nBody text,\r\nOwnerUserId integer,\r\nLasActivityDate datetime,\r\nTitle text,\r\nTags text,\r\nAnswerCount integer,\r\nCommentCount integer,\r\nFavoriteCount integer,\r\nLastEditorUserId integer,\r\nLastEditDate datetime,\r\nCommunityOwnedDate datetime,\r\nParentId integer,\r\nClosedDate datetime,\r\nOwnerDisplayName text,\r\nLastEditorDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (OwnerUserId) REFERENCES users(Id),\r\nFOREIGN KEY (LastEditorUserId) REFERENCES users(Id),\r\nFOREIGN KEY (ParentId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE tags (\r\nId integer,\r\nTagName text,\r\nCount integer,\r\nExcerptPostId integer,\r\nWikiPostId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE users (\r\nId integer,\r\nReputation integer,\r\nCreationDate datetime,\r\nDisplayName text,\r\nLastAccessDate datetime,\r\nWebsiteUrl text,\r\nLocation text,\r\nAboutMe text,\r\nViews integer,\r\nUpVotes integer,\r\nDownVotes integer,\r\nAccountId integer,\r\nAge integer,\r\nProfileImageUrl text,\r\nPRIMARY KEY (Id),\r\n);\r\nCREATE TABLE votes (\r\nId integer,\r\nPostId integer,\r\nVoteTypeId integer,\r\nCreationDate date,\r\nUserId integer,\r\nBountyAmount integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\n---------------------\r\nQUESTION: How many users last accessed the website after 2014/9/1? last accessed after 2014/9/1 refers to LastAccessDate > '2014-09-01 00:00:00' the website refers to WebsiteUrl\r\nCREATED SQL: SELECT COUNT(Id) FROM users WHERE WebsiteUrl IS NOT NULL AND LastAccessDate > '2014-09-01 00:00:00'\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(Id) FROM users WHERE WebsiteUrl IS NOT NULL AND LastAccessDate > '2014-09-01 00:00:00'\r\nEND OF CREATION\r\nEND OF DATABASE SCHEMA\r\nCREATED SQL: SELECT COUNT(Id)+\n\t----- bird -----\tcodebase_community", "534": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE badges (\r\nId integer,\r\nUserId integer,\r\nName text,\r\nDate datetime,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE comments (\r\nId integer,\r\nPostId integer,\r\nScore integer,\r\nText text,\r\nCreationDate datetime,\r\nUserId integer,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postHistory (\r\nId integer,\r\nPostHistoryTypeId integer,\r\nPostId integer,\r\nRevisionGUID text,\r\nCreationDate datetime,\r\nUserId integer,\r\nText text,\r\nComment text,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postLinks (\r\nId integer,\r\nCreationDate datetime,\r\nPostId integer,\r\nRelatedPostId integer,\r\nLinkTypeId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (RelatedPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE posts (\r\nId integer,\r\nPostTypeId integer,\r\nAcceptedAnswerId integer,\r\nCreaionDate datetime,\r\nScore integer,\r\nViewCount integer,\r\nBody text,\r\nOwnerUserId integer,\r\nLasActivityDate datetime,\r\nTitle text,\r\nTags text,\r\nAnswerCount integer,\r\nCommentCount integer,\r\nFavoriteCount integer,\r\nLastEditorUserId integer,\r\nLastEditDate datetime,\r\nCommunityOwnedDate datetime,\r\nParentId integer,\r\nClosedDate datetime,\r\nOwnerDisplayName text,\r\nLastEditorDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (OwnerUserId) REFERENCES users(Id),\r\nFOREIGN KEY (LastEditorUserId) REFERENCES users(Id),\r\nFOREIGN KEY (ParentId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE tags (\r\nId integer,\r\nTagName text,\r\nCount integer,\r\nExcerptPostId integer,\r\nWikiPostId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE users (\r\nId integer,\r\nReputation integer,\r\nCreationDate datetime,\r\nDisplayName text,\r\nLastAccessDate datetime,\r\nWebsiteUrl text,\r\nLocation text,\r\nAboutMe text,\r\nViews integer,\r\nUpVotes integer,\r\nDownVotes integer,\r\nAccountId integer,\r\nAge integer,\r\nProfileImageUrl text,\r\nPRIMARY KEY (Id),\r\n);\r\nCREATE TABLE votes (\r\nId integer,\r\nPostId integer,\r\nVoteTypeId integer,\r\nCreationDate date,\r\nUserId integer,\r\nBountyAmount integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\n---------------------\r\nQUESTION: What is the display name of the user who has the most number of views? user who has the most number of view refers to Max(Views) the user refers to DisplayName\r\nCREATED SQL: SELECT DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tcodebase_community", "535": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE badges (\r\nId integer,\r\nUserId integer,\r\nName text,\r\nDate datetime,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE comments (\r\nId integer,\r\nPostId integer,\r\nScore integer,\r\nText text,\r\nCreationDate datetime,\r\nUserId integer,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postHistory (\r\nId integer,\r\nPostHistoryTypeId integer,\r\nPostId integer,\r\nRevisionGUID text,\r\nCreationDate datetime,\r\nUserId integer,\r\nText text,\r\nComment text,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postLinks (\r\nId integer,\r\nCreationDate datetime,\r\nPostId integer,\r\nRelatedPostId integer,\r\nLinkTypeId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (RelatedPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE posts (\r\nId integer,\r\nPostTypeId integer,\r\nAcceptedAnswerId integer,\r\nCreaionDate datetime,\r\nScore integer,\r\nViewCount integer,\r\nBody text,\r\nOwnerUserId integer,\r\nLasActivityDate datetime,\r\nTitle text,\r\nTags text,\r\nAnswerCount integer,\r\nCommentCount integer,\r\nFavoriteCount integer,\r\nLastEditorUserId integer,\r\nLastEditDate datetime,\r\nCommunityOwnedDate datetime,\r\nParentId integer,\r\nClosedDate datetime,\r\nOwnerDisplayName text,\r\nLastEditorDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (OwnerUserId) REFERENCES users(Id),\r\nFOREIGN KEY (LastEditorUserId) REFERENCES users(Id),\r\nFOREIGN KEY (ParentId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE tags (\r\nId integer,\r\nTagName text,\r\nCount integer,\r\nExcerptPostId integer,\r\nWikiPostId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE users (\r\nId integer,\r\nReputation integer,\r\nCreationDate datetime,\r\nDisplayName text,\r\nLastAccessDate datetime,\r\nWebsiteUrl text,\r\nLocation text,\r\nAboutMe text,\r\nViews integer,\r\nUpVotes integer,\r\nDownVotes integer,\r\nAccountId integer,\r\nAge integer,\r\nProfileImageUrl text,\r\nPRIMARY KEY (Id),\r\n);\r\nCREATE TABLE votes (\r\nId integer,\r\nPostId integer,\r\nVoteTypeId integer,\r\nCreationDate date,\r\nUserId integer,\r\nBountyAmount integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\n---------------------\r\nQUESTION: Among the users who have more than 100 upvotes, how many of them have more then 1 downvotes? more than 100 upvotes refers to Upvotes > 100; more than 1 downvotes refers to Downvotes > 1 the user has\r\nCREATED SQL: SELECT COUNT(Id) FROM users WHERE UpVotes > 100 AND DownVotes > 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\tcodebase_community", "536": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE badges (\r\nId integer,\r\nUserId integer,\r\nName text,\r\nDate datetime,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE comments (\r\nId integer,\r\nPostId integer,\r\nScore integer,\r\nText text,\r\nCreationDate datetime,\r\nUserId integer,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postHistory (\r\nId integer,\r\nPostHistoryTypeId integer,\r\nPostId integer,\r\nRevisionGUID text,\r\nCreationDate datetime,\r\nUserId integer,\r\nText text,\r\nComment text,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postLinks (\r\nId integer,\r\nCreationDate datetime,\r\nPostId integer,\r\nRelatedPostId integer,\r\nLinkTypeId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (RelatedPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE posts (\r\nId integer,\r\nPostTypeId integer,\r\nAcceptedAnswerId integer,\r\nCreaionDate datetime,\r\nScore integer,\r\nViewCount integer,\r\nBody text,\r\nOwnerUserId integer,\r\nLasActivityDate datetime,\r\nTitle text,\r\nTags text,\r\nAnswerCount integer,\r\nCommentCount integer,\r\nFavoriteCount integer,\r\nLastEditorUserId integer,\r\nLastEditDate datetime,\r\nCommunityOwnedDate datetime,\r\nParentId integer,\r\nClosedDate datetime,\r\nOwnerDisplayName text,\r\nLastEditorDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (OwnerUserId) REFERENCES users(Id),\r\nFOREIGN KEY (LastEditorUserId) REFERENCES users(Id),\r\nFOREIGN KEY (ParentId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE tags (\r\nId integer,\r\nTagName text,\r\nCount integer,\r\nExcerptPostId integer,\r\nWikiPostId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE users (\r\nId integer,\r\nReputation integer,\r\nCreationDate datetime,\r\nDisplayName text,\r\nLastAccessDate datetime,\r\nWebsiteUrl text,\r\nLocation text,\r\nAboutMe text,\r\nViews integer,\r\nUpVotes integer,\r\nDownVotes integer,\r\nAccountId integer,\r\nAge integer,\r\nProfileImageUrl text,\r\nPRIMARY KEY (Id),\r\n);\r\nCREATE TABLE votes (\r\nId integer,\r\nPostId integer,\r\nVoteTypeId integer,\r\nCreationDate date,\r\nUserId integer,\r\nBountyAmount integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\n---------------------\r\nQUESTION: How many users with more than 10 views created their account after the year 2013? more than 10 views refers to Views > 10; created after the year 2013 refers to year (CreationDate) > 2013;\r\nCREATED SQL: SELECT COUNT(Id) FROM users WHERE Views > 10 AND YEAR(CreationDate) > 2013\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\tcodebase_community", "537": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE badges (\r\nId integer,\r\nUserId integer,\r\nName text,\r\nDate datetime,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE comments (\r\nId integer,\r\nPostId integer,\r\nScore integer,\r\nText text,\r\nCreationDate datetime,\r\nUserId integer,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postHistory (\r\nId integer,\r\nPostHistoryTypeId integer,\r\nPostId integer,\r\nRevisionGUID text,\r\nCreationDate datetime,\r\nUserId integer,\r\nText text,\r\nComment text,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postLinks (\r\nId integer,\r\nCreationDate datetime,\r\nPostId integer,\r\nRelatedPostId integer,\r\nLinkTypeId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (RelatedPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE posts (\r\nId integer,\r\nPostTypeId integer,\r\nAcceptedAnswerId integer,\r\nCreaionDate datetime,\r\nScore integer,\r\nViewCount integer,\r\nBody text,\r\nOwnerUserId integer,\r\nLasActivityDate datetime,\r\nTitle text,\r\nTags text,\r\nAnswerCount integer,\r\nCommentCount integer,\r\nFavoriteCount integer,\r\nLastEditorUserId integer,\r\nLastEditDate datetime,\r\nCommunityOwnedDate datetime,\r\nParentId integer,\r\nClosedDate datetime,\r\nOwnerDisplayName text,\r\nLastEditorDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (OwnerUserId) REFERENCES users(Id),\r\nFOREIGN KEY (LastEditorUserId) REFERENCES users(Id),\r\nFOREIGN KEY (ParentId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE tags (\r\nId integer,\r\nTagName text,\r\nCount integer,\r\nExcerptPostId integer,\r\nWikiPostId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE users (\r\nId integer,\r\nReputation integer,\r\nCreationDate datetime,\r\nDisplayName text,\r\nLastAccessDate datetime,\r\nWebsiteUrl text,\r\nLocation text,\r\nAboutMe text,\r\nViews integer,\r\nUpVotes integer,\r\nDownVotes integer,\r\nAccountId integer,\r\nAge integer,\r\nProfileImageUrl text,\r\nPRIMARY KEY (Id),\r\n);\r\nCREATE TABLE votes (\r\nId integer,\r\nPostId integer,\r\nVoteTypeId integer,\r\nCreationDate date,\r\nUserId integer,\r\nBountyAmount integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\n---------------------\r\nQUESTION: How many posts does the user csgillespie own? \"csgillespie\" is the DisplayName of user the user refers to user id\r\nCREATED SQL: SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\tcodebase_community", "538": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE badges (\r\nId integer,\r\nUserId integer,\r\nName text,\r\nDate datetime,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE comments (\r\nId integer,\r\nPostId integer,\r\nScore integer,\r\nText text,\r\nCreationDate datetime,\r\nUserId integer,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postHistory (\r\nId integer,\r\nPostHistoryTypeId integer,\r\nPostId integer,\r\nRevisionGUID text,\r\nCreationDate datetime,\r\nUserId integer,\r\nText text,\r\nComment text,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postLinks (\r\nId integer,\r\nCreationDate datetime,\r\nPostId integer,\r\nRelatedPostId integer,\r\nLinkTypeId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (RelatedPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE posts (\r\nId integer,\r\nPostTypeId integer,\r\nAcceptedAnswerId integer,\r\nCreaionDate datetime,\r\nScore integer,\r\nViewCount integer,\r\nBody text,\r\nOwnerUserId integer,\r\nLasActivityDate datetime,\r\nTitle text,\r\nTags text,\r\nAnswerCount integer,\r\nCommentCount integer,\r\nFavoriteCount integer,\r\nLastEditorUserId integer,\r\nLastEditDate datetime,\r\nCommunityOwnedDate datetime,\r\nParentId integer,\r\nClosedDate datetime,\r\nOwnerDisplayName text,\r\nLastEditorDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (OwnerUserId) REFERENCES users(Id),\r\nFOREIGN KEY (LastEditorUserId) REFERENCES users(Id),\r\nFOREIGN KEY (ParentId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE tags (\r\nId integer,\r\nTagName text,\r\nCount integer,\r\nExcerptPostId integer,\r\nWikiPostId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE users (\r\nId integer,\r\nReputation integer,\r\nCreationDate datetime,\r\nDisplayName text,\r\nLastAccessDate datetime,\r\nWebsiteUrl text,\r\nLocation text,\r\nAboutMe text,\r\nViews integer,\r\nUpVotes integer,\r\nDownVotes integer,\r\nAccountId integer,\r\nAge integer,\r\nProfileImageUrl text,\r\nPRIMARY KEY (Id),\r\n);\r\nCREATE TABLE votes (\r\nId integer,\r\nPostId integer,\r\nVoteTypeId integer,\r\nCreationDate date,\r\nUserId integer,\r\nBountyAmount integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\n---------------------\r\nQUESTION: Please list the titles of the posts owned by the user csgillespie? \"csgillespie\" is the DisplayName of user the user;\r\nCREATED SQL: SELECT DISTINCT T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'csgillespie'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nEND OF CREATION OF SQL\r\nEND OF CREATION OF SQL\r\nEND OF CREATION OF SQL\r\nEND OF CREATION OF SQL\r\nEND OF CREATION OF SQL\r\nEND OF CREATION OF SQL\r\nEND OF CRE+\n\t----- bird -----\tcodebase_community", "539": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE badges (\r\nId integer,\r\nUserId integer,\r\nName text,\r\nDate datetime,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE comments (\r\nId integer,\r\nPostId integer,\r\nScore integer,\r\nText text,\r\nCreationDate datetime,\r\nUserId integer,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postHistory (\r\nId integer,\r\nPostHistoryTypeId integer,\r\nPostId integer,\r\nRevisionGUID text,\r\nCreationDate datetime,\r\nUserId integer,\r\nText text,\r\nComment text,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postLinks (\r\nId integer,\r\nCreationDate datetime,\r\nPostId integer,\r\nRelatedPostId integer,\r\nLinkTypeId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (RelatedPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE posts (\r\nId integer,\r\nPostTypeId integer,\r\nAcceptedAnswerId integer,\r\nCreaionDate datetime,\r\nScore integer,\r\nViewCount integer,\r\nBody text,\r\nOwnerUserId integer,\r\nLasActivityDate datetime,\r\nTitle text,\r\nTags text,\r\nAnswerCount integer,\r\nCommentCount integer,\r\nFavoriteCount integer,\r\nLastEditorUserId integer,\r\nLastEditDate datetime,\r\nCommunityOwnedDate datetime,\r\nParentId integer,\r\nClosedDate datetime,\r\nOwnerDisplayName text,\r\nLastEditorDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (OwnerUserId) REFERENCES users(Id),\r\nFOREIGN KEY (LastEditorUserId) REFERENCES users(Id),\r\nFOREIGN KEY (ParentId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE tags (\r\nId integer,\r\nTagName text,\r\nCount integer,\r\nExcerptPostId integer,\r\nWikiPostId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE users (\r\nId integer,\r\nReputation integer,\r\nCreationDate datetime,\r\nDisplayName text,\r\nLastAccessDate datetime,\r\nWebsiteUrl text,\r\nLocation text,\r\nAboutMe text,\r\nViews integer,\r\nUpVotes integer,\r\nDownVotes integer,\r\nAccountId integer,\r\nAge integer,\r\nProfileImageUrl text,\r\nPRIMARY KEY (Id),\r\n);\r\nCREATE TABLE votes (\r\nId integer,\r\nPostId integer,\r\nVoteTypeId integer,\r\nCreationDate date,\r\nUserId integer,\r\nBountyAmount integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\n---------------------\r\nQUESTION: Who is the owner of the post \"Eliciting priors from experts\"? \"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName the user;\r\nCREATED SQL: SELECT T1.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tcodebase_community", "540": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE badges (\r\nId integer,\r\nUserId integer,\r\nName text,\r\nDate datetime,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE comments (\r\nId integer,\r\nPostId integer,\r\nScore integer,\r\nText text,\r\nCreationDate datetime,\r\nUserId integer,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postHistory (\r\nId integer,\r\nPostHistoryTypeId integer,\r\nPostId integer,\r\nRevisionGUID text,\r\nCreationDate datetime,\r\nUserId integer,\r\nText text,\r\nComment text,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postLinks (\r\nId integer,\r\nCreationDate datetime,\r\nPostId integer,\r\nRelatedPostId integer,\r\nLinkTypeId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (RelatedPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE posts (\r\nId integer,\r\nPostTypeId integer,\r\nAcceptedAnswerId integer,\r\nCreaionDate datetime,\r\nScore integer,\r\nViewCount integer,\r\nBody text,\r\nOwnerUserId integer,\r\nLasActivityDate datetime,\r\nTitle text,\r\nTags text,\r\nAnswerCount integer,\r\nCommentCount integer,\r\nFavoriteCount integer,\r\nLastEditorUserId integer,\r\nLastEditDate datetime,\r\nCommunityOwnedDate datetime,\r\nParentId integer,\r\nClosedDate datetime,\r\nOwnerDisplayName text,\r\nLastEditorDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (OwnerUserId) REFERENCES users(Id),\r\nFOREIGN KEY (LastEditorUserId) REFERENCES users(Id),\r\nFOREIGN KEY (ParentId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE tags (\r\nId integer,\r\nTagName text,\r\nCount integer,\r\nExcerptPostId integer,\r\nWikiPostId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE users (\r\nId integer,\r\nReputation integer,\r\nCreationDate datetime,\r\nDisplayName text,\r\nLastAccessDate datetime,\r\nWebsiteUrl text,\r\nLocation text,\r\nAboutMe text,\r\nViews integer,\r\nUpVotes integer,\r\nDownVotes integer,\r\nAccountId integer,\r\nAge integer,\r\nProfileImageUrl text,\r\nPRIMARY KEY (Id),\r\n);\r\nCREATE TABLE votes (\r\nId integer,\r\nPostId integer,\r\nVoteTypeId integer,\r\nCreationDate date,\r\nUserId integer,\r\nBountyAmount integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\n---------------------\r\nQUESTION: What is the title of the post that is owned by csgillespie and has the highest popularity? \"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount) the highest score refers to Max(Score)\r\nCREATED SQL: SELECT T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'csgillespie' ORDER BY T2.ViewCount DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'csgilles+\n\t----- bird -----\tcodebase_community", "541": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE badges (\r\nId integer,\r\nUserId integer,\r\nName text,\r\nDate datetime,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE comments (\r\nId integer,\r\nPostId integer,\r\nScore integer,\r\nText text,\r\nCreationDate datetime,\r\nUserId integer,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postHistory (\r\nId integer,\r\nPostHistoryTypeId integer,\r\nPostId integer,\r\nRevisionGUID text,\r\nCreationDate datetime,\r\nUserId integer,\r\nText text,\r\nComment text,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postLinks (\r\nId integer,\r\nCreationDate datetime,\r\nPostId integer,\r\nRelatedPostId integer,\r\nLinkTypeId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (RelatedPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE posts (\r\nId integer,\r\nPostTypeId integer,\r\nAcceptedAnswerId integer,\r\nCreaionDate datetime,\r\nScore integer,\r\nViewCount integer,\r\nBody text,\r\nOwnerUserId integer,\r\nLasActivityDate datetime,\r\nTitle text,\r\nTags text,\r\nAnswerCount integer,\r\nCommentCount integer,\r\nFavoriteCount integer,\r\nLastEditorUserId integer,\r\nLastEditDate datetime,\r\nCommunityOwnedDate datetime,\r\nParentId integer,\r\nClosedDate datetime,\r\nOwnerDisplayName text,\r\nLastEditorDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (OwnerUserId) REFERENCES users(Id),\r\nFOREIGN KEY (LastEditorUserId) REFERENCES users(Id),\r\nFOREIGN KEY (ParentId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE tags (\r\nId integer,\r\nTagName text,\r\nCount integer,\r\nExcerptPostId integer,\r\nWikiPostId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE users (\r\nId integer,\r\nReputation integer,\r\nCreationDate datetime,\r\nDisplayName text,\r\nLastAccessDate datetime,\r\nWebsiteUrl text,\r\nLocation text,\r\nAboutMe text,\r\nViews integer,\r\nUpVotes integer,\r\nDownVotes integer,\r\nAccountId integer,\r\nAge integer,\r\nProfileImageUrl text,\r\nPRIMARY KEY (Id),\r\n);\r\nCREATE TABLE votes (\r\nId integer,\r\nPostId integer,\r\nVoteTypeId integer,\r\nCreationDate date,\r\nUserId integer,\r\nBountyAmount integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\n---------------------\r\nQUESTION: What is the display name of the user who is the owner of the most valuable post? most valuable post refers to Max(FavoriteCount) the user refers to UserId\r\nCREATED SQL: SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T1.FavoriteCount DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nEND OF CREATION OF SQL\r\nCREATED SQL\r\nEND OF CREATION OF SQL\r\nEND OF QUESTION\r\nEND OF QUESTION\r\nEND OF CREATION OF SQL\r\nEND OF CREATION OF SQL\r\nEND OF+\n\t----- bird -----\tcodebase_community", "542": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE badges (\r\nId integer,\r\nUserId integer,\r\nName text,\r\nDate datetime,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE comments (\r\nId integer,\r\nPostId integer,\r\nScore integer,\r\nText text,\r\nCreationDate datetime,\r\nUserId integer,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postHistory (\r\nId integer,\r\nPostHistoryTypeId integer,\r\nPostId integer,\r\nRevisionGUID text,\r\nCreationDate datetime,\r\nUserId integer,\r\nText text,\r\nComment text,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postLinks (\r\nId integer,\r\nCreationDate datetime,\r\nPostId integer,\r\nRelatedPostId integer,\r\nLinkTypeId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (RelatedPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE posts (\r\nId integer,\r\nPostTypeId integer,\r\nAcceptedAnswerId integer,\r\nCreaionDate datetime,\r\nScore integer,\r\nViewCount integer,\r\nBody text,\r\nOwnerUserId integer,\r\nLasActivityDate datetime,\r\nTitle text,\r\nTags text,\r\nAnswerCount integer,\r\nCommentCount integer,\r\nFavoriteCount integer,\r\nLastEditorUserId integer,\r\nLastEditDate datetime,\r\nCommunityOwnedDate datetime,\r\nParentId integer,\r\nClosedDate datetime,\r\nOwnerDisplayName text,\r\nLastEditorDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (OwnerUserId) REFERENCES users(Id),\r\nFOREIGN KEY (LastEditorUserId) REFERENCES users(Id),\r\nFOREIGN KEY (ParentId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE tags (\r\nId integer,\r\nTagName text,\r\nCount integer,\r\nExcerptPostId integer,\r\nWikiPostId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE users (\r\nId integer,\r\nReputation integer,\r\nCreationDate datetime,\r\nDisplayName text,\r\nLastAccessDate datetime,\r\nWebsiteUrl text,\r\nLocation text,\r\nAboutMe text,\r\nViews integer,\r\nUpVotes integer,\r\nDownVotes integer,\r\nAccountId integer,\r\nAge integer,\r\nProfileImageUrl text,\r\nPRIMARY KEY (Id),\r\n);\r\nCREATE TABLE votes (\r\nId integer,\r\nPostId integer,\r\nVoteTypeId integer,\r\nCreationDate date,\r\nUserId integer,\r\nBountyAmount integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\n---------------------\r\nQUESTION: What is the total number of comments of all the posts owned by csgillespie? \"csgillespie\" is the DisplayName of user; total number of comments refers to Sum(CommentCount) the user owns;\r\nCREATED SQL: SELECT SUM(T2.CommentCount) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'csgillespie'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tcodebase_community", "543": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE badges (\r\nId integer,\r\nUserId integer,\r\nName text,\r\nDate datetime,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE comments (\r\nId integer,\r\nPostId integer,\r\nScore integer,\r\nText text,\r\nCreationDate datetime,\r\nUserId integer,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postHistory (\r\nId integer,\r\nPostHistoryTypeId integer,\r\nPostId integer,\r\nRevisionGUID text,\r\nCreationDate datetime,\r\nUserId integer,\r\nText text,\r\nComment text,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postLinks (\r\nId integer,\r\nCreationDate datetime,\r\nPostId integer,\r\nRelatedPostId integer,\r\nLinkTypeId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (RelatedPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE posts (\r\nId integer,\r\nPostTypeId integer,\r\nAcceptedAnswerId integer,\r\nCreaionDate datetime,\r\nScore integer,\r\nViewCount integer,\r\nBody text,\r\nOwnerUserId integer,\r\nLasActivityDate datetime,\r\nTitle text,\r\nTags text,\r\nAnswerCount integer,\r\nCommentCount integer,\r\nFavoriteCount integer,\r\nLastEditorUserId integer,\r\nLastEditDate datetime,\r\nCommunityOwnedDate datetime,\r\nParentId integer,\r\nClosedDate datetime,\r\nOwnerDisplayName text,\r\nLastEditorDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (OwnerUserId) REFERENCES users(Id),\r\nFOREIGN KEY (LastEditorUserId) REFERENCES users(Id),\r\nFOREIGN KEY (ParentId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE tags (\r\nId integer,\r\nTagName text,\r\nCount integer,\r\nExcerptPostId integer,\r\nWikiPostId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE users (\r\nId integer,\r\nReputation integer,\r\nCreationDate datetime,\r\nDisplayName text,\r\nLastAccessDate datetime,\r\nWebsiteUrl text,\r\nLocation text,\r\nAboutMe text,\r\nViews integer,\r\nUpVotes integer,\r\nDownVotes integer,\r\nAccountId integer,\r\nAge integer,\r\nProfileImageUrl text,\r\nPRIMARY KEY (Id),\r\n);\r\nCREATE TABLE votes (\r\nId integer,\r\nPostId integer,\r\nVoteTypeId integer,\r\nCreationDate date,\r\nUserId integer,\r\nBountyAmount integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\n---------------------\r\nQUESTION: For the post that got the most number of answers owned by csgillespie, how many answers did it get? \"csgillespie\" is the DisplayName of user; the most number of answer refers to Max(AnswerCount) the AnswerCount refers to AnswerCount;\r\nCREATED SQL: SELECT T1.AnswerCount FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.AnswerCount DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL+\n\t----- bird -----\tcodebase_community", "544": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE badges (\r\nId integer,\r\nUserId integer,\r\nName text,\r\nDate datetime,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE comments (\r\nId integer,\r\nPostId integer,\r\nScore integer,\r\nText text,\r\nCreationDate datetime,\r\nUserId integer,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postHistory (\r\nId integer,\r\nPostHistoryTypeId integer,\r\nPostId integer,\r\nRevisionGUID text,\r\nCreationDate datetime,\r\nUserId integer,\r\nText text,\r\nComment text,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postLinks (\r\nId integer,\r\nCreationDate datetime,\r\nPostId integer,\r\nRelatedPostId integer,\r\nLinkTypeId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (RelatedPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE posts (\r\nId integer,\r\nPostTypeId integer,\r\nAcceptedAnswerId integer,\r\nCreaionDate datetime,\r\nScore integer,\r\nViewCount integer,\r\nBody text,\r\nOwnerUserId integer,\r\nLasActivityDate datetime,\r\nTitle text,\r\nTags text,\r\nAnswerCount integer,\r\nCommentCount integer,\r\nFavoriteCount integer,\r\nLastEditorUserId integer,\r\nLastEditDate datetime,\r\nCommunityOwnedDate datetime,\r\nParentId integer,\r\nClosedDate datetime,\r\nOwnerDisplayName text,\r\nLastEditorDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (OwnerUserId) REFERENCES users(Id),\r\nFOREIGN KEY (LastEditorUserId) REFERENCES users(Id),\r\nFOREIGN KEY (ParentId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE tags (\r\nId integer,\r\nTagName text,\r\nCount integer,\r\nExcerptPostId integer,\r\nWikiPostId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE users (\r\nId integer,\r\nReputation integer,\r\nCreationDate datetime,\r\nDisplayName text,\r\nLastAccessDate datetime,\r\nWebsiteUrl text,\r\nLocation text,\r\nAboutMe text,\r\nViews integer,\r\nUpVotes integer,\r\nDownVotes integer,\r\nAccountId integer,\r\nAge integer,\r\nProfileImageUrl text,\r\nPRIMARY KEY (Id),\r\n);\r\nCREATE TABLE votes (\r\nId integer,\r\nPostId integer,\r\nVoteTypeId integer,\r\nCreationDate date,\r\nUserId integer,\r\nBountyAmount integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\n---------------------\r\nQUESTION: What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"? \"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId;\r\nCREATED SQL: SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T2.Id = T1.LastEditorUserId WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\n+\n\t----- bird -----\tcodebase_community", "545": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE badges (\r\nId integer,\r\nUserId integer,\r\nName text,\r\nDate datetime,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE comments (\r\nId integer,\r\nPostId integer,\r\nScore integer,\r\nText text,\r\nCreationDate datetime,\r\nUserId integer,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postHistory (\r\nId integer,\r\nPostHistoryTypeId integer,\r\nPostId integer,\r\nRevisionGUID text,\r\nCreationDate datetime,\r\nUserId integer,\r\nText text,\r\nComment text,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postLinks (\r\nId integer,\r\nCreationDate datetime,\r\nPostId integer,\r\nRelatedPostId integer,\r\nLinkTypeId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (RelatedPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE posts (\r\nId integer,\r\nPostTypeId integer,\r\nAcceptedAnswerId integer,\r\nCreaionDate datetime,\r\nScore integer,\r\nViewCount integer,\r\nBody text,\r\nOwnerUserId integer,\r\nLasActivityDate datetime,\r\nTitle text,\r\nTags text,\r\nAnswerCount integer,\r\nCommentCount integer,\r\nFavoriteCount integer,\r\nLastEditorUserId integer,\r\nLastEditDate datetime,\r\nCommunityOwnedDate datetime,\r\nParentId integer,\r\nClosedDate datetime,\r\nOwnerDisplayName text,\r\nLastEditorDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (OwnerUserId) REFERENCES users(Id),\r\nFOREIGN KEY (LastEditorUserId) REFERENCES users(Id),\r\nFOREIGN KEY (ParentId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE tags (\r\nId integer,\r\nTagName text,\r\nCount integer,\r\nExcerptPostId integer,\r\nWikiPostId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE users (\r\nId integer,\r\nReputation integer,\r\nCreationDate datetime,\r\nDisplayName text,\r\nLastAccessDate datetime,\r\nWebsiteUrl text,\r\nLocation text,\r\nAboutMe text,\r\nViews integer,\r\nUpVotes integer,\r\nDownVotes integer,\r\nAccountId integer,\r\nAge integer,\r\nProfileImageUrl text,\r\nPRIMARY KEY (Id),\r\n);\r\nCREATE TABLE votes (\r\nId integer,\r\nPostId integer,\r\nVoteTypeId integer,\r\nCreationDate date,\r\nUserId integer,\r\nBountyAmount integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\n---------------------\r\nQUESTION: Among the posts owned by csgillespie, how many of them are root posts? \"csgillespie\" is the DisplayName of user; root post refers to ParentId IS Null the ParentId of posts\r\nCREATED SQL: SELECT COUNT(T2.PostId) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'csgillespie' AND T2.ParentId IS NULL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nEND OF CREATION OF SQL\r\nCREATED BY: Xiaoyu Liu\r\nCREATED ON: 2020/1/15\r\nCREATED ON\r\n+\n\t----- bird -----\tcodebase_community", "546": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE badges (\r\nId integer,\r\nUserId integer,\r\nName text,\r\nDate datetime,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE comments (\r\nId integer,\r\nPostId integer,\r\nScore integer,\r\nText text,\r\nCreationDate datetime,\r\nUserId integer,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postHistory (\r\nId integer,\r\nPostHistoryTypeId integer,\r\nPostId integer,\r\nRevisionGUID text,\r\nCreationDate datetime,\r\nUserId integer,\r\nText text,\r\nComment text,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postLinks (\r\nId integer,\r\nCreationDate datetime,\r\nPostId integer,\r\nRelatedPostId integer,\r\nLinkTypeId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (RelatedPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE posts (\r\nId integer,\r\nPostTypeId integer,\r\nAcceptedAnswerId integer,\r\nCreaionDate datetime,\r\nScore integer,\r\nViewCount integer,\r\nBody text,\r\nOwnerUserId integer,\r\nLasActivityDate datetime,\r\nTitle text,\r\nTags text,\r\nAnswerCount integer,\r\nCommentCount integer,\r\nFavoriteCount integer,\r\nLastEditorUserId integer,\r\nLastEditDate datetime,\r\nCommunityOwnedDate datetime,\r\nParentId integer,\r\nClosedDate datetime,\r\nOwnerDisplayName text,\r\nLastEditorDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (OwnerUserId) REFERENCES users(Id),\r\nFOREIGN KEY (LastEditorUserId) REFERENCES users(Id),\r\nFOREIGN KEY (ParentId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE tags (\r\nId integer,\r\nTagName text,\r\nCount integer,\r\nExcerptPostId integer,\r\nWikiPostId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE users (\r\nId integer,\r\nReputation integer,\r\nCreationDate datetime,\r\nDisplayName text,\r\nLastAccessDate datetime,\r\nWebsiteUrl text,\r\nLocation text,\r\nAboutMe text,\r\nViews integer,\r\nUpVotes integer,\r\nDownVotes integer,\r\nAccountId integer,\r\nAge integer,\r\nProfileImageUrl text,\r\nPRIMARY KEY (Id),\r\n);\r\nCREATE TABLE votes (\r\nId integer,\r\nPostId integer,\r\nVoteTypeId integer,\r\nCreationDate date,\r\nUserId integer,\r\nBountyAmount integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\n---------------------\r\nQUESTION: Please list the display names of all the users who owns a post that is well-finished. the post that is well-finished refers to ClosedDate IS NOT Null the post is well-finished refers to ClosedDate IS NOT Null\r\nCREATED SQL: SELECT DISTINCT T1.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.ClosedDate IS NOT NULL\r\nEND OF QUESTION\r\nCREATED SQL: SELECT DISTINCT T1.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.ClosedDate IS NOT NULL\r\nEND OF QUESTION\r\nCREATED+\n\t----- bird -----\tcodebase_community", "547": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE badges (\r\nId integer,\r\nUserId integer,\r\nName text,\r\nDate datetime,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE comments (\r\nId integer,\r\nPostId integer,\r\nScore integer,\r\nText text,\r\nCreationDate datetime,\r\nUserId integer,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postHistory (\r\nId integer,\r\nPostHistoryTypeId integer,\r\nPostId integer,\r\nRevisionGUID text,\r\nCreationDate datetime,\r\nUserId integer,\r\nText text,\r\nComment text,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postLinks (\r\nId integer,\r\nCreationDate datetime,\r\nPostId integer,\r\nRelatedPostId integer,\r\nLinkTypeId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (RelatedPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE posts (\r\nId integer,\r\nPostTypeId integer,\r\nAcceptedAnswerId integer,\r\nCreaionDate datetime,\r\nScore integer,\r\nViewCount integer,\r\nBody text,\r\nOwnerUserId integer,\r\nLasActivityDate datetime,\r\nTitle text,\r\nTags text,\r\nAnswerCount integer,\r\nCommentCount integer,\r\nFavoriteCount integer,\r\nLastEditorUserId integer,\r\nLastEditDate datetime,\r\nCommunityOwnedDate datetime,\r\nParentId integer,\r\nClosedDate datetime,\r\nOwnerDisplayName text,\r\nLastEditorDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (OwnerUserId) REFERENCES users(Id),\r\nFOREIGN KEY (LastEditorUserId) REFERENCES users(Id),\r\nFOREIGN KEY (ParentId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE tags (\r\nId integer,\r\nTagName text,\r\nCount integer,\r\nExcerptPostId integer,\r\nWikiPostId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE users (\r\nId integer,\r\nReputation integer,\r\nCreationDate datetime,\r\nDisplayName text,\r\nLastAccessDate datetime,\r\nWebsiteUrl text,\r\nLocation text,\r\nAboutMe text,\r\nViews integer,\r\nUpVotes integer,\r\nDownVotes integer,\r\nAccountId integer,\r\nAge integer,\r\nProfileImageUrl text,\r\nPRIMARY KEY (Id),\r\n);\r\nCREATE TABLE votes (\r\nId integer,\r\nPostId integer,\r\nVoteTypeId integer,\r\nCreationDate date,\r\nUserId integer,\r\nBountyAmount integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\n---------------------\r\nQUESTION: Among the posts owned by an elder user, how many of them have a score of over 19? elder users refers to Age > 65; Score of over 19 refers to Score > = 20 the posts owned by an elder user refers to posts.OwnerUserId in ( SELECT Id FROM users WHERE Age > 65 )\r\nCREATED SQL: SELECT COUNT(T2.PostId) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Age > 65 AND T2.Score > 19\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(T1.PostId) FROM posts AS T1 INNER JOIN users AS T2 ON T1.Owner+\n\t----- bird -----\tcodebase_community", "548": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE badges (\r\nId integer,\r\nUserId integer,\r\nName text,\r\nDate datetime,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE comments (\r\nId integer,\r\nPostId integer,\r\nScore integer,\r\nText text,\r\nCreationDate datetime,\r\nUserId integer,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postHistory (\r\nId integer,\r\nPostHistoryTypeId integer,\r\nPostId integer,\r\nRevisionGUID text,\r\nCreationDate datetime,\r\nUserId integer,\r\nText text,\r\nComment text,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postLinks (\r\nId integer,\r\nCreationDate datetime,\r\nPostId integer,\r\nRelatedPostId integer,\r\nLinkTypeId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (RelatedPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE posts (\r\nId integer,\r\nPostTypeId integer,\r\nAcceptedAnswerId integer,\r\nCreaionDate datetime,\r\nScore integer,\r\nViewCount integer,\r\nBody text,\r\nOwnerUserId integer,\r\nLasActivityDate datetime,\r\nTitle text,\r\nTags text,\r\nAnswerCount integer,\r\nCommentCount integer,\r\nFavoriteCount integer,\r\nLastEditorUserId integer,\r\nLastEditDate datetime,\r\nCommunityOwnedDate datetime,\r\nParentId integer,\r\nClosedDate datetime,\r\nOwnerDisplayName text,\r\nLastEditorDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (OwnerUserId) REFERENCES users(Id),\r\nFOREIGN KEY (LastEditorUserId) REFERENCES users(Id),\r\nFOREIGN KEY (ParentId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE tags (\r\nId integer,\r\nTagName text,\r\nCount integer,\r\nExcerptPostId integer,\r\nWikiPostId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE users (\r\nId integer,\r\nReputation integer,\r\nCreationDate datetime,\r\nDisplayName text,\r\nLastAccessDate datetime,\r\nWebsiteUrl text,\r\nLocation text,\r\nAboutMe text,\r\nViews integer,\r\nUpVotes integer,\r\nDownVotes integer,\r\nAccountId integer,\r\nAge integer,\r\nProfileImageUrl text,\r\nPRIMARY KEY (Id),\r\n);\r\nCREATE TABLE votes (\r\nId integer,\r\nPostId integer,\r\nVoteTypeId integer,\r\nCreationDate date,\r\nUserId integer,\r\nBountyAmount integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\n---------------------\r\nQUESTION: What is the location of the owner of the post \"Eliciting priors from experts\"? Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post the postid is 1129;\r\nCREATED SQL: SELECT T1.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tcodebase_community", "549": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE badges (\r\nId integer,\r\nUserId integer,\r\nName text,\r\nDate datetime,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE comments (\r\nId integer,\r\nPostId integer,\r\nScore integer,\r\nText text,\r\nCreationDate datetime,\r\nUserId integer,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postHistory (\r\nId integer,\r\nPostHistoryTypeId integer,\r\nPostId integer,\r\nRevisionGUID text,\r\nCreationDate datetime,\r\nUserId integer,\r\nText text,\r\nComment text,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postLinks (\r\nId integer,\r\nCreationDate datetime,\r\nPostId integer,\r\nRelatedPostId integer,\r\nLinkTypeId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (RelatedPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE posts (\r\nId integer,\r\nPostTypeId integer,\r\nAcceptedAnswerId integer,\r\nCreaionDate datetime,\r\nScore integer,\r\nViewCount integer,\r\nBody text,\r\nOwnerUserId integer,\r\nLasActivityDate datetime,\r\nTitle text,\r\nTags text,\r\nAnswerCount integer,\r\nCommentCount integer,\r\nFavoriteCount integer,\r\nLastEditorUserId integer,\r\nLastEditDate datetime,\r\nCommunityOwnedDate datetime,\r\nParentId integer,\r\nClosedDate datetime,\r\nOwnerDisplayName text,\r\nLastEditorDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (OwnerUserId) REFERENCES users(Id),\r\nFOREIGN KEY (LastEditorUserId) REFERENCES users(Id),\r\nFOREIGN KEY (ParentId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE tags (\r\nId integer,\r\nTagName text,\r\nCount integer,\r\nExcerptPostId integer,\r\nWikiPostId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE users (\r\nId integer,\r\nReputation integer,\r\nCreationDate datetime,\r\nDisplayName text,\r\nLastAccessDate datetime,\r\nWebsiteUrl text,\r\nLocation text,\r\nAboutMe text,\r\nViews integer,\r\nUpVotes integer,\r\nDownVotes integer,\r\nAccountId integer,\r\nAge integer,\r\nProfileImageUrl text,\r\nPRIMARY KEY (Id),\r\n);\r\nCREATE TABLE votes (\r\nId integer,\r\nPostId integer,\r\nVoteTypeId integer,\r\nCreationDate date,\r\nUserId integer,\r\nBountyAmount integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\n---------------------\r\nQUESTION: From which post is the tag \"bayesian\" excerpted from? Please give the body of the post. \"bayesian\" is the TagName; excerpt from refers to ExcerptPostId the post body refers to Body\r\nCREATED SQL: SELECT T1.Body FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Id = T2.ExcerptPostId WHERE T2.TagName = 'bayesian'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL refers to SQL code that can be used to answer the question; SQL code refers to SQL statement\r\nCREATED BY: Aisyah\r\nCREATED ON: 2020-11-+\n\t----- bird -----\tcodebase_community", "550": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE badges (\r\nId integer,\r\nUserId integer,\r\nName text,\r\nDate datetime,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE comments (\r\nId integer,\r\nPostId integer,\r\nScore integer,\r\nText text,\r\nCreationDate datetime,\r\nUserId integer,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postHistory (\r\nId integer,\r\nPostHistoryTypeId integer,\r\nPostId integer,\r\nRevisionGUID text,\r\nCreationDate datetime,\r\nUserId integer,\r\nText text,\r\nComment text,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postLinks (\r\nId integer,\r\nCreationDate datetime,\r\nPostId integer,\r\nRelatedPostId integer,\r\nLinkTypeId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (RelatedPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE posts (\r\nId integer,\r\nPostTypeId integer,\r\nAcceptedAnswerId integer,\r\nCreaionDate datetime,\r\nScore integer,\r\nViewCount integer,\r\nBody text,\r\nOwnerUserId integer,\r\nLasActivityDate datetime,\r\nTitle text,\r\nTags text,\r\nAnswerCount integer,\r\nCommentCount integer,\r\nFavoriteCount integer,\r\nLastEditorUserId integer,\r\nLastEditDate datetime,\r\nCommunityOwnedDate datetime,\r\nParentId integer,\r\nClosedDate datetime,\r\nOwnerDisplayName text,\r\nLastEditorDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (OwnerUserId) REFERENCES users(Id),\r\nFOREIGN KEY (LastEditorUserId) REFERENCES users(Id),\r\nFOREIGN KEY (ParentId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE tags (\r\nId integer,\r\nTagName text,\r\nCount integer,\r\nExcerptPostId integer,\r\nWikiPostId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE users (\r\nId integer,\r\nReputation integer,\r\nCreationDate datetime,\r\nDisplayName text,\r\nLastAccessDate datetime,\r\nWebsiteUrl text,\r\nLocation text,\r\nAboutMe text,\r\nViews integer,\r\nUpVotes integer,\r\nDownVotes integer,\r\nAccountId integer,\r\nAge integer,\r\nProfileImageUrl text,\r\nPRIMARY KEY (Id),\r\n);\r\nCREATE TABLE votes (\r\nId integer,\r\nPostId integer,\r\nVoteTypeId integer,\r\nCreationDate date,\r\nUserId integer,\r\nBountyAmount integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\n---------------------\r\nQUESTION: From which post is the most popular tag excerpted from? Please give the body of the post. most popular tag refers to Max(Count); excerpt from refer to ExcerptPostId the post body refers to Body;\r\nCREATED SQL: SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id ORDER BY T1.Count DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL refers to SQL query\r\nEND OF QUESTION refers to the question\r\nCREATED SQL: SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPost+\n\t----- bird -----\tcodebase_community", "551": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE badges (\r\nId integer,\r\nUserId integer,\r\nName text,\r\nDate datetime,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE comments (\r\nId integer,\r\nPostId integer,\r\nScore integer,\r\nText text,\r\nCreationDate datetime,\r\nUserId integer,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postHistory (\r\nId integer,\r\nPostHistoryTypeId integer,\r\nPostId integer,\r\nRevisionGUID text,\r\nCreationDate datetime,\r\nUserId integer,\r\nText text,\r\nComment text,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postLinks (\r\nId integer,\r\nCreationDate datetime,\r\nPostId integer,\r\nRelatedPostId integer,\r\nLinkTypeId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (RelatedPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE posts (\r\nId integer,\r\nPostTypeId integer,\r\nAcceptedAnswerId integer,\r\nCreaionDate datetime,\r\nScore integer,\r\nViewCount integer,\r\nBody text,\r\nOwnerUserId integer,\r\nLasActivityDate datetime,\r\nTitle text,\r\nTags text,\r\nAnswerCount integer,\r\nCommentCount integer,\r\nFavoriteCount integer,\r\nLastEditorUserId integer,\r\nLastEditDate datetime,\r\nCommunityOwnedDate datetime,\r\nParentId integer,\r\nClosedDate datetime,\r\nOwnerDisplayName text,\r\nLastEditorDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (OwnerUserId) REFERENCES users(Id),\r\nFOREIGN KEY (LastEditorUserId) REFERENCES users(Id),\r\nFOREIGN KEY (ParentId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE tags (\r\nId integer,\r\nTagName text,\r\nCount integer,\r\nExcerptPostId integer,\r\nWikiPostId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE users (\r\nId integer,\r\nReputation integer,\r\nCreationDate datetime,\r\nDisplayName text,\r\nLastAccessDate datetime,\r\nWebsiteUrl text,\r\nLocation text,\r\nAboutMe text,\r\nViews integer,\r\nUpVotes integer,\r\nDownVotes integer,\r\nAccountId integer,\r\nAge integer,\r\nProfileImageUrl text,\r\nPRIMARY KEY (Id),\r\n);\r\nCREATE TABLE votes (\r\nId integer,\r\nPostId integer,\r\nVoteTypeId integer,\r\nCreationDate date,\r\nUserId integer,\r\nBountyAmount integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\n---------------------\r\nQUESTION: How many badges has the user csgillespie obtained? \"csgillespie\" is the DisplayName of user the user obtained the badge\r\nCREATED SQL: SELECT COUNT(Id) FROM badges WHERE UserId IN ( SELECT Id FROM users WHERE DisplayName = 'csgillespie' )\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tcodebase_community", "552": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE badges (\r\nId integer,\r\nUserId integer,\r\nName text,\r\nDate datetime,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE comments (\r\nId integer,\r\nPostId integer,\r\nScore integer,\r\nText text,\r\nCreationDate datetime,\r\nUserId integer,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postHistory (\r\nId integer,\r\nPostHistoryTypeId integer,\r\nPostId integer,\r\nRevisionGUID text,\r\nCreationDate datetime,\r\nUserId integer,\r\nText text,\r\nComment text,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postLinks (\r\nId integer,\r\nCreationDate datetime,\r\nPostId integer,\r\nRelatedPostId integer,\r\nLinkTypeId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (RelatedPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE posts (\r\nId integer,\r\nPostTypeId integer,\r\nAcceptedAnswerId integer,\r\nCreaionDate datetime,\r\nScore integer,\r\nViewCount integer,\r\nBody text,\r\nOwnerUserId integer,\r\nLasActivityDate datetime,\r\nTitle text,\r\nTags text,\r\nAnswerCount integer,\r\nCommentCount integer,\r\nFavoriteCount integer,\r\nLastEditorUserId integer,\r\nLastEditDate datetime,\r\nCommunityOwnedDate datetime,\r\nParentId integer,\r\nClosedDate datetime,\r\nOwnerDisplayName text,\r\nLastEditorDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (OwnerUserId) REFERENCES users(Id),\r\nFOREIGN KEY (LastEditorUserId) REFERENCES users(Id),\r\nFOREIGN KEY (ParentId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE tags (\r\nId integer,\r\nTagName text,\r\nCount integer,\r\nExcerptPostId integer,\r\nWikiPostId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE users (\r\nId integer,\r\nReputation integer,\r\nCreationDate datetime,\r\nDisplayName text,\r\nLastAccessDate datetime,\r\nWebsiteUrl text,\r\nLocation text,\r\nAboutMe text,\r\nViews integer,\r\nUpVotes integer,\r\nDownVotes integer,\r\nAccountId integer,\r\nAge integer,\r\nProfileImageUrl text,\r\nPRIMARY KEY (Id),\r\n);\r\nCREATE TABLE votes (\r\nId integer,\r\nPostId integer,\r\nVoteTypeId integer,\r\nCreationDate date,\r\nUserId integer,\r\nBountyAmount integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\n---------------------\r\nQUESTION: Please list the names of the badges obtained by csgillespie. \"csgillespie\" is the DisplayName of user the badge was obtained by; names of badges refer to Name\r\nCREATED SQL: SELECT DISTINCT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\n+\n\t----- bird -----\tcodebase_community", "553": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE badges (\r\nId integer,\r\nUserId integer,\r\nName text,\r\nDate datetime,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE comments (\r\nId integer,\r\nPostId integer,\r\nScore integer,\r\nText text,\r\nCreationDate datetime,\r\nUserId integer,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postHistory (\r\nId integer,\r\nPostHistoryTypeId integer,\r\nPostId integer,\r\nRevisionGUID text,\r\nCreationDate datetime,\r\nUserId integer,\r\nText text,\r\nComment text,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postLinks (\r\nId integer,\r\nCreationDate datetime,\r\nPostId integer,\r\nRelatedPostId integer,\r\nLinkTypeId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (RelatedPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE posts (\r\nId integer,\r\nPostTypeId integer,\r\nAcceptedAnswerId integer,\r\nCreaionDate datetime,\r\nScore integer,\r\nViewCount integer,\r\nBody text,\r\nOwnerUserId integer,\r\nLasActivityDate datetime,\r\nTitle text,\r\nTags text,\r\nAnswerCount integer,\r\nCommentCount integer,\r\nFavoriteCount integer,\r\nLastEditorUserId integer,\r\nLastEditDate datetime,\r\nCommunityOwnedDate datetime,\r\nParentId integer,\r\nClosedDate datetime,\r\nOwnerDisplayName text,\r\nLastEditorDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (OwnerUserId) REFERENCES users(Id),\r\nFOREIGN KEY (LastEditorUserId) REFERENCES users(Id),\r\nFOREIGN KEY (ParentId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE tags (\r\nId integer,\r\nTagName text,\r\nCount integer,\r\nExcerptPostId integer,\r\nWikiPostId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE users (\r\nId integer,\r\nReputation integer,\r\nCreationDate datetime,\r\nDisplayName text,\r\nLastAccessDate datetime,\r\nWebsiteUrl text,\r\nLocation text,\r\nAboutMe text,\r\nViews integer,\r\nUpVotes integer,\r\nDownVotes integer,\r\nAccountId integer,\r\nAge integer,\r\nProfileImageUrl text,\r\nPRIMARY KEY (Id),\r\n);\r\nCREATE TABLE votes (\r\nId integer,\r\nPostId integer,\r\nVoteTypeId integer,\r\nCreationDate date,\r\nUserId integer,\r\nBountyAmount integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\n---------------------\r\nQUESTION: Among the badges obtained by csgillespie, how many of them were obtained in the year 2011? \"csgillespie\" is the DisplayName of user; obtained in 2011 refers to YEAR (Date) = 2011 the year of 2011\r\nCREATED SQL: SELECT COUNT(Name) FROM badges WHERE UserId IN ( SELECT Id FROM users WHERE DisplayName = 'csgillespie' ) AND Date LIKE '2011%'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND+\n\t----- bird -----\tcodebase_community", "554": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE badges (\r\nId integer,\r\nUserId integer,\r\nName text,\r\nDate datetime,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE comments (\r\nId integer,\r\nPostId integer,\r\nScore integer,\r\nText text,\r\nCreationDate datetime,\r\nUserId integer,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postHistory (\r\nId integer,\r\nPostHistoryTypeId integer,\r\nPostId integer,\r\nRevisionGUID text,\r\nCreationDate datetime,\r\nUserId integer,\r\nText text,\r\nComment text,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postLinks (\r\nId integer,\r\nCreationDate datetime,\r\nPostId integer,\r\nRelatedPostId integer,\r\nLinkTypeId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (RelatedPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE posts (\r\nId integer,\r\nPostTypeId integer,\r\nAcceptedAnswerId integer,\r\nCreaionDate datetime,\r\nScore integer,\r\nViewCount integer,\r\nBody text,\r\nOwnerUserId integer,\r\nLasActivityDate datetime,\r\nTitle text,\r\nTags text,\r\nAnswerCount integer,\r\nCommentCount integer,\r\nFavoriteCount integer,\r\nLastEditorUserId integer,\r\nLastEditDate datetime,\r\nCommunityOwnedDate datetime,\r\nParentId integer,\r\nClosedDate datetime,\r\nOwnerDisplayName text,\r\nLastEditorDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (OwnerUserId) REFERENCES users(Id),\r\nFOREIGN KEY (LastEditorUserId) REFERENCES users(Id),\r\nFOREIGN KEY (ParentId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE tags (\r\nId integer,\r\nTagName text,\r\nCount integer,\r\nExcerptPostId integer,\r\nWikiPostId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE users (\r\nId integer,\r\nReputation integer,\r\nCreationDate datetime,\r\nDisplayName text,\r\nLastAccessDate datetime,\r\nWebsiteUrl text,\r\nLocation text,\r\nAboutMe text,\r\nViews integer,\r\nUpVotes integer,\r\nDownVotes integer,\r\nAccountId integer,\r\nAge integer,\r\nProfileImageUrl text,\r\nPRIMARY KEY (Id),\r\n);\r\nCREATE TABLE votes (\r\nId integer,\r\nPostId integer,\r\nVoteTypeId integer,\r\nCreationDate date,\r\nUserId integer,\r\nBountyAmount integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\n---------------------\r\nQUESTION: What is the display name of the user who has obtained the most number of badges? who obtained the most number of badges refers to UserID with Max(Count(Id)) the display name of the user refers to UserDisplayName\r\nCREATED SQL: SELECT T1.UserDisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id ORDER BY COUNT(T1.Id) DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL: SELECT T1.UserDisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id ORDER BY COUNT(T1.Id) DESC LIMIT+\n\t----- bird -----\tcodebase_community", "555": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE badges (\r\nId integer,\r\nUserId integer,\r\nName text,\r\nDate datetime,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE comments (\r\nId integer,\r\nPostId integer,\r\nScore integer,\r\nText text,\r\nCreationDate datetime,\r\nUserId integer,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postHistory (\r\nId integer,\r\nPostHistoryTypeId integer,\r\nPostId integer,\r\nRevisionGUID text,\r\nCreationDate datetime,\r\nUserId integer,\r\nText text,\r\nComment text,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postLinks (\r\nId integer,\r\nCreationDate datetime,\r\nPostId integer,\r\nRelatedPostId integer,\r\nLinkTypeId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (RelatedPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE posts (\r\nId integer,\r\nPostTypeId integer,\r\nAcceptedAnswerId integer,\r\nCreaionDate datetime,\r\nScore integer,\r\nViewCount integer,\r\nBody text,\r\nOwnerUserId integer,\r\nLasActivityDate datetime,\r\nTitle text,\r\nTags text,\r\nAnswerCount integer,\r\nCommentCount integer,\r\nFavoriteCount integer,\r\nLastEditorUserId integer,\r\nLastEditDate datetime,\r\nCommunityOwnedDate datetime,\r\nParentId integer,\r\nClosedDate datetime,\r\nOwnerDisplayName text,\r\nLastEditorDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (OwnerUserId) REFERENCES users(Id),\r\nFOREIGN KEY (LastEditorUserId) REFERENCES users(Id),\r\nFOREIGN KEY (ParentId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE tags (\r\nId integer,\r\nTagName text,\r\nCount integer,\r\nExcerptPostId integer,\r\nWikiPostId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE users (\r\nId integer,\r\nReputation integer,\r\nCreationDate datetime,\r\nDisplayName text,\r\nLastAccessDate datetime,\r\nWebsiteUrl text,\r\nLocation text,\r\nAboutMe text,\r\nViews integer,\r\nUpVotes integer,\r\nDownVotes integer,\r\nAccountId integer,\r\nAge integer,\r\nProfileImageUrl text,\r\nPRIMARY KEY (Id),\r\n);\r\nCREATE TABLE votes (\r\nId integer,\r\nPostId integer,\r\nVoteTypeId integer,\r\nCreationDate date,\r\nUserId integer,\r\nBountyAmount integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\n---------------------\r\nQUESTION: What is the average score of the posts owned by the user csgillespie? \"csgillespie\" is the DisplayName of user; average score refers to AVG(Score) the posts owned by csgillespie\r\nCREATED SQL: SELECT AVG(T2.Score) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'csgillespie'\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tcodebase_community", "556": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE badges (\r\nId integer,\r\nUserId integer,\r\nName text,\r\nDate datetime,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE comments (\r\nId integer,\r\nPostId integer,\r\nScore integer,\r\nText text,\r\nCreationDate datetime,\r\nUserId integer,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postHistory (\r\nId integer,\r\nPostHistoryTypeId integer,\r\nPostId integer,\r\nRevisionGUID text,\r\nCreationDate datetime,\r\nUserId integer,\r\nText text,\r\nComment text,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postLinks (\r\nId integer,\r\nCreationDate datetime,\r\nPostId integer,\r\nRelatedPostId integer,\r\nLinkTypeId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (RelatedPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE posts (\r\nId integer,\r\nPostTypeId integer,\r\nAcceptedAnswerId integer,\r\nCreaionDate datetime,\r\nScore integer,\r\nViewCount integer,\r\nBody text,\r\nOwnerUserId integer,\r\nLasActivityDate datetime,\r\nTitle text,\r\nTags text,\r\nAnswerCount integer,\r\nCommentCount integer,\r\nFavoriteCount integer,\r\nLastEditorUserId integer,\r\nLastEditDate datetime,\r\nCommunityOwnedDate datetime,\r\nParentId integer,\r\nClosedDate datetime,\r\nOwnerDisplayName text,\r\nLastEditorDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (OwnerUserId) REFERENCES users(Id),\r\nFOREIGN KEY (LastEditorUserId) REFERENCES users(Id),\r\nFOREIGN KEY (ParentId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE tags (\r\nId integer,\r\nTagName text,\r\nCount integer,\r\nExcerptPostId integer,\r\nWikiPostId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE users (\r\nId integer,\r\nReputation integer,\r\nCreationDate datetime,\r\nDisplayName text,\r\nLastAccessDate datetime,\r\nWebsiteUrl text,\r\nLocation text,\r\nAboutMe text,\r\nViews integer,\r\nUpVotes integer,\r\nDownVotes integer,\r\nAccountId integer,\r\nAge integer,\r\nProfileImageUrl text,\r\nPRIMARY KEY (Id),\r\n);\r\nCREATE TABLE votes (\r\nId integer,\r\nPostId integer,\r\nVoteTypeId integer,\r\nCreationDate date,\r\nUserId integer,\r\nBountyAmount integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\n---------------------\r\nQUESTION: What is the average number of badges obtained by a user with over 200 views? user with over 200 views refers to Views > 200; average number of badges = Divide (Count(Id), Count(DisplayName)) the number of badges refers to COUNT(Name);\r\nCREATED SQL: SELECT CAST(COUNT(Id) AS REAL) / COUNT(DisplayName) FROM badges WHERE UserId IN ( SELECT Id FROM users WHERE Views > 200 )\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL: SELECT CAST(COUNT(Id) AS REAL) / COUNT(DisplayName) FROM badges WHERE UserId IN ( SELECT Id FROM users WHERE+\n\t----- bird -----\tcodebase_community", "557": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE badges (\r\nId integer,\r\nUserId integer,\r\nName text,\r\nDate datetime,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE comments (\r\nId integer,\r\nPostId integer,\r\nScore integer,\r\nText text,\r\nCreationDate datetime,\r\nUserId integer,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postHistory (\r\nId integer,\r\nPostHistoryTypeId integer,\r\nPostId integer,\r\nRevisionGUID text,\r\nCreationDate datetime,\r\nUserId integer,\r\nText text,\r\nComment text,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postLinks (\r\nId integer,\r\nCreationDate datetime,\r\nPostId integer,\r\nRelatedPostId integer,\r\nLinkTypeId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (RelatedPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE posts (\r\nId integer,\r\nPostTypeId integer,\r\nAcceptedAnswerId integer,\r\nCreaionDate datetime,\r\nScore integer,\r\nViewCount integer,\r\nBody text,\r\nOwnerUserId integer,\r\nLasActivityDate datetime,\r\nTitle text,\r\nTags text,\r\nAnswerCount integer,\r\nCommentCount integer,\r\nFavoriteCount integer,\r\nLastEditorUserId integer,\r\nLastEditDate datetime,\r\nCommunityOwnedDate datetime,\r\nParentId integer,\r\nClosedDate datetime,\r\nOwnerDisplayName text,\r\nLastEditorDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (OwnerUserId) REFERENCES users(Id),\r\nFOREIGN KEY (LastEditorUserId) REFERENCES users(Id),\r\nFOREIGN KEY (ParentId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE tags (\r\nId integer,\r\nTagName text,\r\nCount integer,\r\nExcerptPostId integer,\r\nWikiPostId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE users (\r\nId integer,\r\nReputation integer,\r\nCreationDate datetime,\r\nDisplayName text,\r\nLastAccessDate datetime,\r\nWebsiteUrl text,\r\nLocation text,\r\nAboutMe text,\r\nViews integer,\r\nUpVotes integer,\r\nDownVotes integer,\r\nAccountId integer,\r\nAge integer,\r\nProfileImageUrl text,\r\nPRIMARY KEY (Id),\r\n);\r\nCREATE TABLE votes (\r\nId integer,\r\nPostId integer,\r\nVoteTypeId integer,\r\nCreationDate date,\r\nUserId integer,\r\nBountyAmount integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\n---------------------\r\nQUESTION: Among the posts with a score of over 20, what is the percentage of them being owned by an elder user? score of over 20 refers to Score > 20; elder user refers to Age > 65; percentage = Divide (Count(Id where Age>65), Count(Id)) * 100%\r\nCREATED SQL: SELECT CAST(SUM(CASE WHEN T1.Age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T2.Id = T1.OwnerUserId WHERE T1.Score > 20\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tcodebase_community", "558": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE badges (\r\nId integer,\r\nUserId integer,\r\nName text,\r\nDate datetime,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE comments (\r\nId integer,\r\nPostId integer,\r\nScore integer,\r\nText text,\r\nCreationDate datetime,\r\nUserId integer,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postHistory (\r\nId integer,\r\nPostHistoryTypeId integer,\r\nPostId integer,\r\nRevisionGUID text,\r\nCreationDate datetime,\r\nUserId integer,\r\nText text,\r\nComment text,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postLinks (\r\nId integer,\r\nCreationDate datetime,\r\nPostId integer,\r\nRelatedPostId integer,\r\nLinkTypeId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (RelatedPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE posts (\r\nId integer,\r\nPostTypeId integer,\r\nAcceptedAnswerId integer,\r\nCreaionDate datetime,\r\nScore integer,\r\nViewCount integer,\r\nBody text,\r\nOwnerUserId integer,\r\nLasActivityDate datetime,\r\nTitle text,\r\nTags text,\r\nAnswerCount integer,\r\nCommentCount integer,\r\nFavoriteCount integer,\r\nLastEditorUserId integer,\r\nLastEditDate datetime,\r\nCommunityOwnedDate datetime,\r\nParentId integer,\r\nClosedDate datetime,\r\nOwnerDisplayName text,\r\nLastEditorDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (OwnerUserId) REFERENCES users(Id),\r\nFOREIGN KEY (LastEditorUserId) REFERENCES users(Id),\r\nFOREIGN KEY (ParentId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE tags (\r\nId integer,\r\nTagName text,\r\nCount integer,\r\nExcerptPostId integer,\r\nWikiPostId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE users (\r\nId integer,\r\nReputation integer,\r\nCreationDate datetime,\r\nDisplayName text,\r\nLastAccessDate datetime,\r\nWebsiteUrl text,\r\nLocation text,\r\nAboutMe text,\r\nViews integer,\r\nUpVotes integer,\r\nDownVotes integer,\r\nAccountId integer,\r\nAge integer,\r\nProfileImageUrl text,\r\nPRIMARY KEY (Id),\r\n);\r\nCREATE TABLE votes (\r\nId integer,\r\nPostId integer,\r\nVoteTypeId integer,\r\nCreationDate date,\r\nUserId integer,\r\nBountyAmount integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\n---------------------\r\nQUESTION: How many votes did the user No.58 take on 2010/7/19? user no. 58 refers to UserId = 58; on 2010/7/19 refers to CreationDate = '2010-07-19' the date format is 'yyyy-MM-dd'\r\nCREATED SQL: SELECT COUNT(T1.Id) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CreationDate = '2010-07-19' AND T1.UserId = 58\r\nEND OF QUESTION\r\nCREATED SQL: SELECT COUNT(T1.Id) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.C+\n\t----- bird -----\tcodebase_community", "559": "Based on the database schema below and the question, create a SQL query that will return the desired result:\r\nDATABASE SCHEMA\r\n---------------------\r\nCREATE TABLE badges (\r\nId integer,\r\nUserId integer,\r\nName text,\r\nDate datetime,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE comments (\r\nId integer,\r\nPostId integer,\r\nScore integer,\r\nText text,\r\nCreationDate datetime,\r\nUserId integer,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postHistory (\r\nId integer,\r\nPostHistoryTypeId integer,\r\nPostId integer,\r\nRevisionGUID text,\r\nCreationDate datetime,\r\nUserId integer,\r\nText text,\r\nComment text,\r\nUserDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\nCREATE TABLE postLinks (\r\nId integer,\r\nCreationDate datetime,\r\nPostId integer,\r\nRelatedPostId integer,\r\nLinkTypeId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (RelatedPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE posts (\r\nId integer,\r\nPostTypeId integer,\r\nAcceptedAnswerId integer,\r\nCreaionDate datetime,\r\nScore integer,\r\nViewCount integer,\r\nBody text,\r\nOwnerUserId integer,\r\nLasActivityDate datetime,\r\nTitle text,\r\nTags text,\r\nAnswerCount integer,\r\nCommentCount integer,\r\nFavoriteCount integer,\r\nLastEditorUserId integer,\r\nLastEditDate datetime,\r\nCommunityOwnedDate datetime,\r\nParentId integer,\r\nClosedDate datetime,\r\nOwnerDisplayName text,\r\nLastEditorDisplayName text,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (OwnerUserId) REFERENCES users(Id),\r\nFOREIGN KEY (LastEditorUserId) REFERENCES users(Id),\r\nFOREIGN KEY (ParentId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE tags (\r\nId integer,\r\nTagName text,\r\nCount integer,\r\nExcerptPostId integer,\r\nWikiPostId integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),\r\n);\r\nCREATE TABLE users (\r\nId integer,\r\nReputation integer,\r\nCreationDate datetime,\r\nDisplayName text,\r\nLastAccessDate datetime,\r\nWebsiteUrl text,\r\nLocation text,\r\nAboutMe text,\r\nViews integer,\r\nUpVotes integer,\r\nDownVotes integer,\r\nAccountId integer,\r\nAge integer,\r\nProfileImageUrl text,\r\nPRIMARY KEY (Id),\r\n);\r\nCREATE TABLE votes (\r\nId integer,\r\nPostId integer,\r\nVoteTypeId integer,\r\nCreationDate date,\r\nUserId integer,\r\nBountyAmount integer,\r\nPRIMARY KEY (Id),\r\nFOREIGN KEY (PostId) REFERENCES posts(Id),\r\nFOREIGN KEY (UserId) REFERENCES users(Id),\r\n);\r\n---------------------\r\nQUESTION: Indicate the creation date of the maximum number of votes. the creation date of the maximum number of votes refers to CreationDate where Max(Count(Id)) the number of votes refers to Count(Id)\r\nCREATED SQL: SELECT T1.CreationDate FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id ORDER BY T2.ViewCount DESC LIMIT 1\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF QUESTION\r\nCREATED SQL\r\nEND OF+\n\t----- bird -----\tcodebase_community"}