{
    "0": "\nSELECT MAX(T1.FRPM Eligible Free (K-12)) AS HighestEligibleFreeRate\nFROM frpm AS T1\nJOIN schools AS T2 ON T1.CDSCode = T2.CDSCode\nWHERE T2.CountyName = 'Alameda';\nSQL_END\n\n\t----- bird -----\tcalifornia_schools",
    "1": "\nSELECT s.sname, s.dname, s.cname\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE f.School Type = 'Continuation School' AND f.FRPM Count (Ages 5-17) >= 3;\n\n\t----- bird -----\tcalifornia_schools",
    "2": "\nSELECT DISTINCT T1.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Fresno' AND T2.State = 'CA' AND T2.Charter = 1;\n\t----- bird -----\tcalifornia_schools",
    "3": "\nSELECT sms.CDSCode, sms.NCESDist, sms.NCESSchool, sms.StatusType, sms.County, sms.District, sms.School, sms.Street, sms.StreetAbr, sms.City, sms.Zip, sms.State, sms.MailStreet, sms.MailStrAbr, sms.MailCity, sms.MailZip, sms.MailState, sms.Phone, sms.Ext, sms.OpenDate, sms.ClosedDate, sms.Charter, sms.CharterNum, sms.FundingType, sms.DOC, sms.DOCType, sms.SOC, sms.SOCType, sms.EdOpsCode, sms.EdOpsName, sms.EILCode, sms.EILName, sms.GSoffered, sms.GSserved, sms.Virtual, sms.Magnet\nFROM schools AS sms\nJOIN frpm AS f ON sms.CDSCode = f.CDSCode\nWHERE f.FRPMCountK12 > (SELECT MAX(frpm_count) FROM frpm WHERE f.FRPMCountK12 IS NOT NULL)\nORDER BY sms.County, sms.District, sms.School;\n\n\t----- bird -----\tcalifornia_schools",
    "4": "\nSELECT DISTINCT T2.Phone FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.StatusType = 'Charter' AND T1.OpenDate > '2000-01-01' GROUP BY T2.Phone ORDER BY T2.Phone \n\t----- bird -----\tcalifornia_schools",
    "5": "\nSELECT COUNT(CDSCode) FROM schools WHERE (FundingType = 'Virtual') AND (MathAvgScore < 400) GROUP BY CDSCode SQL_END\n\t----- bird -----\tcalifornia_schools",
    "6": "\nSELECT DISTINCT s.school, s.statusType\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE f.School Type = 'Magnet' OR f.School Type = 'Offering Magnet Program';\nSQL_END\n\n\t----- bird -----\tcalifornia_schools",
    "7": "\nSELECT T2.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDS = T2.cds WHERE T2.NumGE1500 > 1500;\nSQL_END\n\n\t----- bird -----\tcalifornia_schools",
    "8": "\nSELECT COUNT(DISTINCT s.name) AS FRPMCountK12\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.School Code\nWHERE f.FRPM Count (K-12) = (\n  SELECT MAX(frpm_count)\n  FROM frpm\n  WHERE CDSCode = s.CDSCode\n);\n\n\t----- bird -----\tcalifornia_schools",
    "9": "\nSELECT COUNT(DISTINCT s.CDSCode)\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.School Code\nWHERE f.RTS = '560' AND f.Charter School (Y/N) = 1;\nSQL_END\n\n\t----- bird -----\tcalifornia_schools",
    "10": "\nSELECT s.sname, s.dname, s.cname, s.enroll12, s.NumTstTakr, s.AvgScrRead, s.AvgScrMath, s.AvgScrWrite, s.NumGE1500\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE f.SchoolType = 'FRPM' AND f.FRPMCount (Ages 5-17) = (\n    SELECT MAX(f2.FRPCount(Ages 5-17))\n    FROM frpm f2\n    WHERE f2.SchoolType = 'FRPM'\n)\nORDER BY s.enroll12 DESC;\nSQL_END\n\n\t----- bird -----\tcalifornia_schools",
    "11": "\nSELECT DISTINCT T1.CDSCode\nFROM frpm AS T1\nJOIN schools AS T2 ON T1.CDSCode = T2.CDSCode\nWHERE T1.Enrollment (K-12) > 500;\nSQL_END\n\n\t----- bird -----\tcalifornia_schools",
    "12": "\nSELECT s.sname, s.enroll12, s.NumTstTakr, s.AvgScrRead, s.AvgScrMath, s.AvgScrWrite, s.NumGE1500\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.School Code\nWHERE f.FRPM Count (Ages 5-17) > 0.3;\n\n\t----- bird -----\tcalifornia_schools",
    "13": "\nSELECT DISTINCT T1.cds, T2.phone FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.SATEXCELERTYPE = 'Top 3' GROUP BY T1.CDS ORDER BY COUNT(*) DESC LIMIT 3 SQL_END\n\t----- bird -----\tcalifornia_schools",
    "14": "\nSELECT \n    s.CDSCode,\n    s.NCESDist,\n    s.NCESSchool,\n    s.StatusType,\n    s.County,\n    s.District,\n    s.School,\n    s.Street,\n    s.StreetAbr,\n    s.City,\n    s.Zip,\n    s.State,\n    s.MailStreet,\n    s.MailStrAbr,\n    s.MailCity,\n    s.MailZip,\n    s.MailState,\n    s.Phone,\n    s.Ext,\n    s.OpenDate,\n    s.ClosedDate,\n    s.Charter,\n    s.CharterNum,\n    s.FundingType,\n    s.DOC,\n    s.DOCType,\n    s.SOC,\n    s.SOCType,\n    s.EdOpsCode,\n    s.EdOpsName,\n    s.EILCode,\n    s.EILName,\n    s.GSoffered,\n    s.GSserved,\n    s.Virtual,\n    s.Magnet,\n    s.Latitude,\n    s.Longitude,\n    s.AdmFName1,\n    s.AdmLName1,\n    s.AdmEmail1,\n    s.AdmFName2,\n    s.AdmLName2,\n    s.AdmEmail2,\n    s.AdmFName3,\n    s.AdmLName3,\n    s.AdmEmail3,\n    s.LastUpdate\nFROM \n    frpm f\nJOIN \n    schools s ON f.CDSCode = s.CDSCode;\nSQL_END\n\n\t----- bird -----\tcalifornia_schools",
    "15": "\nSELECT sds.dname, AVG(sds.AvgScrRead) AS avg_reading\nFROM schools sds\nJOIN frpm f ON sds.CDSCode = f.CDSCode\nWHERE f.CharterSchool (Y/N) = 1\nGROUP BY sds.dname\nORDER BY avg_reading DESC\nLIMIT 1\n\n\t----- bird -----\tcalifornia_schools",
    "16": "\nSELECT COUNT(CDSCode)\nFROM frpm\nWHERE CDSCode IN (\n    SELECT T1.CDSCode\n    FROM satscores AS T1\n    JOIN schools AS T2 ON T1.School = T2.CDSCode\n    WHERE T1.NumTstTakr < 100\n);\n\n\t----- bird -----\tcalifornia_schools",
    "17": "\nSELECT DISTINCT T1.CDSCode, T2.CharterNumber FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AvgScrWrite = 499 \n\t----- bird -----\tcalifornia_schools",
    "18": "\nSELECT COUNT(CDSCode)\nFROM frpm\nWHERE StatusType = 'Directly Funded'\n  AND (Enroll12 <= 250 OR FreeMealCount >= 250);\nSQL_END\n\n\t----- bird -----\tcalifornia_schools",
    "19": "\nSELECT T1.cds, T2.phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.rtype = 'Math' ORDER BY T2.AvgScrMath DESC LIMIT 1 \n\t----- bird -----\tcalifornia_schools",
    "20": "\nSELECT COUNT(CDSCode) FROM frpm WHERE Low Grade = 9 AND High Grade = 12 GROUP BY CDSCode \n\t----- bird -----\tcalifornia_schools",
    "21": "\nSELECT COUNT(CDSCode)\nFROM frpm\nWHERE Charter School (Y) = 1 AND Charter School Number > 500 AND Charter School Number < 700;\nSQL_END\n\n\t----- bird -----\tcalifornia_schools",
    "22": "\n\t----- bird -----\tcalifornia_schools",
    "23": "\nSELECT DISTINCT s.sname, s.dname, s.cname, s.street, s.streetAbr, s.city, s.zip, s.state, s.mailStreet, s.mailStrAbr, s.mailCity, s.mailZip, s.mailState, s.phone, s.ext, s.website, s.openDate, s.closedDate\nFROM schools s\nWHERE (s.enroll12 - s.NumTstTakr) > 30;\n\n\t----- bird -----\tcalifornia_schools",
    "24": "\nSELECT s.name\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE f.percent_eligible_free >= 0.1;\nSQL_END\n\n\t----- bird -----\tcalifornia_schools",
    "25": "\nSELECT T1.FundingType FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AverageScrMath > 400;\nSQL_END\n\n\t----- bird -----\tcalifornia_schools",
    "26": "\nSELECT s.sname, s.dname, s.cname, s.street, s.streetAbr, s.city, s.zip, s.state, s.mailStreet, s.mailStrAbr, s.mailCity, s.mailZip, s.mailState, s.phone, s.ext, s.website, s.openDate, s.closedDate, s.charter, s.fundingType, s.doc, s.docType, s.soc, s.socType, s.edOpsCode, s.edOpsName, s.eilCode, s.eilName, s.gsoffered, s.gserved, s.virtual, s.magnet\nFROM schools s\nWHERE s.cds = 'CDS1234567890'\nAND s.enroll12 > 800\nAND (SELECT COUNT(*) FROM frpm WHERE frpm.CDSCode = s.CDSCode AND frpm.High Grade = 'Ages 5-17' AND frpm.FREE Meal Count (Ages 5-17) >= 1)\n\n\t----- bird -----\tcalifornia_schools",
    "27": "\nSELECT s.sname, AVG(satscores.AvgScrWrite) as AvgWritingScore\nFROM schools s\nWHERE s.CDSCode IN (\n  SELECT ffr.CDSCode\n  FROM frpm ffr\n  WHERE ffr.OpenDate > '1991-01-01' AND ffr.ClosedDate < '2000-12-31'\n)\nGROUP BY s.sname;\n\n\t----- bird -----\tcalifornia_schools",
    "28": "\nSELECT sds.CDSCode, sds.DOC\nFROM schools sds\nJOIN frpm f ON sds.CDSCode = f.CDSCode\nWHERE f.School Type = 'Local' AND (f.High Grade = 15 OR f.High Grade = 17)\nGROUP BY sds.CDSCode, sds.DOC\nHAVING AVG(f.Enrollment (K-12)) - AVG(f.Enrollment (Ages 5-17)) > 0;\n\n\t----- bird -----\tcalifornia_schools",
    "29": "\nSELECT T1.CDSCode, T1.OpenDate FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.HighGrade = 'First-through-twelfth-grade' ORDER BY T1.OpenDate LIMIT 1 \n\t----- bird -----\tcalifornia_schools",
    "30": "\nSELECT DISTINCT T3.City\nFROM frpm AS T1\nJOIN schools AS T2 ON T1.CDSCode = T2.CDSCode\nWHERE T1.School Type = 'K-12' AND T1.School Name LIKE '%%-%%'\nGROUP BY T1.CDSCode, T1.School Code, T1.School Name\nORDER BY COUNT(*) DESC\nLIMIT 5;\n\n\t----- bird -----\tcalifornia_schools",
    "31": "\nSELECT s.sname, s.enroll12, s.NumTstTakr, s.AvgScrRead, s.AvgScrMath, s.AvgScrWrite, s.NumGE1500\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE f.School Type = 'Charter' AND f.Charter School (Y/N) = 1\nORDER BY s.enroll12 DESC LIMIT 10;\n\n\t----- bird -----\tcalifornia_schools",
    "32": "\nSELECT s.sname, s.dname, s.cname, s.enroll12, s.NumTstTakr, s.AvgScrRead, s.AvgScrMath, s.AvgScrWrite, s.NumGE1500\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE f.School Type = 'Charter' AND f.Charter School (Y/N) = 1\nORDER BY s.enroll12 DESC LIMIT 5;\n\n\t----- bird -----\tcalifornia_schools",
    "33": "\nSELECT s.sname, s.cds\nFROM schools s\nWHERE s.CDSCode IN (\n  SELECT T1.CDSCode\n  FROM frpm T1\n  WHERE T1.HighGrade = 'Ages 5-17' AND T1.FreeMealCount >= 1900 AND T1.FreeMealCount <= 2000\n)\n\n\t----- bird -----\tcalifornia_schools",
    "34": "\nSELECT s.sname, s.dname, s.cname, s.enroll12, s.NumTstTakr, s.AvgScrRead, s.AvgScrMath, s.AvgScrWrite, s.NumGE1500\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE f.School Type = 'K-12' AND f.FREE Meal Count (Ages 5-17) > 0;\n\n\t----- bird -----\tcalifornia_schools",
    "35": "\nSELECT T3.AdmEmail1\nFROM schools AS T1\nJOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode\nWHERE T2.SchoolType = 'Charter' AND T2.CharterNumber IS NOT NULL\nGROUP BY T3.AdmEmail1\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n\t----- bird -----\tcalifornia_schools",
    "36": "\nSELECT T1.CDSCode, T1.NCESDist, T1.NCESSchool, T1.StatusType, T1.County, T1.District, T1.School, T2.Firstname, T2.Lastname\nFROM frpm AS T1\nJOIN satscores AS T2 ON T1.CDSCode = T2.cds\nWHERE T1.HighGrade >= 5 AND T1.LowGrade <= 17\nORDER BY T1.HighGrade DESC;\n\n\t----- bird -----\tcalifornia_schools",
    "37": "\nSELECT s.CDSCode, s.NCESDist, s.NCESSchool, s.StatusType, s.County, s.District, s.School, s.Street, s.City, s.Zip, s.State\nFROM schools s\nWHERE s.EducationOptionType = 'FRPM' AND s.FundingType = 'CALPADS Fall 1'\nORDER BY s.Enrollment (Ages 5-17) ASC;\n\n\t----- bird -----\tcalifornia_schools",
    "38": "\nSELECT DISTINCT s.sname, s.dname, s.cname, s.street, s.city, s.zip, s.state, s.mailStreet, s.mailStrAbr, s.mailCity, s.mailZip, s.mailState FROM schools s WHERE s.CDSCode = (SELECT CDSCode FROM frpm WHERE Enroll (5-17) >= 2000 AND Enroll (5-17) <= 3000) SQL_END\n\t----- bird -----\tcalifornia_schools",
    "39": "\nSELECT AVG(T1.NumTstTakr) AS AverageNumberOfTestTakeers\nFROM schools AS T1\nJOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode\nWHERE T1.OpenDate BETWEEN '1/1/1980' AND '12/31/1980';\n\n\t----- bird -----\tcalifornia_schools",
    "40": "\nSELECT T1.cds, T1.NCESDist, T1.NCESSchool, T1.StatusType, T1.County, T1.District, T1.School, T1.Street, T1.City, T1.Zip, T1.State, T1.MailStreet, T1.MailStrAbr, T1.MailCity, T1.MailZip, T1.MailState, T1.Phone, T1.Ext, T1.OpenDate, T1.ClosedDate, T1.Charter, T1.CharterNum, T1.FundingType, T1.DOC, T1.DOCType, T1.SOC, T1.SOCType, T1.EdOpsCode, T1.EdOpsName, T1.EILCode, T1.EILName, T1.GSoffered, T1.GSserved, T1.Virtual, T1.Magnet FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDS = T2.cds WHERE T2.rtype = 'Reading' ORDER BY T2.AvgScrRead DESC LIMIT 1;\n\t----- bird -----\tcalifornia_schools",
    "41": "\nSELECT DISTINCT s.CDSCode\nFROM schools s\nWHERE NOT EXISTS (\n  SELECT * \n  FROM frpm f \n  WHERE s.CDSCode = f.CDSCode AND f.CharterSchool (Y) = 1\n)\nAND NOT EXISTS (\n  SELECT * \n  FROM satscores sa \n  WHERE s.CDSCode = sa.cds AND sa.rtype = 'Reading' AND sa.NumGE1500 > 0\n)\nORDER BY s.CDSCode DESC\n\n\t----- bird -----\tcalifornia_schools",
    "42": "\nSELECT DISTINCT T1.School, T2.rtype FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Academic Year = '2013-14' AND T2.High Grade = 'Ages 5-17' ORDER BY T2.Average Math Readiness DESC LIMIT 1\n\t----- bird -----\tcalifornia_schools",
    "43": "\nSELECT s.CDSCode, s.NCESchool, s.StatusType, s.County, AVG(s2.rtype) AS avg_math_score\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE f.School Type = 'Math' AND f.Charter School (Y/N) = 1\nGROUP BY s.CDSCode, s.NCESchool, s.StatusType, s.County;\n\n\t----- bird -----\tcalifornia_schools",
    "44": "\nSELECT s.sname, s.dname, AVG(s2.avgScrWrite) AS avgWritingScore\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE f.SchoolType = 'School' AND f.SchoolName LIKE '%Ages 5-17%'\nGROUP BY s.sname, s.dname;\n\n\t----- bird -----\tcalifornia_schools",
    "45": "\nSELECT s.CDSCode, s.School, AVG(s2.AvgScrWrite) AS AvgWritingScore\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE s.StatusType = 'Ricci Ulrich'\nGROUP BY s.CDSCode, s.School;\n\n\t----- bird -----\tcalifornia_schools",
    "46": "\nSELECT DISTINCT s.sname, s.dname\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE f.School Type = 'Special School' AND f.High Grade = '1-2'\nORDER BY s.enroll12 DESC;\nSQL_END\n\n\t----- bird -----\tcalifornia_schools",
    "47": "\nSELECT \n    s.CDSCode,\n    COUNT(*) AS OpenCount\nFROM \n    frpm f\nJOIN \n    schools s ON f.CDSCode = s.CDSCode\nWHERE \n    s.State = 'CA' AND s.Zip LIKE '%Alameda%'\nAND \n    f.EDUOPSName = 'Elementary School District'\nAND \n    f.OpenDate >= '1980-01-01' AND f.CloseDate <= '1980-12-31'\nGROUP BY \n    s.CDSCode\nHAVING \n    COUNT(*) > 0;\n\n\t----- bird -----\tcalifornia_schools",
    "48": "\nSELECT (SELECT COUNT(*) FROM frpm AS f1 JOIN schools AS s1 ON f1.CDSCode = s1.CDSCode WHERE s1.CountyName = 'Orange County') / \n(SELECT COUNT(*) FROM frpm AS f2 JOIN schools AS s2 ON f2.CDSCode = s2.CDSCode WHERE s2.CountyName = 'Orange County') \n\t----- bird -----\tcalifornia_schools",
    "49": "\nSELECT s.CDSCode, s.Name, s.CloseDate\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE f.CharterSchool (Y) = 1 AND f.CharterSchool Number = '0'\nGROUP BY s.CDSCode, s.Name, s.CloseDate\nORDER BY COUNT(*) DESC;\nSQL_END\n\n\t----- bird -----\tcalifornia_schools",
    "50": "\nSELECT s.CDSCode, s.NCESchool, s.Street, s.StreetAbr, s.City, s.Zip, s.State, s.MailStreet, s.MailStrAbr, s.MailCity, s.MailZip, s.MailState, s.Phone, s.Ext, s.OpenDate, s.ClosedDate, s.Charter, s.FundingType, s.DOC, s.DOCType, s.SOC, s.SOCType, s.EdOpsCode, s.EdOpsName, s.EILCode, s.EILName, s.GSoffered, s.GSserved, s.Virtual, s.Magnet\nFROM schools s\nWHERE s.Street = (\n  SELECT MAX(Street)\n  FROM schools\n  WHERE Street = (SELECT Street FROM schools ORDER BY AvgScrMath DESC LIMIT 1)\n);\n\n\t----- bird -----\tcalifornia_schools",
    "51": "\nSELECT s.CDSCode, s.School, s.NCESDist, s.NCESSchool, s.StatusType, s.County, s.District, s.Street, s.City, s.Zip, s.State, s.MailStreet, s.MailStrAbr, s.MailCity, s.MailZip, s.MailState, s.Phone, s.Ext, s.OpenDate, s.ClosedDate, s.Charter, s.CharterNum\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE f.SchoolType = 'Low Grade' AND f.HighGrade = 0;\n\n\t----- bird -----\tcalifornia_schools",
    "52": "\nSELECT COUNT(CDSCode)\nFROM satscores\nWHERE AvgScrRead >= 1500 AND (State = 'Lakeport' OR State IS NULL);\nSQL_END\n\n\t----- bird -----\tcalifornia_schools",
    "53": "\nSELECT COUNT(DISTINCT s.CDSCode) AS TestTakersCount\nFROM schools s\nWHERE s.MailingCity = 'Fresno';\nSQL_END\n\n\t----- bird -----\tcalifornia_schools",
    "54": "\nSELECT DISTINCT s.CDSCode, s.NCESDist, s.NCESSchool, s.StatusType, s.County, s.District, s.School, s.Street, s.City, s.Zip, s.State, s.MailStreet, s.MailStrAbr, s.MailCity, s.MailZip, s.Phone, s.Ext, s.OpenDate, s.ClosedDate, s.Charter, s.CharterNum, s.FundingType, s.DOC, s.DOCType, s.SOC, s.SOCType, s.EdOpsCode, s.EdOpsName, s.EILCode, s.EILName, s.GSoffered, s.GSserved, s.Virtual, s.Magnet, s.Latitude, s.Longitude FROM schools s WHERE s.StatusType = 'A' AND s.Charter = 1 AND s.CharterNum LIKE 'Avetik Atoian%' GROUP BY s.CDSCode, s.NCESDist, s.NCESSchool, s.StatusType, s.County, s.District, s.School, s.Street, s.City, s.Zip, s.State, s.MailStreet, s.MailStrAbr, s.MailCity, s.MailZip, s.Phone, s.Ext, s.OpenDate, s.ClosedDate, s.Charter, s.CharterNum\n\t----- bird -----\tcalifornia_schools",
    "55": "\nSELECT T1.County, (T2.NumTstTakr / T2.NumTstTakr) * 100 AS ratio\nFROM schools AS T1\nJOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode\nWHERE T1.MailingStateAddress LIKE 'CA%'\nAND T1.County = 'Colusa'\nGROUP BY T1.County\n\n\t----- bird -----\tcalifornia_schools",
    "56": "\nSELECT COUNT(CDSCode) FROM schools WHERE State = 'CA' AND AdmFName1 LIKE '%San Joaquin%' \n\t----- bird -----\tcalifornia_schools",
    "57": "\nSELECT T1.cds, T2.phone, T2.ext FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AverageScrWrite = ( SELECT MAX(AverageScrWrite) FROM frpm ) AND T1.Phone = ( SELECT MAX(Phone) FROM schools ) \n\t----- bird -----\tcalifornia_schools",
    "58": "\nSELECT T1.cds, T2.phone, T2.ext FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.zip = '95203-3704'\n\t----- bird -----\tcalifornia_schools",
    "59": "\nSELECT T1.website FROM schools AS T1 INNER JOIN administrations AS T2 ON T1.AdmFName1 = T2.administration_name WHERE T2.administration_name IN ('Mike Larson', 'Dante Alvarez') \n\t----- bird -----\tcalifornia_schools",
    "60": "\nSELECT sws.WS, ssws.SWSite FROM schools AS sws JOIN chartered_schools AS cs ON sws.CDSCode = cs.CDSCode WHERE cs.Charter = 1 AND cs.CharterNum LIKE '00%' AND cs.State = 'CA' AND cs.Zip IS NOT NULL AND cs.State = 'CA' AND cs.Zip LIKE '%San Joaquin%' GROUP BY ssws.SWSite, cs.State ORDER BY cs.State ASC \n\t----- bird -----\tcalifornia_schools",
    "61": "\nSELECT COUNT(*) FROM schools WHERE City = 'Hickman' AND County = 'Elementary School District' AND Charter = 1\n\t----- bird -----\tcalifornia_schools",
    "62": "\nSELECT COUNT(CDSCode)\nFROM frpm\nWHERE Charter School (Y/N) = 0 AND Charter Funding Type = 'FRPM'\n  AND (Percent (%) Eligible Free (K-12) < 0.18 OR Percent (%) Eligible FRPM (K-12) < 0.18)\n  AND County Name = 'Los Angeles';\n\n\t----- bird -----\tcalifornia_schools",
    "63": "\nSELECT DISTINCT s.name AS school_name, s.city FROM schools s WHERE s.charter = 00D2;\nSQL_END\n\n\t----- bird -----\tcalifornia_schools",
    "64": "\nSELECT COUNT(CDSCode) FROM schools WHERE mailing_city = 'Hickman' AND CharterNumber = '00D4' \n\t----- bird -----\tcalifornia_schools",
    "65": "\nSELECT CAST(SUM(CAST(1 AS REAL) / COUNT(DISTINCT CDSCode)) AS REAL) * 100 AS percentage_funded\nFROM frpm\nJOIN schools ON frpm.CDSCode = schools.CDSCode\nWHERE schools.State = 'CA' AND schools.FundingType = 'Local'\nGROUP BY schools.State, schools.FundingType;\n\n\t----- bird -----\tcalifornia_schools",
    "66": "\nSELECT COUNT(CDSCode)\nFROM frpm\nWHERE YEAR(CDSCode) BETWEEN 2000 AND 2005;\nSQL_END\n\n\t----- bird -----\tcalifornia_schools",
    "67": "\nSELECT SUM(CASE WHEN T1.CDSCode = 'CDS0000000000000000' THEN 1 ELSE 0 END) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.City = 'San Francisco' AND T1.Year = 1989\n\t----- bird -----\tcalifornia_schools",
    "68": "\nSELECT T1.CDSCode, T2.CountyName\nFROM frpm AS T1\nJOIN schools AS T2 ON T1.CDSCode = T2.CDSCode\nWHERE T1.SchoolType = 'Y'\n  AND T1.SchoolFundingType = 'YEA'\n  AND T1.SchoolFundingType = 'YEA'::text\n  AND T1.SchoolFundingType = 'YEA'::text\n  AND T2.CountyName LIKE '%YAC%'\n  AND T1.CDSCode IN (\n    SELECT CDSCode\n    FROM satscores\n    WHERE rtype = 'S'\n      AND cds = (SELECT cds FROM frpm WHERE CountyName = 'YAC')\n      AND yr >= 1980\n      AND yr <= 2013\n  )\n  AND T1.CDSCode IN (\n    SELECT CDSCode\n    FROM schools\n    WHERE CountyName LIKE '%YAC%'\n      AND StatusType = 'Y'\n      AND yr >= 1980\n      AND yr <= 2013\n  );\n\n\t----- bird -----\tcalifornia_schools",
    "69": "\nSELECT DISTINCT sds.CDSCode FROM schools AS sds INNER JOIN frpm AS f ON sds.CDSCode = f.CDSCode WHERE sds.StateSpecialSchools IS NOT NULL AND sds.SchoolOwnershipCode IN (SELECT SchoolOwnershipCode FROM StateSpecialSchools) \n\t----- bird -----\tcalifornia_schools",
    "70": "\nSELECT COUNT(CD) FROM frpm WHERE CD = (SELECT CD FROM schools WHERE County = 'Alpine') AND StatusType = 'ACTIVE' INTERSECT SELECT COUNT(CD) FROM frpm WHERE CD = (SELECT CD FROM schools WHERE County = 'Alpine') AND StatusType = 'CLOSED' \n\t----- bird -----\tcalifornia_schools",
    "71": "\n\t----- bird -----\tcalifornia_schools",
    "72": "\nSELECT COUNT(*) AS Enrollment_Ages_5_17\nFROM frpm\nWHERE County = 'Fremont'\n  AND School = 'State Special School'\n  AND YEAR = 2014;\nSQL_END\n\n\t----- bird -----\tcalifornia_schools",
    "73": "\nSELECT s.sname, s.dname, s.cname, s.street, s.city, s.zip, s.state, s.mailStreet, s.mailStrAbr, s.mailCity, s.mailZip, s.mailState, s.phone, s.ext, s.website, s.openDate, s.closedDate, s.charter, s.fundingType, s.doc, s.docType, s.soc, s.socType, s.edOpsCode, s.edOpsName, s.eilCode, s.eilName, s.gsoffered, s.gserved, s.virtual, m.sname, m.dname, m.cname, m.street, m.city, m.zip, m.state, m.mailStreet, m.mailStrAbr, m.mailCity, m.mailZip, m.mailState, m.phone, m.ext, m.website, m.openDate, m.closedDate, m.charter, m.fundingType, m.doc, m.docType, m.soc, m.socType, m.edOpsCode, m.edOpsName, m.eilCode, m.eilName, m.gsoffered, m.gserved, m.virtual, m.magnet\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE s.districtType = 'Y' AND s.districtName = 'Youth Authority'\nAND s.charter = 1;\n\n\t----- bird -----\tcalifornia_schools",
    "74": "\n\t----- bird -----\tcalifornia_schools",
    "75": "\nSELECT DISTINCT T1.EducationalOptionType\nFROM frpm AS T1\nJOIN schools AS T2 ON T1.CDSCode = T2.CDSCode\nWHERE T2.County = '37' AND T1.FRBPMQST = 2;\nSQL_END\n\n\t----- bird -----\tcalifornia_schools",
    "76": "\nSELECT T1.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.SchoolType = 'High School' AND T2.LowerGrade = 9 AND T2.HighGrade = 12;\nSQL_END\n\n\t----- bird -----\tcalifornia_schools",
    "77": "\nSELECT s.CDSCode, s.SchoolName, s.DistrictName, s.FRPMCountAges517, (CAST(s.FRPMCountAges517 AS REAL) * 100 / CAST(s.Enrollment AS REAL)) AS FRPMPercentAges517\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nWHERE f.DistrictName = 'Los Angeles' AND f.SchoolType = 'Charter'\nGROUP BY s.CDSCode, s.SchoolName, s.DistrictName;\n\n\t----- bird -----\tcalifornia_schools",
    "78": "\nSELECT DISTINCT T2.GradeSpan FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.City = 'Adelanto' GROUP BY T2.GradeSpan ORDER BY COUNT(*) DESC LIMIT 1;\nSQL_END\n\n\t----- bird -----\tcalifornia_schools",
    "79": "\nSELECT \n    COUNT(CDSCode) AS SchoolsCount,\n    COUNT(DISTINCT County Name) AS CountiesOfferingNoBuildingSchools\nFROM \n    frpm\nWHERE \n    County Code = 'San Diego' AND District Code = 102\nUNION ALL\nSELECT \n    COUNT(CDSCode) AS SchoolsCount,\n    COUNT(DISTINCT County Name) AS CountiesOfferingNoBuildingSchools\nFROM \n    frpm\nWHERE \n    County Code = 'Santa Barbara' AND District Code = 103;\n\n\t----- bird -----\tcalifornia_schools",
    "80": "\nSELECT \n    s.School,\n    s.Latitude\nFROM \n    schools s\nWHERE \n    s.Latitude = (\n        SELECT MAX(Latitude)\n        FROM \n            schools\n    );\nSQL_END\n\n\t----- bird -----\tcalifornia_schools",
    "81": "\nSELECT DISTINCT s.CDSCode, s.SchoolName\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE f.Latitude = (SELECT MIN(Latitude) FROM schools WHERE State = 'California')\nAND f.HighGrade = 'K-12'\n\n\t----- bird -----\tcalifornia_schools",
    "82": "\nSELECT \n    MAX(CASE WHEN T1.Longitude > T2.Longitude THEN T1.CDSCode ELSE T2.CDSCode END) AS HighestLongitudeSchool,\n    T3.School\nFROM \n    schools S\nJOIN \n    frpm F ON S.CDSCode = F.CDSCode\nWHERE \n    F.HigherGradeSpanOffered IS NOT NULL\nORDER BY \n    T1.Longitude DESC;\n\n\t----- bird -----\tcalifornia_schools",
    "83": "\nSELECT COUNT(DISTINCT s.CDSCode) AS SchoolsOfferedMultipleProvisionTypes, COUNT(CASE WHEN s.FundingType = 'Magnet' THEN 1 ELSE NULL END) AS CitiesOfferingKindergartenTo8thGradeSpan\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE f.School Type = 'Charter School (Y/N)' AND f.Charter Funding Type = 'Multiple Provision Types'\nGROUP BY s.CDSCode;\n\n\t----- bird -----\tcalifornia_schools",
    "84": "\nSELECT DISTINCT T1.district, T2.first_name FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.status_type = 'Charter' GROUP BY T1.district, T2.first_name ORDER BY COUNT(*) DESC LIMIT 2 \n\t----- bird -----\tcalifornia_schools",
    "85": "\nSELECT sds.district_code, fs.percent_eligible_free_k12\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nJOIN schools sds ON sds.CDSCode = sdschools.CDSCode\nWHERE sdschools.first_name = 'Alusine'\n  AND sdschools.last_name = 'Alusine';\n\n\t----- bird -----\tcalifornia_schools",
    "86": "\nSELECT T1.district, T1.county, T1.school FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.CharterNumber = 40 \n\t----- bird -----\tcalifornia_schools",
    "87": "\nSELECT T1.Email FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'San Bernardino' AND T1.District = 'San Bernardino City Unified' AND T1.OpenDate BETWEEN '2009-01-01' AND '2010-12-31' GROUP BY T1.Email \n\t----- bird -----\tcalifornia_schools",
    "88": "\nSELECT s.School, s.NCESDist, s.NCESSchool, s.StatusType, s.County, s.District, s.City, s.Zip, s.State, s.MailStreet, s.MailStrAbr, s.MailCity, s.MailZip, s.MailState, s.Phone, s.Ext, s.OpenDate, s.ClosedDate, s.Charter, s.CharterNum\nFROM schools s\nWHERE s.County = 'your county code' AND s.District = 'your district code'\nORDER BY COUNT(school) DESC;\n\n\t----- bird -----\tcalifornia_schools",
    "89": "\nSELECT COUNT(account_id)\nFROM account\nWHERE district_id = (SELECT district_id FROM client WHERE district_id IN (\n    SELECT DISTINCT district_id FROM order WHERE status = 'paid' AND bank_to = 'bank')\n)) AND frequency = 'after transaction'\nAND date >= DATE('2019-01-01') AND date < DATE('2019-12-31');\n\n\t----- bird -----\tfinancial",
    "90": "\nSELECT COUNT(account_id)\nFROM account\nWHERE district_id IN (\n    SELECT district_id\n    FROM client\n    WHERE district_id = (SELECT district_id FROM district WHERE A15 = 'Prague')\n);\nSQL_END\n\n\t----- bird -----\tfinancial",
    "91": "\nSELECT AVG(unemployment_ratio(1995)) AS 1995, AVG(unemployment_ratio(1996)) AS 1996\nFROM (\n  SELECT DISTINCT account_id, unemployment_ratio\n  FROM loan\n  WHERE date BETWEEN '1995-01-01' AND '1996-12-31'\n) AS subquery;\n\n\t----- bird -----\tfinancial",
    "92": "\nSELECT COUNT(*) AS no_of_districts\nFROM district\nWHERE gender = 'female'\n  AND (average_salary > 6000 AND average_salary < 10000);\nSQL_END\n\n\t----- bird -----\tfinancial",
    "93": "\nSELECT COUNT(*) AS count\nFROM client\nWHERE gender = 'male'\n  AND district_id IN (\n    SELECT district_id\n    FROM account\n    WHERE frequency = 'monthly'\n      AND district_id = (SELECT district_id FROM district WHERE A15 > 0)\n  )\n  AND status = 'active'\n  AND type = 'fixed'\n  AND amount >= 8000;\n\n\t----- bird -----\tfinancial",
    "94": "\nSELECT DISTINCT a.account_id\nFROM account a\nJOIN client c ON a.client_id = c.client_id\nWHERE c.gender = 'female'\n  AND (a.birth_date, AVG(c.salary)) = (\n    SELECT birth_date, MAX(salary)\n    FROM client AS c\n    JOIN account AS a ON c.client_id = a.client_id\n    WHERE c.gender = 'female' AND c.birth_date = a.birth_date\n  )\n  ORDER BY a.birth_date DESC, a.salary DESC;\n\n\t----- bird -----\tfinancial",
    "95": "\nSELECT DISTINCT account_id\nFROM client\nWHERE birth_date = (SELECT MIN(birth_date) FROM client)\nGROUP BY account_id\nHAVING AVG(amount) = (\n    SELECT MAX(AVG(amount))\n    FROM order\n);\nSQL_END\n\n\t----- bird -----\tfinancial",
    "96": "\nSELECT COUNT(client_id) AS num_customers\nFROM client\nWHERE client_id IN (\n    SELECT account_id\n    FROM account\n    WHERE frequency = 'statement of weekly issuance'\n      AND district_id = (SELECT district_id FROM district WHERE A15 > 0)\n);\n\n\t----- bird -----\tfinancial",
    "97": "\nSELECT DISTINCT c.client_id\nFROM client c\nJOIN order o ON c.client_id = o.account_id\nWHERE o.amount > 0 AND o.status = 'completed' AND o.date >= '2023-10-01'\nGROUP BY c.client_id\nHAVING COUNT(DISTINCT t.account_id) = 1;\n\n\t----- bird -----\tfinancial",
    "98": "\nSELECT a.account_id, a.district_id, a.frequency, a.date, a.amount, a.balance\nFROM account a\nWHERE a.date >= '1997-01-01' AND a.date < '1998-01-01'\nORDER BY a.amount ASC;\n\n\t----- bird -----\tfinancial",
    "99": "\nSELECT a.*\nFROM account a\nJOIN loan l ON a.account_id = l.account_id\nWHERE l.date >= '1993-01-01' AND l.status = 'approved'\nGROUP BY a.account_id, a.district_id\nHAVING MAX(l.amount) > 12;\n\n\t----- bird -----\tfinancial",
    "100": "\nSELECT COUNT(client_id) AS number_of_females\nFROM client\nWHERE gender = 'female'\n  AND birth_date < '1950-01-01';\n\n\t----- bird -----\tfinancial",
    "101": "\nSELECT DISTINCT account_id\nFROM account\nWHERE date = (SELECT MIN(date) FROM account WHERE YEAR(date) = 1995);\nSQL_END\n\n\t----- bird -----\tfinancial",
    "102": "\nSELECT DISTINCT a.account_id\nFROM account a\nWHERE a.date < '1997-01-01'\n  AND a.frequency = 'monthly'\n  AND a.amount > 3000;\nSQL_END\n\n\t----- bird -----\tfinancial",
    "103": "\nSELECT T1.client_id \nFROM client AS T1 \nJOIN account AS T2 ON T1.account_id = T2.account_id \nWHERE T2.date BETWEEN '1994-03-01' AND '1994-03-03';\n\n\t----- bird -----\tfinancial",
    "104": "\nSELECT T1.date AS date, T2.district_id\nFROM account AS T1\nJOIN district AS T2 ON T1.district_id = T2.district_id\nWHERE T1.account_id = 840 AND T1.date = '1998-10-14';\n\n\t----- bird -----\tfinancial",
    "105": "\nSELECT T1.district_id \nFROM account AS T1 \nJOIN loan AS T2 ON T1.account_id = T2.account_id \nWHERE T2.date = '1994-08-25';\n\n\t----- bird -----\tfinancial",
    "106": "\nSELECT MAX(amount) AS biggest_amount\nFROM trans\nWHERE account_id = (SELECT account_id FROM client WHERE birth_date = '1996-10-21' AND district_id = 1);\nSQL_END\n\n\t----- bird -----\tfinancial",
    "107": "\nSELECT T1.gender\nFROM client AS T1\nJOIN account AS T2 ON T1.account_id = T2.account_id\nWHERE T1.district_id = (SELECT MAX(district_id) FROM district)\nGROUP BY T1.client_id, T1.district_id\nHAVING COUNT(T1.client_id) = (SELECT COUNT(*) FROM client);\n\n\t----- bird -----\tfinancial",
    "108": "\nSELECT T1.account_id, T1.amount\nFROM account AS T1\nJOIN loan AS T2 ON T1.account_id = T2.account_id\nWHERE T2.status = 'closed' AND T2.date >= '2023-01-01'\nORDER BY T1.date DESC LIMIT 1;\n\n\t----- bird -----\tfinancial",
    "109": "\nSELECT COUNT(client_id) AS num_clients\nFROM client\nWHERE district_id = (SELECT district_id FROM district WHERE A15 > 0 AND gender = 'W');\nSQL_END\n\n\t----- bird -----\tfinancial",
    "110": "\nSELECT DISTINCT T1.disp_id\nFROM client AS T1\nJOIN order AS T2 ON T1.client_id = T2.account_id\nWHERE T2.date BETWEEN '1998-09-01' AND '1998-09-30'\nAND T2.amount = 5100;\n\n\t----- bird -----\tfinancial",
    "111": "\nSELECT COUNT(account_id) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A15 = 0 AND A16 > 0 AND A17 = 'L' AND A18 = 'I') INTERSECT SELECT COUNT(account_id) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A15 = 0 AND A16 > 0 AND A17 = 'L' AND A18 = 'I') AND YEAR(date) = 1996 \n\t----- bird -----\tfinancial",
    "112": "\nSELECT T1.district_id\nFROM client AS T1\nJOIN district AS T2 ON T1.district_id = T2.district_id\nWHERE T1.gender = 'female' AND T1.birth_date = '1976-01-29';\n\n\t----- bird -----\tfinancial",
    "113": "\nSELECT T1.birth_date FROM client AS T1 INNER JOIN order AS T2 ON T1.client_id = T2.account_id WHERE T2.date = '1996-01-03' AND T1.status = 'paid' AND T1.amount = 98832;\n\n\t----- bird -----\tfinancial",
    "114": "\nSELECT DISTINCT a.account_id FROM account a INNER JOIN client c ON a.client_id = c.client_id WHERE c.district_id = (SELECT district_id FROM district WHERE A15 = 'Prague') AND c.birth_date = (SELECT birth_date FROM client WHERE client_id = 1) \n\t----- bird -----\tfinancial",
    "115": "\nSELECT \n    COUNT(*) AS total_clients,\n    SUM(CASE WHEN district.district_id = 1 THEN 1 ELSE 0 END) AS male_clients,\n    (COUNT(*) / COUNT(DISTINCT client.client_id)) * 100 AS percentage_males\nFROM \n    account a\nJOIN \n    district d ON a.district_id = d.district_id\nJOIN \n    client c ON a.account_id = c.account_id\nWHERE \n    d.district_id = 1 AND c.gender = 'male'\nGROUP BY \n    COUNT(*) / COUNT(DISTINCT client.client_id);\n\n\t----- bird -----\tfinancial",
    "116": "\nSELECT \n    (1998 - 1993) * 100 / 1993 AS increase_rate\nFROM \n    client\nWHERE \n    birth_date = '1993-07-05';\nSQL_END\n\n\t----- bird -----\tfinancial",
    "117": "\nSELECT SUM(loan.amount) AS total_loan_amount, COUNT(*) AS loan_count\nFROM order\nJOIN trans ON order.account_id = trans.account_id\nWHERE trans.type = 'payment' AND trans.operation = 'paid'\nGROUP BY loan.amount\nHAVING SUM(trans.amount) - SUM(trans.amount) * 100 / SUM(loan.amount) > 0;\n\n\t----- bird -----\tfinancial",
    "118": "\nSELECT COUNT(*) AS total_accounts, SUM(amount) / COUNT(*) * 100 AS percentage_running_with_no_issues\nFROM loan\nWHERE amount < 100000;\n\n\t----- bird -----\tfinancial",
    "119": "\nSELECT a.account_id, d.district_name, d.district_region\nFROM account a\nJOIN district d ON a.district_id = d.district_id\nWHERE a.date >= (SELECT issued FROM loan WHERE status = 'paid' AND amount > 0);\nSQL_END\n\n\t----- bird -----\tfinancial",
    "120": "\nSELECT DISTINCT account_id, frequency FROM account WHERE district_id = (SELECT district_id FROM district WHERE A15 > 0 AND A16 > 0) AND YEAR(date) IN (SELECT year FROM order WHERE month BETWEEN 1 AND 3) AND YEAR(date) NOT IN (SELECT year FROM order WHERE month = 12);\n\n\t----- bird -----\tfinancial",
    "121": "\nSELECT account_id, date FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Prachatice');\nSQL_END\n\n\t----- bird -----\tfinancial",
    "122": "\nSELECT T1.district_id, T1.district_name FROM district AS T1 INNER JOIN loan AS T2 ON T1.district_id = T2.district_id WHERE T2.loan_id = '4990' \n\t----- bird -----\tfinancial",
    "123": "\nSELECT a.account_id, d.district_id, d.region\nFROM account a\nJOIN district d ON a.district_id = d.district_id\nWHERE a.amount > 300000;\nSQL_END\n\n\t----- bird -----\tfinancial",
    "124": "\nSELECT T1.account_id, T1.district_id, AVG(T2.amount) AS average_salary\nFROM account AS T1\nJOIN loan AS T2 ON T1.account_id = T2.account_id\nWHERE T2.duration = 60\nGROUP BY T1.account_id, T1.district_id;\n\n\t----- bird -----\tfinancial",
    "125": "\nSELECT d.district_id, d.A15 AS state_percentage_unemployment_rate_increment_1996\nFROM district d\nJOIN account a ON d.district_id = a.district_id\nWHERE a.frequency = 'monthly' AND a.date >= '1995-01-01' AND a.date < '1996-01-01'\nAND a.status = 'running';\n\n\t----- bird -----\tfinancial",
    "126": "\nSELECT SUM(CASE WHEN T1.district_id = 19 THEN 1 ELSE 0 END) AS percentage\nFROM account AS T1\nWHERE T1.date BETWEEN '1993-01-01' AND '1993-12-31'\nGROUP BY T1.district_id;\n\n\t----- bird -----\tfinancial",
    "127": "\nSELECT DISTINCT account_id\nFROM account\nWHERE date LIKE '%/%';\nSQL_END\n\n\t----- bird -----\tfinancial",
    "128": "\nSELECT district_id, COUNT(*) as female_count\nFROM account\nGROUP BY district_id\nORDER BY female_count DESC\nLIMIT 10;\nSQL_END\n\n\t----- bird -----\tfinancial",
    "129": "SQL_END\n\nSELECT district_name, COUNT(*) as num FROM account WHERE date BETWEEN '1996-01-01' AND '1996-01-31' GROUP BY district_name ORDER BY num DESC LIMIT 10 \n\t----- bird -----\tfinancial",
    "130": "\nSELECT COUNT(client_id) FROM client WHERE district_id = (SELECT district_id FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 LIKE 'South Bohemia') AND frequency = 'Monthly' AND status = 'Not Own Credit Card');\nSQL_END\n\n\t----- bird -----\tfinancial",
    "131": "\nSELECT d.district_id, d.district_name\nFROM district d\nJOIN account a ON d.district_id = a.district_id\nWHERE a.frequency = 'active' AND a.date >= DATE('now', '-1 month');\nSQL_END\n\n\t----- bird -----\tfinancial",
    "132": "\nSELECT AVG(amount) AS average_loan_amount\nFROM loan\nWHERE gender = 'male';\n\n\t----- bird -----\tfinancial",
    "133": "\nSELECT d.district_id, d.district_name\nFROM district d\nWHERE strftime('%Y', d.date) = '1996';\nSQL_END\n\n\t----- bird -----\tfinancial",
    "134": "\nSELECT COUNT(account_id)\nFROM account\nWHERE YEAR(date) = 1996 AND district_id IN (\n    SELECT district_id\n    FROM client\n    WHERE birth_date >= '1995-01-01' AND birth_date < '1996-01-01'\n);\n\n\t----- bird -----\tfinancial",
    "135": "\nSELECT COUNT(DISTINCT account_id) AS negative_balance_count\nFROM loan\nWHERE status = 'withdrawal'\n  AND amount < 0;\nSQL_END\n\n\t----- bird -----\tfinancial",
    "136": "\nSELECT COUNT(DISTINCT t1.account_id) AS approved_loans\nFROM account AS t1\nJOIN loan AS t2 ON t1.account_id = t2.account_id\nWHERE t2.date BETWEEN '01/01/1995' AND '12/31/1997'\nAND t1.frequency = 'monthly'\nAND t1.district_id IN (\n  SELECT district_id\n  FROM disp\n  WHERE client_id IN (\n    SELECT client_id\n    FROM order\n    WHERE date BETWEEN '01/01/1995' AND '12/31/1997'\n      AND account_id = t1.account_id\n  )\n)\nAND t1.district_id = (SELECT district_id\n                      FROM district\n                      WHERE A8 > 0.0000000000000000000000000000000\n\t----- bird -----\tfinancial",
    "137": "\nSELECT COUNT(account_id)\nFROM account\nWHERE district_id = 1 AND frequency = 'running';\nSQL_END\n\n\t----- bird -----\tfinancial",
    "138": "\nSELECT COUNT(DISTINCT T1.client_id) AS male_clients\nFROM client AS T1\nJOIN account AS T2 ON T1.account_id = T2.account_id\nWHERE T2.district_id = (SELECT district_id FROM district WHERE A9 > 0 AND A15 > 0)\nAND T2.frequency LIKE 'crime%'\nAND T2.date >= '1995-01-01' AND T2.date < '1996-01-01';\n\n\t----- bird -----\tfinancial",
    "139": "\nSELECT COUNT(*) AS count\nFROM card\nWHERE type = 'disponent';\nSQL_END\n\n\t----- bird -----\tfinancial",
    "140": "\nSELECT COUNT(account_id) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Pisek') \n\t----- bird -----\tfinancial",
    "141": "\nSELECT DISTINCT district.district_id\nFROM account\nJOIN order ON account.account_id = order.account_id\nWHERE order.date >= '1997-01-01'\nGROUP BY district.district_id\nHAVING SUM(order.amount) > 10000;\nSQL_END\n\n\t----- bird -----\tfinancial",
    "142": "\nSELECT DISTINCT a.account_id\nFROM account a\nJOIN order o ON a.account_id = o.account_id\nWHERE o.date LIKE '2023-10-%'\nAND a.district_id = (SELECT district_id FROM district WHERE A8 > 0)\nORDER BY a.account_id;\nSQL_END\n\n\t----- bird -----\tfinancial",
    "143": "\nSELECT DISTINCT c.account_id\nFROM account a\nJOIN card c ON a.account_id = c.account_id\nWHERE c.type = 'gold' AND c.district_id IS NOT NULL;\nSQL_END\n\n\t----- bird -----\tfinancial",
    "144": "\nSELECT AVG(amount) AS average_amount\nFROM loan\nWHERE YEAR(date) = 2021;\nSQL_END\n\n\t----- bird -----\tfinancial",
    "145": "\nSELECT DISTINCT account_id\nFROM card\nWHERE type = 'credit_card'\n  AND issued >= '1998-01-01'\n  AND payments < (SELECT AVG(amount) FROM order WHERE date BETWEEN '1998-01-01' AND '1998-12-31')\n  AND status = 'paid';\n\n\t----- bird -----\tfinancial",
    "146": "\nSELECT DISTINCT c.client_id, c.gender, c.birth_date, d.district_id\nFROM client AS c\nJOIN account AS a ON c.account_id = a.account_id\nJOIN district AS d ON a.district_id = d.district_id\nWHERE c.gender = 'female' AND c.birth_date >= '1980-01-01'\n  AND (a.frequency IN ('monthly', 'quarterly') OR a.frequency IS NULL)\n  AND EXISTS (\n    SELECT 1\n    FROM loan AS l\n    WHERE l.account_id = a.account_id\n      AND l.date BETWEEN c.birth_date + INTERVAL '1 month' AND c.birth_date + INTERVAL '3 months'\n  );\n\n\t----- bird -----\tfinancial",
    "147": "\nSELECT COUNT(client_id) AS female_clients_count\nFROM client\nWHERE gender = 'female'\n  AND district_id IN (\n    SELECT district_id\n    FROM account\n    WHERE region = 'South Bohemia'\n  );\nSQL_END\n\n\t----- bird -----\tfinancial",
    "148": "\nSELECT DISTINCT a.account_id\nFROM account a\nJOIN loan l ON a.account_id = l.account_id\nWHERE a.district_id = 10 AND l.status = 'Eligible';\n\n\t----- bird -----\tfinancial",
    "149": "\nSELECT DISTINCT T1.type, AVG(T2.amount) AS average_income\nFROM account AS T1\nJOIN loan AS T3 ON T1.account_id = T3.account_id\nJOIN order AS T4 ON T3.order_id = T4.account_id\nWHERE T1.district_id = (SELECT district_id FROM district WHERE A9 > 8000 AND A9 < 9000)\nAND T2.amount <= 9000\nGROUP BY T1.type;\n\n\t----- bird -----\tfinancial",
    "150": "\nSELECT COUNT(account_id)\nFROM account\nWHERE district_id = (SELECT district_id FROM district WHERE A15 = 'North Bohemia')\n  AND account_id IN (\n    SELECT account_id\n    FROM trans\n    WHERE type = 'Loan' AND bank = 'AB'\n  );\nSQL_END\n\n\t----- bird -----\tfinancial",
    "151": "\nSELECT DISTINCT district.district_name\nFROM account\nJOIN order ON account.account_id = order.account_id\nWHERE order.type = 'withdrawal';\n\n\t----- bird -----\tfinancial",
    "152": "\nSELECT AVG(amount) AS average_crimes\nFROM trans\nWHERE YEAR(date) = 1995 AND region IN (\n    SELECT district_id\n    FROM account\n    WHERE number > 4000\n)\nAND account_id IN (\n    SELECT account_id\n    FROM order\n    WHERE year = 1997\n);\n\n\t----- bird -----\tfinancial",
    "153": "\nSELECT COUNT(*) AS count\nFROM card\nWHERE type = 'classic';\n\n\t----- bird -----\tfinancial",
    "154": "\nSELECT COUNT(*) AS male_clients\nFROM client\nWHERE district_id = (SELECT district_id FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Hl.m. Praha'));\nSQL_END\n\n\t----- bird -----\tfinancial",
    "155": "\nSELECT CAST(SUM(CASE WHEN T1.type = 'Gold' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.account_id) AS percent\nFROM account AS T1\nJOIN card AS T2 ON T1.account_id = T2.account_id\nWHERE T1.district_id = (SELECT district_id FROM district WHERE A8 > 1998);\n\n\t----- bird -----\tfinancial",
    "156": "\nSELECT DISTINCT c.client_id, c.gender, c.birth_date\nFROM client AS c\nJOIN account AS a ON c.account_id = a.account_id\nWHERE a.amount = (SELECT MAX(amount) FROM loan WHERE loan.status = 'paid' AND loan.date >= a.date)\nORDER BY c.birth_date DESC;\n\n\t----- bird -----\tfinancial",
    "157": "\nSELECT COUNT(*) AS committed_crimes\nFROM trans\nWHERE account_id = 532 AND YEAR(date) = 1995;\nSQL_END\n\n\t----- bird -----\tfinancial",
    "158": "\nSELECT T1.district_id \nFROM account AS T1 \nJOIN order AS T2 ON T1.account_id = T2.account_id \nWHERE T2.order_id = 33333;\nSQL_END\n\n\t----- bird -----\tfinancial",
    "159": "\nSELECT DISTINCT t1.account_id, t2.date, t2.amount, t3.k_symbol\nFROM account AS t1\nJOIN loan AS t2 ON t1.account_id = t2.account_id\nJOIN order AS t3 ON t2.order_id = t3.order_id\nWHERE t1.district_id = 3356 AND t2.status = 'withdrawal' AND t3.date >= '2023-01-01' AND t3.date < '2023-12-31';\n\n\t----- bird -----\tfinancial",
    "160": "\nSELECT COUNT(account_id)\nFROM account\nWHERE frequency = 'weekly'\n  AND district_id IN (\n    SELECT DISTINCT district_id\n    FROM card\n    WHERE type = 'loan'\n      AND issued >= DATE('now', '-1 week')\n  );\nSQL_END\n\n\t----- bird -----\tfinancial",
    "161": "\nSELECT DISTINCT T1.type\nFROM client AS T1\nJOIN account AS T2 ON T1.account_id = T2.account_id\nWHERE T1.client_id = 13539;\nSQL_END\n\n\t----- bird -----\tfinancial",
    "162": "\nSELECT district.district_id, district.district_name\nFROM district\nJOIN account ON account.district_id = district.district_id\nWHERE account.client_id = 3541\nAND account.account_id IS NULL\n\n\t----- bird -----\tfinancial",
    "163": "\nSELECT d.district_id, d.district_name\nFROM district d\nJOIN account a ON d.district_id = a.district_id\nWHERE a.frequency = 'no problems' AND a.date >= (SELECT max(order_date) FROM order)\nGROUP BY d.district_id, d.district_name\nORDER BY COUNT(*) DESC;\n\n\t----- bird -----\tfinancial",
    "164": "\n-- SELECT DISTINCT account_id FROM order WHERE account_id = 32423 ;\n\n\t----- bird -----\tfinancial",
    "165": "\nSELECT DISTINCT t1.account_id, t1.date, t1.amount, t2.type\nFROM account AS t1\nJOIN trans AS t2 ON t1.account_id = t2.account_id\nWHERE t1.district_id = 5;\nSQL_END\n\n\t----- bird -----\tfinancial",
    "166": "\nSELECT COUNT(account_id) AS accounts_from_Jesenik_district\nFROM account\nWHERE district_id = (SELECT district_id FROM district WHERE A15 = 'Jesenik');\nSQL_END\n\n\t----- bird -----\tfinancial",
    "167": "\nSELECT DISTINCT c.client_id\nFROM client c\nWHERE c.district_id = (SELECT d.district_id FROM district d WHERE d.A15 > 1996);\n\n\t----- bird -----\tfinancial",
    "168": "\nSELECT COUNT(*) AS total_clients, SUM(CASE WHEN gender = 'W' THEN 1 ELSE 0 END) AS female_clients,\n       (COUNT(DISTINCT CASE WHEN gender = 'F' THEN account_id END)) / COUNT(account_id) * 100 AS percentage_females\nFROM client\nWHERE district_id IN (\n    SELECT DISTINCT district_id\n    FROM disp\n    WHERE type = 'average_salary'\n)\nGROUP BY total_clients, female_clients;\n\n\t----- bird -----\tfinancial",
    "169": "\nSELECT \n    SUM(amount) AS total_amount,\n    (SUM(amount) - MIN(amount)) / COUNT(account_id) AS growth_rate\nFROM \n    order\nWHERE \n    client_id = 1 -- Assuming 'client' is a foreign key to the 'client' table, replace with actual client ID if different\n    AND date BETWEEN '1996-01-01' AND '1997-12-31'\nGROUP BY \n    account_id;\n\n\t----- bird -----\tfinancial",
    "170": "\nSELECT COUNT(*) AS count\nFROM loan\nWHERE YEAR(date) > 1995;\nSQL_END\n\n\t----- bird -----\tfinancial",
    "171": "SQL_END\n\nSELECT East FROM account WHERE district_id = 1 AND frequency = \"East\" INTERSECT\nSELECT North FROM account WHERE district_id = 2 AND frequency = \"North\"\n\n\t----- bird -----\tfinancial",
    "172": "\nSELECT COUNT(*) AS count\nFROM account\nWHERE account_id IN (1, 2, 3, 4, 5, 6, 7, 8, 9);\nSQL_END\n\n\t----- bird -----\tfinancial",
    "173": "\nSELECT frequency, SUM(amount) AS total_amount\nFROM account\nWHERE account_id = 3\nGROUP BY frequency;\nSQL_END\n\n\t----- bird -----\tfinancial",
    "174": "\nSELECT T2.birth_date FROM client AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.client_id = 130;\nSQL_END\n\n\t----- bird -----\tfinancial",
    "175": "\nSELECT COUNT(account_id)\nFROM account\nWHERE district_id = (SELECT district_id FROM client WHERE gender = 'Male' AND birth_date >= '1980-01-01')\n  AND account_id IN (\n    SELECT DISTINCT account_id\n    FROM trans\n    WHERE operation = 'Statement'\n      AND type = 'Owner'\n      AND date BETWEEN '2023-01-01' AND '2023-12-31'\n  );\n\n\t----- bird -----\tfinancial",
    "176": "\nSELECT t1.amount, t2.status\nFROM client AS t1\nJOIN order AS t2 ON t1.client_id = t2.account_id AND t1.client_id = 992\nWHERE t1.client_id = 992;\nSQL_END\n\n\t----- bird -----\tfinancial",
    "177": "\nSELECT \n    c.client_id,\n    c.gender,\n    c.birth_date,\n    d.A15 AS district_id,\n    d.A2,\n    d.A3,\n    d.A4,\n    d.A5,\n    d.A6,\n    d.A7,\n    d.A8,\n    d.A9,\n    d.A10,\n    d.A11,\n    d.A12,\n    d.A13,\n    d.A14,\n    c.A15 AS district_id,\n    c.A2,\n    c.A3,\n    c.A4,\n    c.A5,\n    c.A6,\n    c.A7,\n    c.A8,\n    c.A9,\n    c.A10,\n    c.A11,\n    c.A12,\n    c.A13,\n    c.A14,\n    o.amount AS loan_amount\nFROM \n    client c\nJOIN \n    account a ON c.account_id = a.account_id\nJOIN \n    order o ON a.account_id = o.account_id\nWHERE \n    c.client_id = 4 AND o.date = '2023-05-18' AND o.amount = 851;\n\n\t----- bird -----\tfinancial",
    "178": "\nSELECT DISTINCT c.type\nFROM client c\nJOIN account a ON c.client_id = a.account_id\nWHERE c.client_id = 9;\nSQL_END\n\n\t----- bird -----\tfinancial",
    "179": "\nSELECT SUM(loan.amount) AS total_amount\nFROM loan\nJOIN account ON loan.account_id = account.account_id\nWHERE client_id = 617\nAND YEAR(date) = 1998;\nSQL_END\n\n\t----- bird -----\tfinancial",
    "180": "\nSELECT DISTINCT c.client_id\nFROM client c\nWHERE c.birth_date BETWEEN '1983-01-01' AND '1987-12-31'\n  AND c.district_id IN (\n    SELECT district_id\n    FROM district\n    WHERE A15 > 0.000000000000000\n  );\n\n\t----- bird -----\tfinancial",
    "181": "\nSELECT T1.client_id, T2.gender, T3.birth_date\nFROM client AS T1\nJOIN order AS T2 ON T1.client_id = T2.account_id\nJOIN trans AS T3 ON T2.account_id = T3.account_id\nWHERE T1.gender = 'female'\nORDER BY T3.amount DESC\nLIMIT 3;\n\n\t----- bird -----\tfinancial",
    "182": "\nSELECT COUNT(*) AS count\nFROM client\nWHERE gender = 'male'\n  AND birth_date BETWEEN '1974-01-01' AND '1976-12-31';\nSQL_END\n\n\t----- bird -----\tfinancial",
    "183": "\nSELECT COUNT(account_id)\nFROM account\nWHERE strftime('%Y', date) >= '1996';\nSQL_END\n\n\t----- bird -----\tfinancial",
    "184": "\nSELECT COUNT(*) AS count\nFROM client\nWHERE gender = 'female';\n\n\t----- bird -----\tfinancial",
    "185": "\nSELECT \n    COUNT(*) AS total_customers,\n    SUM(CASE WHEN district.district_id = 1 THEN 1 ELSE 0 END) / COUNT(*) AS female_ratio\nFROM \n    account a\nJOIN \n    client c ON a.client_id = c.client_id\nJOIN \n    district d ON a.district_id = d.district_id\nWHERE \n    d.district_id = 1 AND c.gender = 'female'\nGROUP BY \n    total_customers;\n\n\t----- bird -----\tfinancial",
    "186": "\nSELECT SUM(CASE WHEN T1.gender = 'Male' THEN 1 ELSE 0 END) / COUNT(*) * 100 AS percentage\nFROM client AS T1\nJOIN account AS T2 ON T1.client_id = T2.account_id\nWHERE T1.district_id = (SELECT district_id FROM district WHERE A15 > 0)\nGROUP BY T1.client_id;\n\n\t----- bird -----\tfinancial",
    "187": "\nSELECT COUNT(client_id) AS num_clients\nFROM client\nWHERE client_id IN (\n    SELECT account_id\n    FROM account\n    WHERE frequency = 'statement of weekly issuance'\n)\nAND client.gender = 'User';\n\n\t----- bird -----\tfinancial",
    "188": "\nSELECT a.*\nFROM account a\nJOIN loan l ON a.account_id = l.account_id\nWHERE l.status = 'approved'\nAND l.date >= '1997-01-01';\n\n\t----- bird -----\tfinancial",
    "189": "\nSELECT DISTINCT a.account_id\nFROM account a\nJOIN client c ON a.client_id = c.client_id\nWHERE c.gender = 'female'\n  AND c.birth_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)\n  AND (SELECT AVG(amount) FROM order o WHERE o.account_id = a.account_id) = (\n    SELECT AVG(amount) FROM order o2 WHERE o2.account_id = a.account_id\n  );\n\n\t----- bird -----\tfinancial",
    "190": "\nSELECT COUNT(client_id)\nFROM client\nWHERE birth_date >= '1920-01-01';\nSQL_END\n\n\t----- bird -----\tfinancial",
    "191": "\nSELECT COUNT(account_id) AS loan_accounts_for_24_months_with_weekly_issue\nFROM account\nWHERE frequency = 'weekly'\n  AND (date >= '2023-10-01' AND date <= '2023-11-01')\n  AND (account_id IN (\n    SELECT DISTINCT account_id\n    FROM loan\n    WHERE duration = 24\n      AND payments = (SELECT SUM(amount) FROM order)\n  ))\n\n\t----- bird -----\tfinancial",
    "192": "\nSELECT AVG(amount) AS average_loan_amount\nFROM loan\nWHERE status = 'running'\n  AND (DATE_FORMAT(date, '%Y-%m') LIKE '2023-12%' OR DATE_FORMAT(date, '%Y-%m') LIKE '2024-01%')\nORDER BY date;\n\n\t----- bird -----\tfinancial",
    "193": "\nSELECT DISTINCT c.client_id, d.district_id \nFROM client c \nJOIN district d ON c.district_id = d.district_id \nWHERE (c.status = 'permanent' OR c.status = 'apply-for-loans');\n\n\t----- bird -----\tfinancial",
    "194": "\nSELECT c.client_id, c.gender, c.birth_date\nFROM client AS c\nJOIN account AS a ON c.account_id = a.account_id\nWHERE a.district_id = (SELECT district_id FROM district WHERE A15 > 0)\nAND a.frequency IN ('monthly', 'quarterly')\nORDER BY c.birth_date DESC;\n\n\t----- bird -----\tfinancial",
    "195": "\n\t----- bird -----\ttoxicology",
    "196": "\nSELECT COUNT(*) FROM atom WHERE molecule_id IN (SELECT molecule_id FROM connected GROUP BY molecule_id HAVING SUM(element = 'Cl')) \n\t----- bird -----\ttoxicology",
    "197": "\nSELECT AVG(T1.element) AS average_oxygen_count\nFROM atom AS T1\nJOIN connected AS T2 ON T1.atom_id = T2atom_id\nWHERE T2.bond_type = 'single'\nGROUP BY T1.molecule_id;\n\n\t----- bird -----\ttoxicology",
    "198": "\nSELECT AVG(bond_id) as average_single_bonds FROM connected GROUP BY molecule_id HAVING COUNT(*) = 1 \n\t----- bird -----\ttoxicology",
    "199": "\nSELECT COUNT(DISTINCT atom_id) AS non_carcinogenic_atoms\nFROM connected\nWHERE molecule_id = (SELECT molecule_id FROM atom WHERE label = 'sodium');\nSQL_END\n\n\t----- bird -----\ttoxicology",
    "200": "\n-- Select molecules that are carcinogenic\nSELECT DISTINCT m1.molecule_id, m2.molecule_id \nFROM atom AS m1 \nJOIN molecule AS m2 ON m1.molecule_id = m2.molecule_id \nWHERE m1.element = 'C' AND m2.label = 'carcinogenic'\n\n\t----- bird -----\ttoxicology",
    "201": "\nSELECT SUM(CASE WHEN T1.element = 'C' THEN 1 ELSE 0 END) / COUNT(T1.molecule_id) * 100 AS percentage\nFROM atom AS T1\nJOIN connected AS T2 ON T1.atom_id = T2atom_id\nWHERE T2.bond_type = 'double'\nGROUP BY T1.molecule_id;\n\n\t----- bird -----\ttoxicology",
    "202": "\nSELECT COUNT(*) FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = 'Triple Type Bond') GROUP BY atom_id END \n\t----- bird -----\ttoxicology",
    "203": "\n-- Query for atoms without bromine\nSELECT COUNT(DISTINCT atom_id) AS count\nFROM atom\nWHERE element = 'B';\n\n\t----- bird -----\ttoxicology",
    "204": "SQL_END\n\nSELECT COUNT(*) FROM atom WHERE molecule_id IN (SELECT molecule_id FROM connected GROUP BY molecule_id HAVING count(*) > 100) \n\t----- bird -----\ttoxicology",
    "205": "\nSELECT DISTINCT molecule_id FROM atom WHERE element = 'Si' GROUP BY molecule_id HAVING COUNT(*) > 1 SQL_END\n\t----- bird -----\ttoxicology",
    "206": "\nSELECT DISTINCT element FROM atom WHERE molecule_id = (SELECT molecule_id FROM bond WHERE bond_id IN (SELECT bond_id FROM connected WHERE atom_id2 = (SELECT atom_id FROM atom WHERE atom_id = 8 AND atom_id2 = 9))) \n\t----- bird -----\ttoxicology",
    "207": "\nSELECT DISTINCT element FROM atom WHERE molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = 'double') GROUP BY element HAVING COUNT(*) > 1 \n\t----- bird -----\ttoxicology",
    "208": "\n\t----- bird -----\ttoxicology",
    "209": "\n\t----- bird -----\ttoxicology",
    "210": "\nSELECT DISTINCT atom_id FROM connected WHERE bond_type = 'single' GROUP BY atom_id SQL_END\n\t----- bird -----\ttoxicology",
    "211": "\nSELECT DISTINCT atom_id FROM connected WHERE bond_type = 'non-carcinogenic' GROUP BY atom_id HAVING COUNT(*) > 1 \n\t----- bird -----\ttoxicology",
    "212": "\nSELECT element\nFROM atom\nWHERE molecule_id NOT IN (\n  SELECT atom_id2\n  FROM connected\n  GROUP BY atom_id2\n  HAVING COUNT(*) = (SELECT COUNT(*) FROM atom)\n)\nGROUP BY element\nORDER BY COUNT(*) ASC;\nSQL_END\n\n\t----- bird -----\ttoxicology",
    "213": "\nSELECT DISTINCT bond_id FROM connected WHERE atom_id = 'TR004_8' AND atom_id2 = 'TR004_20' GROUP BY bond_id, atom_id ORDER BY bond_id ASC \n\t----- bird -----\ttoxicology",
    "214": "\n\t----- bird -----\ttoxicology",
    "215": "\nSELECT COUNT(*) AS count\nFROM atom\nWHERE element = 'I' AND molecule_id IN (\n    SELECT atom_id FROM connected WHERE bond_type = 'Single'\n);\nSQL_END\n\n\t----- bird -----\ttoxicology",
    "216": "\n-- Select connected atoms with a triple bond\nSELECT atom_id, atom_id2, bond_id FROM connected WHERE bond_type = 'triple' GROUP BY atom_id, atom_id2, bond_id;\n\n\t----- bird -----\ttoxicology",
    "217": "\nSELECT DISTINCT atom_id FROM connected WHERE atom_id2 = (SELECT molecule_id FROM molecule WHERE label = 'TR181') \n\t----- bird -----\ttoxicology",
    "218": "\nSELECT COUNT(*) FROM atom WHERE element = 'C' AND molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = 'Fluorine') - COUNT(*) FROM atom WHERE element = 'F' GROUP BY molecule_id HAVING COUNT(*) > 0 \n\t----- bird -----\ttoxicology",
    "219": "\nSELECT \n    COUNT(*) AS total,\n    SUM(CASE WHEN bond_type = 'C' THEN 1 ELSE 0 END) / COUNT(*) * 100 AS percentage\nFROM \n    connected\nGROUP BY \n    molecule_id;\nSQL_END\n\n\t----- bird -----\ttoxicology",
    "220": "\nSELECT element\nFROM atom\nWHERE molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR000')\nORDER BY element ASC\nLIMIT 3;\nSQL_END\n\n\t----- bird -----\ttoxicology",
    "221": "\nSELECT DISTINCT atom_id FROM connected WHERE molecule_id = (SELECT molecule_id FROM atom WHERE label = 'TR001') AND bond_id IN (SELECT bond_id FROM bond WHERE molecule_id = (SELECT molecule_id FROM atom WHERE label = 'TR001_2_6')) \n\t----- bird -----\ttoxicology",
    "222": "\nSELECT COUNT(DISTINCT atom_id) AS number_of_carcinogenic_molecules, COUNT(DISTINCT atom_id2) AS number_of_non_carcinogenic_molecules\nFROM connected\nWHERE molecule_id = (SELECT molecule_id FROM atom WHERE label = 'carcinogenic');\nSQL_END\n\n\t----- bird -----\ttoxicology",
    "223": "\n\t----- bird -----\ttoxicology",
    "224": "\nSELECT DISTINCT bond_id FROM connected WHERE atom_id = 2 AND molecule_id IN (SELECT atom_id FROM atom WHERE molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR000_2')) \n\t----- bird -----\ttoxicology",
    "225": "SQL_END\nSELECT molecule_id, label FROM molecule WHERE molecule_id IN (SELECT atom_id2 FROM connected WHERE bond_type = 'double') ORDER BY molecule_id LIMIT 5;\n\t----- bird -----\ttoxicology",
    "226": "\nSELECT SUM(CASE WHEN T1.bond_type = 'double' THEN 1 ELSE 0 END) / COUNT(T1.molecule_id) * 100 FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id2 = T2atom_id WHERE T2.label = 'TR008' GROUP BY T1.molecule_id \n\t----- bird -----\ttoxicology",
    "227": "SQL_END\n\nSELECT COUNT(*) FROM molecule WHERE label = 'carcinogenic' / COUNT(*) * 100;\n\t----- bird -----\ttoxicology",
    "228": "\nSELECT SUM(CASE WHEN T1.element = 'H' THEN 1 ELSE 0 END) * 100 / COUNT(T2.molecule_id) AS hydrogen_percentage\nFROM atom AS T1\nJOIN connected AS T2 ON T1.atom_id = T2atom_id\nWHERE T1.molecule_id = 'TR206';\n\n\t----- bird -----\ttoxicology",
    "229": "\nSELECT DISTINCT T1.bond_id, T2.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2atom_id ORDER BY T1.molecule_id;\n\n\t----- bird -----\ttoxicology",
    "230": "\nSELECT DISTINCT element FROM atom WHERE molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR060') INTERSECT SELECT DISTINCT element FROM bond WHERE molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR060') \n\t----- bird -----\ttoxicology",
    "231": "\nSELECT T1.bond_type, CASE \n    WHEN COUNT(*) > (SELECT COUNT(*) FROM connected WHERE atom_id = TR018) THEN 'Yes'\n    ELSE 'No'\nEND AS is_carcinogenic\nFROM connected\nJOIN molecule ON connected.molecule_id = molecule.molecule_id\nWHERE molecule.label = 'TR018'\nGROUP BY T1.bond_type;\n\n\t----- bird -----\ttoxicology",
    "232": "\nSELECT DISTINCT atom_id\nFROM connected\nWHERE bond_type = 'single'\n  AND molecule_id IN (\n    SELECT atom_id2\n    FROM connected\n    WHERE atom_id1 = connected.atom_id\n  )\nORDER BY atom_id ASC\nLIMIT 3;\nSQL_END\n\n\t----- bird -----\ttoxicology",
    "233": "\nSELECT T1.bond_id, T2.molecule_id\nFROM connected AS T1\nJOIN atom AS T2 ON T1.atom_id = T2atom_id\nWHERE T2.label = 'TR006'\nORDER BY T1.bond_id ASC\nLIMIT 2;\nSQL_END\n\n\t----- bird -----\ttoxicology",
    "234": "\nSELECT COUNT(*) FROM connected WHERE atom_id = 12 AND molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR009') \n\t----- bird -----\ttoxicology",
    "235": "\nSELECT COUNT(*) FROM atom WHERE element = 'Bromine';\n\n\t----- bird -----\ttoxicology",
    "236": "\nSELECT bond.bond_type, atom1.atom_id AS atom1_id, atom2.atom_id AS atom2_id FROM connected AS conn INNER JOIN atom AS atom1 ON conn.atom_id = atom1.atom_id INNER JOIN atom AS atom2 ON connatom2 = atom2.atom_id INNER JOIN molecule AS m ON atom1.molecule_id = m.molecule_id INNER JOIN molecule AS m2 ON atom2.molecule_id = m2.molecule_id WHERE m.label = 'TR001_6_9' AND bond.bond_id = 6 \n\t----- bird -----\ttoxicology",
    "237": "\nSELECT T1.label, COALESCE(T2.carcinogenicity, 'Not Carcinogenic') AS carcinogenicity\nFROM atom AS T1\nJOIN connected AS T2 ON T1.atom_id = T2atom_id\nWHERE T1.molecule_id = 'TR001_10';\n\n\t----- bird -----\ttoxicology",
    "238": "\nSELECT COUNT(*) FROM atom WHERE molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = 'Triple') GROUP BY molecule_id SQL_END\n\t----- bird -----\ttoxicology",
    "239": "\nSELECT COUNT(*) FROM connected WHERE atom_id = 19 SQL_END\n\t----- bird -----\ttoxicology",
    "240": "\nSELECT element FROM atom WHERE molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR004') GROUP BY element ORDER BY element END \n\t----- bird -----\ttoxicology",
    "241": "\nSELECT COUNT(*) FROM molecule WHERE label NOT LIKE 'carcinogenic%' SQL_END\n\t----- bird -----\ttoxicology",
    "242": "\nSELECT DISTINCT t1.molecule_id\nFROM atom AS t1\nJOIN connected AS t2 ON t1.atom_id = t2atom1.atom_id\nWHERE t2.bond_id IN (\n    SELECT bond_id\n    FROM bond\n    WHERE bond_type = 'carcinogenic'\n)\nORDER BY t1.molecule_id;\n\n\t----- bird -----\ttoxicology",
    "243": "\nSELECT DISTINCT T1.bond_id FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2atom_id WHERE T2.element = '\u78f7' AND T2.element = '\u6c2e' GROUP BY T1.bond_id, T1.molecule_id ORDER BY T1.bond_id\n\t----- bird -----\ttoxicology",
    "244": "\nSELECT molecule_id, label FROM molecule WHERE molecule_id = ( SELECT atom_id2 FROM connected WHERE bond_type = 'double' GROUP BY atom_id2 ORDER BY count(*) DESC LIMIT 1 ) \n\t----- bird -----\ttoxicology",
    "245": "\nSELECT AVG(bond_id) AS average_bonds\nFROM connected\nWHERE atom_id IN (\n  SELECT atom_id2\n  FROM bond\n  WHERE molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'Iodine')\n)\nGROUP BY atom_id;\nSQL_END\n\n\t----- bird -----\ttoxicology",
    "246": "\nSELECT bond_type, bond_id FROM bond WHERE atom_id = 45()\n\t----- bird -----\ttoxicology",
    "247": "\n\t----- bird -----\ttoxicology",
    "248": "\nSELECT DISTINCT atom_id FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR447')) GROUP BY atom_id ORDER BY atom_id;\n\n\t----- bird -----\ttoxicology",
    "249": "\nSELECT DISTINCT element FROM atom WHERE molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR144_8_19') ORDER BY element \n\t----- bird -----\ttoxicology",
    "250": "\n-- Select the molecule with the most double bonds from the atom table\nSELECT t1.molecule_id, COUNT(*) AS bond_count\nFROM atom AS t1\nJOIN connected AS t2 ON t1.atom_id = t2atom_id\nGROUP BY t1.molecule_id\nORDER BY t1.bond_count DESC\nLIMIT 1\n\n\t----- bird -----\ttoxicology",
    "251": "\n\t----- bird -----\ttoxicology",
    "252": "\nSELECT DISTINCT atom_id FROM connected WHERE atom_id2 = (SELECT atom_id FROM molecule WHERE label = 'lead') GROUP BY atom_id ORDER BY atom_id;\n\n\t----- bird -----\ttoxicology",
    "253": "\nSELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2atom_id2 INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = 'triple' \n\t----- bird -----\ttoxicology",
    "254": "\nSELECT SUM(CASE WHEN T1.element = T2.element THEN 1 ELSE 0 END) / COUNT(T1.element) * 100 AS percentage\nFROM atom AS T1\nJOIN connected AS T2 ON T1.atom_id = T2atom_id\nGROUP BY T1.molecule_id;\n\n\t----- bird -----\ttoxicology",
    "255": "\nSELECT SUM(CASE WHEN bond_type = 'C' THEN 1 ELSE 0 END) / COUNT(*) AS proportion\nFROM connected;\nSQL_END\n\n\t----- bird -----\ttoxicology",
    "256": "\nSELECT SUM(T1.element) AS total_atoms FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'C' AND T1.element = 'H' GROUP BY T1.element;\n\n\t----- bird -----\ttoxicology",
    "257": "\nSELECT atom_id2 FROM connected WHERE element = 'SULFUR' GROUP BY atom_id2;\n\n\t----- bird -----\ttoxicology",
    "258": "\nSELECT DISTINCT T1.bond_type FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'Tin' \n\t----- bird -----\ttoxicology",
    "259": "\nSELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2atom_id2 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T2.bond_id IS NULL SQL_END\n\t----- bird -----\ttoxicology",
    "260": "\nSELECT COUNT(*) AS total_atoms\nFROM atom\nWHERE molecule_id IN (\n    SELECT atom_id2\n    FROM connected\n    WHERE bond_id = (SELECT bond_id FROM bond WHERE element = 'P' OR element = 'Br')\n)\nGROUP BY atom_id;\n\n\t----- bird -----\ttoxicology",
    "261": "\n-- Query for molecules that are carcinogenic\nSELECT DISTINCT atom_id2 FROM connected WHERE molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'carcinogenic') GROUP BY atom_id2, bond_id ORDER BY atom_id2, bond_id;\n\n\t----- bird -----\ttoxicology",
    "262": "\nSELECT DISTINCT t1.molecule_id\nFROM atom AS t1\nJOIN connected AS t2 ON t1.atom_id = t2atom1.atom_id\nWHERE t2.bond_id IS NULL;\nSQL_END\n\n\t----- bird -----\ttoxicology",
    "263": "\nSELECT T1.element, (SUM(CASE WHEN T2.bond_type = 'single' THEN 1 ELSE 0 END) / COUNT(T1.molecule_id)) * 100 AS percentage\nFROM atom AS T1\nJOIN connected AS T2 ON T1.atom_id = T2atom_id\nGROUP BY T1.element;\n\n\t----- bird -----\ttoxicology",
    "264": "\nSELECT DISTINCT label FROM atom WHERE molecule_id IN (SELECT molecule_id FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE molecule_id = 'TR000' OR molecule_id = 'TR001' OR molecule_id = 'TR002')) GROUP BY label \n\t----- bird -----\ttoxicology",
    "265": "\nSELECT DISTINCT molecule_id FROM atom WHERE element = 'non-carcinogenic' GROUP BY molecule_id HAVING COUNT(*) > 1 \n\t----- bird -----\ttoxicology",
    "266": "\nSELECT SUM(CASE WHEN T1.molecule_id = TR000 THEN 1 ELSE 0 END) AS total_carcinogenic_molecules\nFROM atom AS T1\nJOIN connected AS T2 ON T1.atom_id = T2atom_id\nWHERE T1.molecule_id IN (TR001, TR002, TR003, TR004, TR005, TR006, TR007, TR008, TR009, TR010, TR011, TR012, TR013, TR014, TR015, TR016, TR017, TR018, TR019, TR020, TR021, TR022, TR023, TR024, TR025, TR026, TR027, TR028, TR029, TR030)\n\n\t----- bird -----\ttoxicology",
    "267": "\nSELECT DISTINCT T1.bond_type FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2atom_id INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.molecule_id IN (SELECT T4.molecule_id FROM atom AS T4 WHERE T4.molecule_id BETWEEN TR000 AND TR050) GROUP BY T1.bond_type \n\t----- bird -----\ttoxicology",
    "268": "\nSELECT DISTINCT element FROM bond WHERE bond_id = 'TR001_10_11' \n\t----- bird -----\ttoxicology",
    "269": "\nSELECT COUNT(DISTINCT bond_id) FROM connected WHERE element = 'Iodine' GROUP BY bond_id SQL_END\n\t----- bird -----\ttoxicology",
    "270": "SQL_END\nSELECT T1.element, COUNT(*) AS count FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2atom_id2 WHERE T1.molecule_id IN (SELECT molecule_id FROM molecule WHERE label = 'Ca') GROUP BY T1.element;\n\t----- bird -----\ttoxicology",
    "271": "\n\t----- bird -----\ttoxicology",
    "272": "SQL_END\n\nSELECT DISTINCT t1.molecule_id\nFROM atom AS t1\nJOIN connected AS t2 ON t1.atom_id = t2atom1.atom_id\nJOIN bond AS t3 ON t2.bond_id = t3.bond_id\nWHERE t3.element = 'C' AND t2atom1.bond_type = 'triple'\n\n\t----- bird -----\ttoxicology",
    "273": "\nSELECT SUM(CASE WHEN element = 'Cl' THEN 1 ELSE 0 END) / COUNT(*) * 100 AS percentage FROM atom WHERE molecule_id IN (SELECT molecule_id FROM connected GROUP BY molecule_id HAVING SUM(bond_type = 'C') > 0);\nSQL_END\n\n\t----- bird -----\ttoxicology",
    "274": "\nSELECT DISTINCT T2.element FROM atom AS T1 INNER JOIN connected AS T3 ON T1.atom_id = T3atom_id INNER JOIN molecule AS T4 ON T1.molecule_id = T4.molecule_id WHERE T4.label = 'TR001' GROUP BY T2.element \n\t----- bird -----\ttoxicology",
    "275": "\n\t----- bird -----\ttoxicology",
    "276": "\nSELECT atom_id FROM bond WHERE bond_type = 'triple_bond' AND molecule_id IN (SELECT atom_id FROM connected);\nSQL_END\n\n\t----- bird -----\ttoxicology",
    "277": "\nSELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2atom_id WHERE T2.bond_id = 'TR005_16_26' GROUP BY T1.element ORDER BY COUNT(*) DESC \n\t----- bird -----\ttoxicology",
    "278": "\nSELECT COUNT(*) FROM atom WHERE molecule_id IN (SELECT molecule_id FROM connected WHERE bond_type = 'single') AND element = 'non-carcinogenic' \n\t----- bird -----\ttoxicology",
    "279": "\n\t----- bird -----\ttoxicology",
    "280": "SQL_END\n\nSELECT DISTINCT T1.bond_id, CASE \n    WHEN T2.bond_type = 'C' THEN 'Yes'\n    ELSE 'No'\nEND AS is_carcinogenic\nFROM atom AS T1\nJOIN connected AS T2 ON T1.molecule_id = T2.atom_id\nGROUP BY T1.molecule_id\nHAVING COUNT(T2.bond_id) > 1\n\t----- bird -----\ttoxicology",
    "281": "\nSELECT T1.element\nFROM atom AS T1\nJOIN connected AS T2 ON T1.atom_id = T2atom_id\nWHERE T2.bond_id IN (\n    SELECT T3.bond_id\n    FROM bond AS T3\n    WHERE T3.molecule_id = (SELECT molecule_id FROM atom ORDER BY atom_id DESC LIMIT 4)\n);\n\n\t----- bird -----\ttoxicology",
    "282": "\nSELECT COALESCE(COUNT(T1.element) / COUNT(T2.element), 0) AS ratio, T1.label FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2atom_id ORDER BY T1.molecule_id LIMIT 1 \n\t----- bird -----\ttoxicology",
    "283": "SQL_END\nSELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2atom_id WHERE T1.element = 'Ca' AND T2.bond_id IN (SELECT T3.bond_id FROM bond AS T3 WHERE T3.bond_type = 'Carcinogenic')\n\t----- bird -----\ttoxicology",
    "284": "\nSELECT DISTINCT T1.bond_type FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2atom_id WHERE T2.element = 'Tellurium' GROUP BY T1.bond_type ORDER BY COUNT(*) DESC \n\t----- bird -----\ttoxicology",
    "285": "\nSELECT DISTINCT T2.element FROM atom AS T1 INNER JOIN connected AS T3 ON T1.atom_id = T3atom_id INNER JOIN molecule AS T4 ON T1.molecule_id = T4.molecule_id WHERE T3.bond_id = 'TR001_10_11' GROUP BY T2.element \n\t----- bird -----\ttoxicology",
    "286": "\nSELECT SUM(CASE WHEN T1.bond_type = 'Triple-Bond' THEN 1 ELSE 0 END) / COUNT(T1.molecule_id) * 100 AS triple_bond_percentage\nFROM connected AS T1\nJOIN atom AS T2 ON T1.atom_id = T2atom_id\nGROUP BY T1.molecule_id;\n\n\t----- bird -----\ttoxicology",
    "287": "\nSELECT COUNT(*) FROM connected WHERE atom_id2 = 'TR047' AND bond_id IN (SELECT bond_id FROM bond WHERE molecule_id = 'TR047') / COUNT(*) * 100 END \n\t----- bird -----\ttoxicology",
    "288": "SQL_END\nSELECT T2.label FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id2 = T2atom_id WHERE T1.molecule_id = 'TR001_1' AND T1.bond_id IN (SELECT T3.bond_id FROM bond AS T3 WHERE T3.molecule_id = 'TR001_1')\n\t----- bird -----\ttoxicology",
    "289": "\n\t----- bird -----\ttoxicology",
    "290": "\nSELECT DISTINCT element FROM atom WHERE molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR151') AND element NOT IN (SELECT element FROM bond) \n\t----- bird -----\ttoxicology",
    "291": "SQL_END\n\nSELECT COUNT(*) FROM atom WHERE molecule_id IN (SELECT molecule_id FROM bond GROUP BY molecule_id HAVING SUM(bond_type) = 1) AND element LIKE 'C%' \n\t----- bird -----\ttoxicology",
    "292": "\nSELECT DISTINCT atom_id\nFROM atom\nWHERE molecule_id IN (\n    SELECT molecule_id\n    FROM connected\n    WHERE bond_id IN (\n        SELECT bond_id\n        FROM bond\n        WHERE element = 'C'\n    )\n)\nAND molecule_id BETWEEN TR010 AND TR050\n\n\t----- bird -----\ttoxicology",
    "293": "\nSELECT COUNT(*) FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = 'carcinogenic compounds') GROUP BY atom_id;\n\n\t----- bird -----\ttoxicology",
    "294": "\n\t----- bird -----\ttoxicology",
    "295": "\nSELECT COUNT(*) FROM atom WHERE element = 'H' AND molecule_id IN (SELECT atom_id2 FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'Carcinogenic Compound'))); \n\t----- bird -----\ttoxicology",
    "296": "\nSELECT DISTINCT T2.molecule_id FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2atom_id WHERE T1.bond_id = (SELECT bond_id FROM bond WHERE molecule_id = 'TR00_1_2') AND T1.atom_id = 'TR00_1' \n\t----- bird -----\ttoxicology",
    "297": "\n-- Select atoms containing element carbon\nSELECT atom_id FROM atom WHERE element = 'carbon';\n\n\t----- bird -----\ttoxicology",
    "298": "\nSELECT COUNT(*) AS total_molecules, SUM(CASE WHEN element = 'H' THEN 1 ELSE 0 END) / COUNT(*) * 100 AS percentage FROM atom WHERE molecule_id IN (SELECT molecule_id FROM connected GROUP BY molecule_id HAVING SUM(bond_type = 'C') > 0)\n\n\t----- bird -----\ttoxicology",
    "299": "\n\t----- bird -----\ttoxicology",
    "300": "\nSELECT DISTINCT atom_id FROM connected WHERE molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR186') GROUP BY atom_id \n\t----- bird -----\ttoxicology",
    "301": "\n\t----- bird -----\ttoxicology",
    "302": "\nSELECT DISTINCT element FROM atom WHERE molecule_id = (SELECT molecule_id FROM bond WHERE bond_id = (SELECT bond_id FROM connected WHERE atom_id2 = TR001_2_4 AND bond_id = 'TR001_2_4')) GROUP BY element SQL_END\n\t----- bird -----\ttoxicology",
    "303": "SQL_END\n\nSELECT COUNT(*) FROM connected WHERE atom_id2 = 'TR006' AND bond_id IN (SELECT bond_id FROM bond WHERE bond_type = 'double') \n\t----- bird -----\ttoxicology",
    "304": "\nSELECT DISTINCT molecule_id, element FROM atom WHERE element LIKE '%carn%';\n\n\t----- bird -----\ttoxicology",
    "305": "\nSELECT DISTINCT b.bond_type, a1.element, a2.element\nFROM bond AS b\nJOIN atom AS a1 ON b.molecule_id = a1.atom_id\nJOIN atom AS a2 ON b.molecule_id = a2.atom_id;\nSQL_END\n\n\t----- bird -----\ttoxicology",
    "306": "SQL_END\n\nSELECT DISTINCT T1.molecule_id, T2.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2atom_id ORDER BY T1.molecule_id;\n\t----- bird -----\ttoxicology",
    "307": "\nSELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2atom_id ORDER BY T2.bond_id LIMIT 1 \n\t----- bird -----\ttoxicology",
    "308": "\nSELECT COUNT(*) FROM connected WHERE atom_id2 IN (SELECT atom_id FROM atom WHERE element = 'Cl') GROUP BY atom_id2;\n\n\t----- bird -----\ttoxicology",
    "309": "\nSELECT DISTINCT atom_id FROM atom WHERE molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR346');\nSELECT COUNT(*) FROM bond;\n\n\t----- bird -----\ttoxicology",
    "310": "SQL_END\n\nSELECT COUNT(*) FROM atom WHERE molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = 'double') AND label LIKE 'carcinogenic compound' \n\t----- bird -----\ttoxicology",
    "311": "SQL_END\n\nSELECT COUNT(*) FROM atom WHERE element = 'S' AND NOT EXISTS (SELECT * FROM bond WHERE molecule_id = atom.molecule_id AND bond_type = 'double') \n\t----- bird -----\ttoxicology",
    "312": "\n\t----- bird -----\ttoxicology",
    "313": "\n-- Query for atoms belonging to molecule id TR005\nSELECT COUNT(*) AS atom_count\nFROM atom\nWHERE molecule_id = 'TR005'\n\t----- bird -----\ttoxicology",
    "314": "\nSELECT COUNT(*) FROM connected WHERE bond_type = 'single' GROUP BY atom_id END \n\t----- bird -----\ttoxicology",
    "315": "SQL_END\n\nSELECT DISTINCT t1.molecule_id\nFROM atom AS t1\nJOIN connected AS t2 ON t1.atom_id = t2atom1.atom_id\nWHERE t1.element = 'cl'\nGROUP BY t1.molecule_id\nHAVING COUNT(DISTINCT t3.bond_id) > 0;\n\n\t----- bird -----\ttoxicology",
    "316": "\nSELECT DISTINCT t1.molecule_id\nFROM atom AS t1\nJOIN connected AS t2 ON t1.atom_id = t2atom1.atom_id\nWHERE t1.element = 'c'\n  AND NOT EXISTS (\n    SELECT 1\n    FROM bond AS t3\n    WHERE t3.bond_type = 'C' AND t3.molecule_id = t1.molecule_id\n  );\n\n\t----- bird -----\ttoxicology",
    "317": "SQL_END\n\nSELECT COUNT(*) FROM atom WHERE element = 'Chlorine' AND molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = 'Carcinogenic') / COUNT(DISTINCT COUNT(*) * 100) END_OF_SQL\n\t----- bird -----\ttoxicology",
    "318": "\nSELECT DISTINCT T2.molecule_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = 'TR001_1_7' \n\t----- bird -----\ttoxicology",
    "319": "\nSELECT COUNT(DISTINCT T1.element) FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.molecule_id = 'TR001_3_4' \n\t----- bird -----\ttoxicology",
    "320": "\nSELECT DISTINCT T1.bond_id, T2.molecule_id FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atomic_id WHERE T1.atom_id = 'TR000_1' AND T1.bond_id = 'TR000_2' SQL_END\n\t----- bird -----\ttoxicology",
    "321": "\nSELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2atom_id WHERE T1.atom_id = 'TR000_2' AND T2.bond_id = 'TR000_4' SQL_END\n\t----- bird -----\ttoxicology",
    "322": "\n\t----- bird -----\ttoxicology",
    "323": "\n-- Query to determine if molecule TR000 is carcinogenic or not\nSELECT T1.label AS \"Molecule\", COALESCE(T2.cancerous, 'Not Carcinogenic') AS \"Is Carcinogenic\"\nFROM atom AS T1\nJOIN connected AS T2 ON T1.atom_id = T2atom_id\nWHERE T1.molecule_id = 'TR000'\n-- SQL_END\n\t----- bird -----\ttoxicology",
    "324": "\nSELECT SUM(CASE WHEN T1.bond_type = 'single' THEN 1 ELSE 0 END) / COUNT(T1.molecule_id) AS percentage\nFROM connected AS T1\nGROUP BY T1.molecule_id;\nSQL_END\n\n\t----- bird -----\ttoxicology",
    "325": "\nSELECT COUNT(*) FROM atom WHERE element = 'Nitrogen';\n\n\t----- bird -----\ttoxicology",
    "326": "\nSELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2atom_id WHERE T1.element = 'S' AND T2.bond_type = 'double' GROUP BY T1.molecule_id HAVING COUNT(T2.bond_id) > 1 \n\t----- bird -----\ttoxicology",
    "327": "SQL_END\n\nSELECT DISTINCT atom_id FROM molecule WHERE molecule_id IN (SELECT atom_id2 FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = 'non-carcinogenic')) GROUP BY atom_id HAVING COUNT(*) > 5 \n\t----- bird -----\ttoxicology",
    "328": "\nSELECT DISTINCT element\nFROM atom\nWHERE molecule_id = (SELECT molecule_id FROM connected WHERE atom_id2 = (SELECT atom_id FROM molecule WHERE label = 'TR024') AND bond_id IN (SELECT bond_id FROM bond))\nGROUP BY element;\nSQL_END\n\n\t----- bird -----\ttoxicology",
    "329": "\n\t----- bird -----\ttoxicology",
    "330": "SQL_END\n\nSELECT COUNT(*) FROM atom WHERE element = 'Hidrogen' AND molecule_id IN (SELECT atom_id2 FROM connected WHERE bond_type = 'Triple Bonded') GROUP BY atom_id2 HAVING COUNT(*) > 1 \n\t----- bird -----\ttoxicology",
    "331": "\nSELECT COUNT(*) FROM molecule WHERE label = 'carcinogenic' \n\t----- bird -----\ttoxicology",
    "332": "\nSELECT COUNT(*) AS count\nFROM connected\nWHERE atom_id2 IN (SELECT molecule_id FROM molecule WHERE molecule_id BETWEEN 1004 AND 1009)\nAND bond_id = 'SINGLE';\nSQL_END\n\n\t----- bird -----\ttoxicology",
    "333": "\n\t----- bird -----\ttoxicology",
    "334": "\nSELECT T1.element\nFROM atom AS T1\nJOIN connected AS T2 ON T1.atom_id = T2atom_id\nWHERE T1.molecule_id NOT IN (\n    SELECT T3.molecule_id\n    FROM bond AS T3\n    WHERE T3.bond_type = 'CANCERIOUS'\n)\nAND T1.atomic_number = 7;\n\n\t----- bird -----\ttoxicology",
    "335": "\nSELECT COUNT(*) FROM atom WHERE molecule_id IN (SELECT atom_id2 FROM connected WHERE bond_type = 'double') GROUP BY atom_id2 HAVING COUNT(*) > 1 \n\t----- bird -----\ttoxicology",
    "336": "\nSELECT COUNT(DISTINCT atom_id) AS count, molecule_id FROM connected WHERE bond_type = 'triple' AND element = 'C' GROUP BY molecule_id HAVING COUNT(*) > 1;\nSQL_END\n\n\t----- bird -----\ttoxicology",
    "337": "\nSELECT element, bond_type FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 WHERE atom.molecule_id = 'TR016' GROUP BY element, bond_type;\n\n\t----- bird -----\ttoxicology",
    "338": "\nSELECT atom_id FROM connected WHERE atom_id2 = ( SELECT atom_id FROM molecule WHERE molecule_id = 'TR012' ) AND bond_id IN ( SELECT bond_id FROM bond WHERE molecule_id = 'TR012' ) GROUP BY atom_id HAVING COUNT(*) = 2 \n\t----- bird -----\ttoxicology",
    "339": "\n\t----- bird -----\ttoxicology",
    "340": "\nSELECT DISTINCT c.id\nFROM cards c\nJOIN foreign_data f ON c.uuid = f.uuid\nWHERE c.flavorText LIKE '%power%'\nAND c.type IN ('deck', 'textless')\nAND c.manaCost IS NULL;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "341": "\nSELECT DISTINCT c.id, c.borderColor\nFROM cards c\nWHERE c.borderColor = 'borderless';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "342": "\nSELECT DISTINCT c.faceConvertedManaCost AS card_name_value\nFROM cards c\nWHERE c.faceConvertedManaCost > (SELECT faceConvertedManaCost FROM cards WHERE faceConvertedManaCost < c.faceConvertedManaCost);\nSQL_END\n\n\t----- bird -----\tcard_games",
    "343": "\nSELECT DISTINCT c.name\nFROM cards c\nWHERE c.cardKingdomFoilId = 100\n  AND c.frameVersion LIKE '2015%'\n  AND c.frameEffects LIKE '%frame%';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "344": "\nSELECT DISTINCT c.id\nFROM cards c\nJOIN foreign_data f ON c.uuid = f.uuid\nWHERE c.type = 'mythic rarity' AND f.format = 'gladiator';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "345": "\nSELECT T1.flavorText, T2.format, T2.status, T2.uuid\nFROM cards AS T1\nJOIN foreign_data AS T2 ON T1.id = T2.uuid\nWHERE T1.type NOT IN ('artifact', 'legendary');\n\n\t----- bird -----\tcard_games",
    "346": "\nSELECT DISTINCT c.id, c.artist\nFROM cards c\nWHERE c.power = 'unknown';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "347": "\nSELECT c.id, c.name, c.flavorText, r.text, r.uuid\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nJOIN sets s ON c.setCode = s.code\nWHERE c.name LIKE 'Stephen Daniel%'\nAND c.id IN (\n  SELECT t1.id\n  FROM rulings r\n  JOIN card_translations ct ON r.uuid = ct.uuid\n  WHERE ct.cardName = 'Stephen Daniel'\n)\n\n\t----- bird -----\tcard_games",
    "348": "\n-- SELECT * FROM cards WHERE name = 'Sublime Epiphany' AND number IN (74, 75, 76, 77, 78, 79, 80)\n-- \n\t----- bird -----\tcard_games",
    "349": "\nSELECT c.name, c.artist, r.status AS promotional_printing\nFROM cards c\nJOIN rulings r ON c.id = r.set_code;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "350": "\n\t----- bird -----\tcard_games",
    "351": "\nSELECT DISTINCT c.name\nFROM cards c\nWHERE c.language = 'ja';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "352": "\nSELECT CAST(SUM(CASE WHEN T1.language = 'zh-CN' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS percentage;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "353": "\nSELECT DISTINCT T1.setCode, COUNT(T2.id) AS totalCardsPerSet\nFROM cards AS T1\nJOIN legalities AS T2 ON T1.uuid = T2.uuid\nJOIN sets AS T3 ON T1.setCode = T3.code\nWHERE T3.language = 'it' AND T2.status = 'available'\nGROUP BY T1.setCode\n\n\t----- bird -----\tcard_games",
    "354": "\n\t----- bird -----\tcard_games",
    "355": "\n\t----- bird -----\tcard_games",
    "356": "\nSELECT COUNT(*) AS count\nFROM cards\nWHERE power = 'infinite';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "357": "\n\t----- bird -----\tcard_games",
    "358": "\n\t----- bird -----\tcard_games",
    "359": "\n\t----- bird -----\tcard_games",
    "360": "\nSELECT DISTINCT setCode, language\nFROM cards\nWHERE cardName = 'Angel of Mercy';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "361": "\nSELECT COUNT(*) AS count\nFROM legalities\nWHERE status = 'restricted';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "362": "\nSELECT T1.text AS ruling_text, T2.description AS ruling_description FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.id = T2.card_id WHERE T1.name = 'Condemn' AND T2.date = (SELECT MAX(date) FROM rulings) SQL_END\n\t----- bird -----\tcard_games",
    "363": "\nSELECT COUNT(*) AS count\nFROM legalities\nWHERE status = 'restricted'\n  AND (legalities.status = 'unlimited' OR legalities.status = 'fullArt')\n  AND legalities.id IN (\n    SELECT DISTINCT uuid\n    FROM cards\n    WHERE type = 'starter'\n      AND legalities.status = 'unlimited'\n      AND legalities.id NOT IN (\n        SELECT DISTINCT uuid\n        FROM legalities\n        WHERE status = 'restricted'\n          AND (legalities.status = 'fullArt' OR legalities.status = 'textless')\n      )\n  );\nSQL_END\n\n\t----- bird -----\tcard_games",
    "364": "\n\t----- bird -----\tcard_games",
    "365": "\n\t----- bird -----\tcard_games",
    "366": "\n\t----- bird -----\tcard_games",
    "367": "\nSELECT DISTINCT artist FROM cards WHERE type = 'illustration' AND asciiName LIKE '%phyrexian%';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "368": "\nSELECT CAST(SUM(CASE WHEN T1.borderColor = '' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) AS percentage_borderless\nFROM cards AS T1\nGROUP BY T1.id;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "369": "\nSELECT COUNT(*) AS count\nFROM cards\nWHERE language = 'de';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "370": "\nSELECT COUNT(*) FROM cards WHERE asciiName LIKE '%borderless%' AND language = 'ru';\n\t----- bird -----\tcard_games",
    "371": "\nSELECT CAST(SUM(CASE WHEN T1.language = 'fr' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) AS percentage\nFROM cards AS T1\nJOIN legalities AS T2 ON T1.uuid = T2.uuid\nWHERE T1.setCode = 'storyspotlight'\nGROUP BY T1.id;\n\n\t----- bird -----\tcard_games",
    "372": "\nSELECT COUNT(*) FROM cards WHERE toughness = 99 \n\t----- bird -----\tcard_games",
    "373": "\nSELECT DISTINCT c.name FROM cards AS c JOIN foreign_data AS fd ON c.id = fd.uuid WHERE c.flavorText LIKE '%Aaron Boyd%' AND c.type IN ('artifact', 'legendary') \n\t----- bird -----\tcard_games",
    "374": "\nSELECT COUNT(*) AS black_border_only_cards\nFROM cards\nWHERE cardKingdomId = 'mtgo'\n  AND availability = 'black';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "375": "\nSELECT DISTINCT cardId FROM cards WHERE convertedManaCost = 0;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "376": "\n-- SQL_END\nSELECT DISTINCT T1.flavorText, T1.type, T1.manaCost, T1.mcmId, T1.name, T1.number, T1.originalReleaseDate, T1.parentCode, T1.releaseDate, T1.tcgplayerProductId FROM cards AS T1 INNER JOIN foreign_data AS F ON T1.id = F.uuid WHERE T1.flavorText LIKE '%flying%' SQL_END\n\t----- bird -----\tcard_games",
    "377": "\nSELECT COUNT(*) AS count\nFROM cards\nWHERE originalType = 'Summon - Angel'\n  AND subtype NOT IN ('Angel');\nSQL_END\n\n\t----- bird -----\tcard_games",
    "378": "\nSELECT DISTINCT t1.id\nFROM cards AS t1\nJOIN foreign_data AS t2 ON t1.uuid = t2.uuid\nWHERE t1.side = 'F' AND t1.type = 'POWER'\nGROUP BY t1.id\nHAVING COUNT(DISTINCT t3.id) > 1;\n\n\t----- bird -----\tcard_games",
    "379": "\nSELECT DISTINCT t1.id FROM cards AS t1 INNER JOIN foreign_data AS t2 ON t1.uuid = t2.uuid WHERE t1.duelDeck = 'a';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "380": "\nSELECT DISTINCT t3.edhrecRank \nFROM cards AS t1 \nJOIN foreign_data AS t2 ON t1.id = t2.uuid \nJOIN legalities AS t3 ON t1.id = t3.uuid \nWHERE t1.printings LIKE '2015';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "381": "\nSELECT DISTINCT cardArtist FROM cards WHERE language = 'zh-CN' GROUP BY cardArtist HAVING COUNT(*) > 1 \n\t----- bird -----\tcard_games",
    "382": "\nSELECT id FROM cards WHERE cardKingdomId = 'paper' AND cardKingdomFoilId = 'japanese' \n\t----- bird -----\tcard_games",
    "383": "\nSELECT COUNT(*) AS count\nFROM cards\nWHERE asciiName = 'white';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "384": "\nSELECT DISTINCT t1.uuid, t2.format, t2.language \nFROM cards AS t1 \nJOIN foreign_data AS t2 ON t1.id = t2.uuid;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "385": "\n-- SELECT * FROM cards WHERE name = 'Beacon of Immortality';\n\n\t----- bird -----\tcard_games",
    "386": "\nSELECT COUNT(*) AS num_cards,\n       (SELECT FLAVOR_TEXT FROM foreign_data WHERE FLAVOR_TEXT = 'future') AS future_frame_version_status;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "387": "\nSELECT DISTINCT c.id, c.artist, c.asciiName, c.availability, c.borderColor, c.cardKingdomFoilId, c.cardKingdomId, c.colorIdentity, c.colorIndicator, c.colors, cconvertedManaCost, c.duelDeck, c.edhrecRank, c.faceConvertedManaCost, c.faceName, c.flavorName, c.flavorText, c.frameEffects, c.frameVersion, c.hand, c.hasAlternativeDeckLimit, c.hasContentWarning, c.hasFoil, c.hasNonFoil, c.isAlternative, c.isFullArt, c.isOnlineOnly, c.isOversized, c.isPromo, c.isReprint, c.isReserved, c.isStarter, c.isStorySpotlight, c.isTextless, c.isTimeshifted, c.keywords, c.layout, cleadershipSkills, c.life, cloyalty, cmanaCost, cmcId, mtcgArenaId, mtcgoId, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, tcgplayerProductId, text, toughness, type, variants, watermark, UNIQUE(id)\nFROM cards c\nWHERE c.setCode = 'OGW';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "388": "\nSELECT DISTINCT c.id, c.name, c.manaCost, c.flavorText, c.type, c.format, c.language\nFROM cards c\nJOIN foreign_data f ON c.uuid = f.uuid\nWHERE c.setCode = '10E'\n  AND c.manaCost = 5\n  AND c.flavorText IS NOT NULL\n  AND c.type IN ('card', 'spell')\n  AND c.format = 'standard'\n  AND c.language IN ('en', 'es');\n\n\t----- bird -----\tcard_games",
    "389": "\nSELECT DISTINCT c.name, r.date\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nJOIN sets s ON c.setCode = s.code\nWHERE c.type = 'Creature - Elf' AND c.originalType = 'Creature';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "390": "\nSELECT DISTINCT colorIdentity, colorIndicator FROM cards WHERE id IN (1, 20);\nSQL_END\n\n\t----- bird -----\tcard_games",
    "391": "\nSELECT DISTINCT t1.id\nFROM cards AS t1\nJOIN foreign_data AS t2 ON t1.uuid = t2.uuid\nWHERE t1.colorIdentity = 'black' AND t2.language = 'foreign'\n  AND t1.flavorText IS NOT NULL;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "392": "\nSELECT c.name\nFROM cards c\nWHERE c.rarity = 'UNCOMMON'\nORDER BY c.ruling_date ASC;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "393": "\nSELECT COUNT(*) AS count\nFROM cards\nWHERE artist = 'John Avon'\n  AND cardKingdomId AND cardKingdomFoildId IS NOT NULL;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "394": "\nSELECT COUNT(*) AS powerful_count\nFROM cards\nWHERE borderColor = 'white'\n  AND cardKingdomFoilId IS NOT NULL;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "395": "\nSELECT COUNT(*) AS count\nFROM cards\nWHERE artist = 'UDON'\n  AND asciiName LIKE '%mtgo%';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "396": "\nSELECT COUNT(*) AS count\nFROM cards\nWHERE cardKingdomId = '1993'\n  AND availability = 'available on paper'\n  AND hasContentWarning = 1;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "397": "\nSELECT DISTINCT c.id, c.manaCost\nFROM cards c\nWHERE c.cardKingdomFoilId IS NULL\n  AND c.cardKingdomId = '2003'\n  AND c.colorIdentity = 'black'\n  AND c.availability = 'paper'\n  AND c.faceConvertedManaCost = 1;\n\n\t----- bird -----\tcard_games",
    "398": "\nSELECT SUM(CASE WHEN T1.flavorText = 'Rob Alexander' THEN T2.power ELSE 0 END) AS total_unconverted_mana\nFROM cards AS T1\nJOIN foreign_data AS T2 ON T1.id = T2.uuid;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "399": "\nSELECT DISTINCT type FROM cards WHERE tcgplayerProductId = (SELECT tcgplayerProductId FROM set_translations WHERE uuid = (SELECT uuid FROM sets WHERE name = 'arena'));\nSQL_END\n\n\t----- bird -----\tcard_games",
    "400": "\nSELECT DISTINCT t1.setCode FROM cards AS t1 INNER JOIN set_translations AS t2 ON t1.id = t2.setCode WHERE t2.language = 'es' GROUP BY t1.setCode, t1.name ORDER BY t1.setCode ASC \n\t----- bird -----\tcard_games",
    "401": "\nSELECT SUM(CASE WHEN T1.hand = 3 THEN 1 ELSE 0 END) / COUNT(T1.id) * 100 AS percentage\nFROM cards AS T1\nJOIN foreign_data AS T2 ON T1.uuid = T2.uuid\nWHERE T1.type = 'Legendary' AND T1.manaCost > 0 AND T1.hand = 3;\n\n\t----- bird -----\tcard_games",
    "402": "\nSELECT \n    COUNT(DISTINCT t1.id) AS count,\n    SUM(CASE WHEN t2.isStorylight = 1 AND t2.isTextless = 1 THEN 1 ELSE 0 END) AS percentage\nFROM \n    cards t1\nJOIN \n    foreign_data t2 ON t1.uuid = t2.uuid\nWHERE \n    t1.type = 'Story Spotlight' AND t1.isStorylight = 1 AND t1.isTextless = 1\nGROUP BY \n    COUNT(DISTINCT t1.id)\nORDER BY \n    percentage DESC;\n\n\t----- bird -----\tcard_games",
    "403": "\nSELECT \n    COUNT(*) AS total_cards,\n    SUM(CASE WHEN T1.language = 'es' THEN 1 ELSE 0 END) AS percentage_in_spanish\nFROM \n    cards AS T1\nGROUP BY \n    T1.name;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "404": "\nSELECT DISTINCT T1.language \nFROM cards AS T1 \nJOIN set_translations AS T2 ON T1.code = T2.setCode AND T1.baseSetSize = 309;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "405": "\n-- SQL_END\nSELECT COUNT(setCode) AS translated_sets FROM sets WHERE setCode = 'Commander' AND language = 'Portuguese (Brasil)' GROUP BY setCode HAVING COUNT(setCode) > 10\n\t----- bird -----\tcard_games",
    "406": "\nSELECT * FROM cards WHERE type = 'Creature-type';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "407": "\nSELECT DISTINCT type FROM cards WHERE language = 'de' GROUP BY type HAVING COUNT(*) > 1 \n\t----- bird -----\tcard_games",
    "408": "\nSELECT COUNT(*) AS count\nFROM cards\nWHERE power IS NULL;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "409": "\nSELECT COUNT(*) AS num_cards\nFROM cards\nWHERE cardKingdomId = 'pre-modern'\n  AND (type = 'mana' OR type = 'spell') -- Exclude non-mana spells\n  AND faceConvertedManaCost IS NULL;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "410": "\nSELECT DISTINCT t1.id\nFROM cards AS t1\nJOIN foreign_data AS t2 ON t1.uuid = t2.uuid\nWHERE t1.artist = 'Erica Yang' AND t1.flavorText LIKE '%pauper%'\nAND t1.type IN ('card', 'artifact')\nAND t1.status = 'available'\n\n\t----- bird -----\tcard_games",
    "411": "\n-- SELECT DISTINCT ON (cardId) FROM cards WHERE cardId = (SELECT cardId FROM foreign_data WHERE flavorText = 'Das perfekte Gegenmittel zu einer dichten Formation' LIMIT 1)\n-- \n\t----- bird -----\tcard_games",
    "412": "\nSELECT DISTINCT t1.flavorText, t2.name\nFROM cards AS t1\nJOIN foreign_data AS t2 ON t1.uuid = t2.uuid\nWHERE t1.type = 'Creature'\n  AND t1.layout = 'Normal'\n  AND t1.borderColor = 'Black'\n  AND t1.flavorText LIKE '%Matthew D. Wilson%'\n\n\t----- bird -----\tcard_games",
    "413": "\nSELECT COUNT(*) AS count\nFROM cards\nWHERE printRarity = 10 AND date = '2009-10-01';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "414": "\n-- Create a temporary table to store translations of Ravnica block sets\nCREATE TABLE temp_translation AS\nSELECT DISTINCT t1.setCode, t2.text FROM cards t1 INNER JOIN legalities t2 ON t1.code = t2.uuid WHERE t1.baseSetSize = 180 AND t1.block = 'Ravnica' GROUP BY t1.setCode;\n-- Select the language of the translated set\n\n\t----- bird -----\tcard_games",
    "415": "\n\nSELECT \n    COUNT(CASE WHEN T1.format = 'commander' AND T1.status = 'legal' THEN 0 ELSE 1 END) AS percentage\nFROM \n    cards AS T1\nWHERE \n    T1.format = 'commander' AND T1.status = 'legal'\nGROUP BY \n    T1.id\n\n\n\t----- bird -----\tcard_games",
    "416": "\n\nSELECT \n    COUNT(language = 'French' and power is NULL or power = '*') AS percentage\nFROM \n    cards\nWHERE \n    power IS NULL OR power = '*'\nGROUP BY \n    language\nHAVING \n    SUM(power IS NULL) > 0\n\n\n\t----- bird -----\tcard_games",
    "417": "\nSELECT CAST(SUM(CASE WHEN T1.language = 'ja' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode GROUP BY T1.code HAVING COUNT(T1.code) > 1 \n\t----- bird -----\tcard_games",
    "418": "\nSELECT DISTINCT T1.printings FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Daren Bader' AND T1.id NOT IN (SELECT DISTINCT cardId FROM rulings) \n\t----- bird -----\tcard_games",
    "419": "\nSELECT COUNT(*) AS count\nFROM cards\nWHERE colorIdentity = 'no borders'\n  AND cardKingdomFoilId IS NULL\n  AND cardKingdomId IN (\n    SELECT DISTINCT tcgplayerProductId\n    FROM rulings\n    WHERE date >= '2019-01-01' -- Assuming the latest date for EDHRec is January 1, 2019\n      AND text LIKE '%%EDHRec%'\n  )\n\n\t----- bird -----\tcard_games",
    "420": "\nSELECT COUNT(*) AS count\nFROM cards\nWHERE type = 'Oversized'\n  AND releaseDate >= (SELECT MAX(releaseDate) FROM cards)\n  AND isPromotion = 1;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "421": "\nSELECT DISTINCT t1.name\nFROM cards AS t1\nJOIN legalities AS l ON t1.uuid = l.uuid\nWHERE t1.type IN ('arena', 'league') AND t1.promotionTypes = 'true'\nORDER BY t1.power DESC\nLIMIT 3;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "422": "\nSELECT T1.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.multiverseid = 149934 \n\t----- bird -----\tcard_games",
    "423": "\nSELECT DISTINCT t1.cardKingdomId, t2.cardKingdomId\nFROM cards AS t1\nJOIN cards AS t2 ON t1.id > t2.id\nORDER BY t1.cardKingdomId ASC;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "424": "\nSELECT COUNT(*) AS proportion\nFROM cards\nWHERE layout = 'normal';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "425": "\nSELECT DISTINCT cardNumber\nFROM cards\nWHERE subtypes = 'Angel' AND subtypes = 'Wizard';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "426": "\nSELECT DISTINCT t1.name\nFROM cards AS t1\nWHERE t1.id NOT IN (\n  SELECT DISTINCT t2.id\n  FROM sets AS t2\n  WHERE t2.code = 'MTG'\n)\nORDER BY t1.name;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "427": "\nSELECT DISTINCT t2.language\nFROM cards AS t1\nJOIN foreign_data AS t3 ON t1.uuid = t3.id\nJOIN legalities AS t4 ON t1.uuid = t4.uuid\nJOIN sets AS t5 ON t1.setCode = t5.code\nWHERE t5.baseSetSize > 0 AND t5.block = 'ARC' AND t5.name LIKE '%Archenemy%'\n\n\t----- bird -----\tcard_games",
    "428": "\nSELECT T1.name, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.number = 5 \n\t----- bird -----\tcard_games",
    "429": "\n\nSELECT T1.language, T1.expansionType FROM sets AS T1 INNER JOIN card_translations AS T2 ON T1.id = T2.setCode WHERE T1.number = 206 END SQL_END\n\t----- bird -----\tcard_games",
    "430": "\nSELECT t1.id\nFROM cards AS t1\nJOIN foreign_data AS t2 ON t1.uuid = t2.uuid\nWHERE t1.language = 'Italian'\n  AND t1.setCode IN ('Shadowmoor')\nORDER BY t1.id ASC;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "431": "\nSELECT DISTINCT t1.setCode\nFROM cards AS t1\nJOIN sets AS t2 ON t1.setCode = t2.code\nWHERE t1.flavorText LIKE '%\u65e5\u672c\u8a9e%'\n  AND t1.type IN ('card', 'foil')\n  AND t2.baseSetSize > 0;\n\n\t----- bird -----\tcard_games",
    "432": "\n\t----- bird -----\tcard_games",
    "433": "\nSELECT SUM(CASE WHEN T1.language = 'zh-CN' AND T2.isOnlineOnly THEN 1 ELSE 0 END) / COUNT(T1.id) AS percentage\nFROM cards AS T1\nJOIN legalities AS T2 ON T1.uuid = T2.uuid\nWHERE T1.language = 'zh-CN' AND T2.isOnlineOnly = 1;\n\n\t----- bird -----\tcard_games",
    "434": "\nSELECT COUNT(DISTINCT setCode) FROM sets WHERE language = 'ja' AND isOnlineOnly = 1 SQL_END\n\t----- bird -----\tcard_games",
    "435": "\nSELECT COUNT(id)\nFROM cards\nWHERE colorIndicator = 'black';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "436": "\nSELECT COUNT(id)\nFROM cards\nWHERE frameEffects = 'extendedart';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "437": "\nSELECT DISTINCT c.id\nFROM cards c\nJOIN foreign_data f ON c.uuid = f.uuid\nWHERE c.cardKingdomFoilId IS NOT NULL AND c.cardKingdomId = 'black';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "438": "\n-- SELECT DISTINCT ON (id) FROM cards WHERE id = 174;\n\n\t----- bird -----\tcard_games",
    "439": "\nSELECT DISTINCT t1.setCode FROM sets AS t1 INNER JOIN set_translations AS t2 ON t1.code = t2.setCode WHERE t1.setCode = 'ALL' \n\t----- bird -----\tcard_games",
    "440": "\nSELECT T1.flavorText FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'A Pedra Fellwar' AND T1.language IS NULL \n\t----- bird -----\tcard_games",
    "441": "\nSELECT DISTINCT t1.setCode FROM sets AS t1 INNER JOIN card_translations AS t2 ON t1.code = t2.setCode WHERE t1.releaseDate = '07/13/2007' AND t2.date = '07/13/2007' SQL_END\n\t----- bird -----\tcard_games",
    "442": "\n-- SELECT DISTINCT t1.baseSetSize, t1.setCode FROM cards AS t1 INNER JOIN sets AS t2 ON t1.parentCode = t2.code WHERE t2.name LIKE 'Masques%' OR t2.name LIKE 'Mirage%';\n\n\t----- bird -----\tcard_games",
    "443": "\n\t----- bird -----\tcard_games",
    "444": "\nSELECT T1.name, T2.type \nFROM cards AS T1 \nJOIN foreign_data AS T2 ON T1.uuid = T2.id \nWHERE T1.watermark = 'boros watermark';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "445": "\nSELECT T1.flavorText, T1.type\nFROM cards AS T1\nJOIN foreign_data AS T2 ON T1.uuid = T2.uuid\nWHERE T1.colorPieWatermark = 'true';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "446": "\nSELECT COUNT(*) AS total_cards, SUM(CASE WHEN convertedManaCost = 10 THEN 1 ELSE 0 END) AS count_with_10_conversion\nFROM cards\nWHERE setCode = 'Abyssal Horror';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "447": "\nSELECT DISTINCT t1.setCode FROM cards AS t1 INNER JOIN sets AS t2 ON t1.parentCode = t2.code WHERE t1.type = 'expansion commander' \n\t----- bird -----\tcard_games",
    "448": "\nSELECT T1.name, T2.type \nFROM cards AS T1 \nJOIN foreign_data AS T2 ON T1.uuid = T2.id \nWHERE T1.watermark = 'abzan';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "449": "\nSELECT T1.language, T3.type\nFROM cards AS T1\nJOIN foreign_data AS T2 ON T1.uuid = T2.uuid\nJOIN legalities AS T3 ON T1.id = T3.uuid;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "450": "\nSELECT COUNT(*) AS count\nFROM cards\nWHERE artist = 'Aaron Miller'\n  AND asciiName LIKE '%incredibly powerful%'\n  AND availability = 'online-only';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "451": "\nSELECT COUNT(*) AS count\nFROM cards\nWHERE cardKingdomId = 'paper'\n  AND faceConvertedManaCost > 0;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "452": "\n\nSELECT DISTINCT cardName FROM cards WHERE type = 'text';\n\n\n\t----- bird -----\tcard_games",
    "453": "\nSELECT t1.manaCost FROM cards AS t1 INNER JOIN foreign_data AS t2 ON t1.id = t2.uuid WHERE t1.name = 'Ancestor\\'s Chosen' AND t1.type = 'mana';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "454": "\nSELECT COUNT(*) AS count\nFROM cards\nWHERE cardKingdomFoilId IS NULL AND cardKingdomId = 'white';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "455": "\nSELECT DISTINCT c.name\nFROM cards c\nJOIN foreign_data f ON c.uuid = f.uuid\nWHERE c.flavorText IN ('promotional painting')\n  AND c.type IN ('card', 'foil');\nSQL_END\n\n\t----- bird -----\tcard_games",
    "456": "\nSELECT DISTINCT type FROM cards WHERE asciiName = 'Molimo, Maro-Sorcerer' \n\t----- bird -----\tcard_games",
    "457": "\nSELECT DISTINCT t1.mtgArenaId, t1.name\nFROM cards AS t1\nJOIN foreign_data AS t2 ON t1.uuid = t2.uuid\nWHERE t1.type = 'bundle' AND t2.flavorText LIKE '%promo%';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "458": "\nSELECT COUNT(DISTINCT cardKingdomId) AS num_artists\nFROM cards\nWHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IN ('arena', 'mtgo')\n  AND asciiName LIKE '%black%'\n  AND availability = 'available';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "459": "\nSELECT t1.name, t2.power AS \"Cost\"\nFROM cards AS t1\nJOIN foreign_data AS t2 ON t1.id = t2.uuid\nWHERE t1.cardKingdomFoilId = 'Serra Angel' OR t1.cardKingdomId = 'Shrine Keeper';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "460": "\nSELECT DISTINCT c.artist\nFROM cards c\nWHERE c.name = 'Battra, Dark Destroyer';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "461": "\nSELECT T1.name, T2.manaCost\nFROM cards AS T1\nJOIN foreign_data AS T2 ON T1.id = T2.uuid\nWHERE T1.cardFrameStyle = '2003'\nORDER BY T1.convertedManaCost DESC\nLIMIT 3;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "462": "\n\t----- bird -----\tcard_games",
    "463": "\nSELECT COUNT(DISTINCT T1.uuid) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.id = T2.setCode WHERE T1.name LIKE 'Angel of Mercy%' \n\t----- bird -----\tcard_games",
    "464": "\nSELECT DISTINCT cardName FROM cards WHERE setCode = 'Hauptset Zehnte Edition' END_OF_SQL\n\t----- bird -----\tcard_games",
    "465": "\nSELECT DISTINCT t1.name AS cardName, t2.flavorText AS flavorText, t3.text AS text\nFROM cards t1\nJOIN foreign_data t2 ON t1.id = t2.uuid\nJOIN legalities t3 ON t2.language = t3.language AND t2.format = t3.format;\n\n\t----- bird -----\tcard_games",
    "466": "\nSELECT COUNT(*) AS count\nFROM cards\nWHERE artist = 'Adam Rex'\n  AND cardKingdomId IN (\n    SELECT DISTINCT cardKingdomFoilId\n    FROM foreign_data\n    WHERE flavorText = 'Hauptset Zehnte Edition'\n  );\nSQL_END\n\n\t----- bird -----\tcard_games",
    "467": "\nSELECT COUNT(*) FROM cards WHERE setCode = 'Hauptset Zehnte Edition';\n\n\t----- bird -----\tcard_games",
    "468": "\n\t----- bird -----\tcard_games",
    "469": "\nSELECT COUNT(*) FROM cards WHERE name = 'Angel of Mercy';\n\n\t----- bird -----\tcard_games",
    "470": "\nSELECT T1.releaseDate FROM sets AS T1 INNER JOIN card_translations AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Ancestor\\'s Chosen' AND T2.text LIKE '%Chosen%' \n\t----- bird -----\tcard_games",
    "471": "\n\t----- bird -----\tcard_games",
    "472": "\n-- SELECT COUNT(*) FROM sets WHERE block = 'Ice Age';\n\n\t----- bird -----\tcard_games",
    "473": "\n\t----- bird -----\tcard_games",
    "474": "\nSELECT COUNT(setCode)\nFROM sets\nWHERE baseSetSize < 10;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "475": "\nSELECT COUNT(*) AS count\nFROM cards\nWHERE cardKingdomId = 'Coldsnap'\n  AND asciiName LIKE '%black%';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "476": "\nSELECT DISTINCT c.name\nFROM cards c\nJOIN foreign_data fd ON c.id = fd.uuid\nWHERE c.manaCost = (SELECT MAX(manaCost) FROM cards WHERE manaCost > c.manaCost)\nORDER BY c.manaCost DESC;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "477": "\nSELECT DISTINCT c.id, c.artist\nFROM cards c\nJOIN sets s ON c.setCode = s.code\nWHERE s.baseSetSize > 0 AND s.name IN ('Coldsnap', 'Jeremy Jarvis', 'Aaron Miller')\nAND c.name = 'Jeremy Jarvis'\nAND c.name = 'Aaron Miller';\n\n\t----- bird -----\tcard_games",
    "478": "\n\t----- bird -----\tcard_games",
    "479": "\nSELECT COUNT(*) AS count\nFROM cards\nWHERE convertedManaCost > 5 AND power IS NULL;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "480": "\nSELECT T1.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor\\'s Chosen' AND T1.flavorText LIKE '%chosen%' \n\t----- bird -----\tcard_games",
    "481": "\nSELECT DISTINCT T2.flavorText\nFROM foreign_data AS T1\nJOIN legalities AS T2 ON T1.uuid = T2.uuid\nJOIN sets AS T3 ON T1.setCode = T3.code\nWHERE T3.name = 'Ancestor\\'s Chosen'\n  AND T1.flavorText LIKE '%%';\n\n\t----- bird -----\tcard_games",
    "482": "\n\t----- bird -----\tcard_games",
    "483": "\nSELECT T1.text FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.setCode = 'Coldsnap' GROUP BY T1.text ORDER BY T1.text END \n\t----- bird -----\tcard_games",
    "484": "\nSELECT DISTINCT c.cardKingdomFoilId, c.name\nFROM cards c\nJOIN foreign_data f ON c.id = f.uuid\nWHERE c.flavorText LIKE '%Coldsnap%'\n  AND c.manaCost * 100 / c.power > 50\nORDER BY c.manaCost DESC;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "485": "\nSELECT DISTINCT t1.date FROM cards AS t1 INNER JOIN rulings AS t2 ON t1.id = t2.cardId ORDER BY t2.date DESC LIMIT 1 \n\t----- bird -----\tcard_games",
    "486": "\nSELECT CAST(SUM(CASE WHEN T1.manaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) AS percentage\nFROM cards AS T1\nJOIN legalities AS T2 ON T1.uuid = T2.uuid\nJOIN sets AS T3 ON T1.setCode = T3.code\nWHERE T3.baseSetSize > 0 AND T3.name = 'Coldsnap';\n\n\t----- bird -----\tcard_games",
    "487": "\nSELECT \n    SUM(CASE WHEN T1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS incredibly_powerful_cards,\n    COUNT(*) / SUM(CASE WHEN T1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) * 100 AS percentage\nFROM \n    cards C\nJOIN \n    foreign_data F ON C.flavorText = F.flavorText AND F.language = 'en'\nWHERE \n    C.name = 'Coldsnap' AND T1.cardKingdomFoilId IS NOT NULL\nGROUP BY \n    incredibly_powerful_cards;\n\n\t----- bird -----\tcard_games",
    "488": "\nSELECT T2.mtgoCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.releaseDate = '2017-07-14' AND T2.language = 'en' SQL_END\n\t----- bird -----\tcard_games",
    "489": "\nSELECT T1.keyruneCode FROM sets AS T1 INNER JOIN card_translations AS T2 ON T1.code = T2.setCode WHERE T1.code = 'PKHC' AND T2.text LIKE '%keyrune%' END \n\t----- bird -----\tcard_games",
    "490": "\n\t----- bird -----\tcard_games",
    "491": "\nSELECT DISTINCT t1.name FROM cards AS t1 INNER JOIN sets AS t2 ON t1.setCode = t2.code WHERE t2.releaseDate = '2017-06-09' AND t1.mangaId IS NULL \n\t----- bird -----\tcard_games",
    "492": "\n\t----- bird -----\tcard_games",
    "493": "\nSELECT T1.parentCode FROM sets AS T1 INNER JOIN card_translations AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Commander 2014 Oversized' AND T2.translation LIKE '%oversized%' \n\t----- bird -----\tcard_games",
    "494": "\nSELECT c.id, c.name, c.flavorText, c.type, c.manaCost, c.power, c.text, c.doubles, c.isFullArt, c.isOversized, c.isPromo, c.isReprint, c.isReserved, c.isStarter, c.isStorySpotlight, c.isTextless, c.isTimeshifted\nFROM cards c\nJOIN foreign_data f ON c.uuid = f.uuid\nWHERE c.flavorText = 'Jim Pavelec' AND c.type IN ('artifact', 'legendary')\n\n\t----- bird -----\tcard_games",
    "495": "\nSELECT T1.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Evacuation' \n\t----- bird -----\tcard_games",
    "496": "\nSELECT COUNT(id) FROM cards WHERE name = 'Rinascita di Alara' GROUP BY name;\n\n\t----- bird -----\tcard_games",
    "497": "\n\t----- bird -----\tcard_games",
    "498": "\n\nSELECT DISTINCT t1.name FROM cards AS t1 INNER JOIN sets AS t2 ON t1.setCode = t2.code WHERE t1.asciiName LIKE 'Tendo Ice Bridge%' AND t2.baseSetSize > 0\n\t----- bird -----\tcard_games",
    "499": "\nSELECT COUNT(DISTINCT T1.setCode) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.id = T2.setCode WHERE T1.name = 'Salvat 2011' AND T2.language = 'en' \n\t----- bird -----\tcard_games",
    "500": "\nSELECT T1.name AS JapaneseName FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.cardKingdomId = 'Fellwar Stone' AND T1.type = 'card' AND T1.isFullArt = 0\n\t----- bird -----\tcard_games",
    "501": "\nSELECT DISTINCT t1.name\nFROM cards AS t1\nJOIN foreign_data AS t2 ON t1.id = t2.uuid\nWHERE t1.setCode = 'Journey into Nyx Hero\\'s Path'\n  AND t1.manaCost = (SELECT MAX(manaCost) FROM cards WHERE setCode = 'Journey into Nyx Hero\\'s Path')\nORDER BY t1.manaCost DESC;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "502": "\n\t----- bird -----\tcard_games",
    "503": "\n\t----- bird -----\tcard_games",
    "504": "\nSELECT COUNT(*) AS num_cards\nFROM cards\nWHERE cardKingdomId = 'World Championship Decks 2004'\n  AND asciiName LIKE '%3';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "505": "\n\t----- bird -----\tcard_games",
    "506": "\nSELECT COUNT(*) AS count, SUM(CASE WHEN T1.type = 'foilOnly' THEN 1 ELSE 0 END) / COUNT(*) * 100 AS percentage\nFROM cards AS T1\nJOIN legalities AS T2 ON T1.uuid = T2.uuid\nWHERE T1.type = 'nonFoilOnly'\nGROUP BY COUNT(T1.id)\nHAVING SUM(CASE WHEN T1.type = 'foilOnly' THEN 1 ELSE 0 END) / COUNT(*) * 100 > 50;\n\n\t----- bird -----\tcard_games",
    "507": "\nSELECT SUM(CASE WHEN T1.type = 'cardKingdomFoilId' THEN 1 ELSE 0 END) AS percentage_online_only\nFROM cards AS T1\nJOIN legalities AS T2 ON T1.id = T2.uuid\nWHERE T1.flavorText LIKE '%Brazil% Portuguese%'\nGROUP BY T1.id\nHAVING SUM(CASE WHEN T1.type = 'cardKingdomFoilId' THEN 1 ELSE 0 END) > 0;\n\n\t----- bird -----\tcard_games",
    "508": "\nSELECT DISTINCT t1.type\nFROM cards AS t1\nWHERE t1.id NOT IN (\n  SELECT DISTINCT t2.id\n  FROM cards AS t2\n  WHERE t2.name = 'Aleksi Briclot'\n)\nAND t1.printings IS NULL;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "509": "\nSELECT DISTINCT t1.setCode, COUNT(*) AS num_cards\nFROM cards t1\nGROUP BY t1.setCode\nORDER BY num_cards DESC\nLIMIT 1;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "510": "\nSELECT T1.name, T2.flavorText, T3.type, T4.text\nFROM cards AS T1\nJOIN foreign_data AS T2 ON T1.uuid = T2.uuid\nJOIN legalities AS T3 ON T1.id = T3.uuid\nJOIN sets AS T4 ON T1.setCode = T4.code\nWHERE T1.manaCost = (SELECT MAX(manaCost) FROM cards WHERE manaCost IS NOT NULL)\nORDER BY T1.manaCost DESC\nLIMIT 1;\n\n\t----- bird -----\tcard_games",
    "511": "\nSELECT t1.frameEffects\nFROM cards AS t1\nJOIN foreign_data AS t2 ON t1.uuid = t2.uuid\nWHERE t1.type = 'foil' AND t1.flavorText LIKE '%power%'\nGROUP BY t1.frameEffects\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n\t----- bird -----\tcard_games",
    "512": "\nSELECT COUNT(*) AS count\nFROM cards\nWHERE power = 'unknown'\n  AND faceConvertedManaCost IS NULL\n  AND faceName IN ('duelDeck', 'dual');\nSQL_END\n\n\t----- bird -----\tcard_games",
    "513": "\nSELECT DISTINCT t1.id\nFROM cards AS t1\nJOIN sets AS t2 ON t1.setCode = t2.code\nWHERE t2.expansionType = 'Commander'\n  AND (t1.manaCost + t1.power) > 0\n  AND NOT EXISTS (\n    SELECT 1 FROM foreign_data WHERE uuid = t1.uuid\n  )\n  AND NOT EXISTS (\n    SELECT 1 FROM rulings WHERE date >= t1.releaseDate AND date < t2.totalSetSize\n  );\n\n\t----- bird -----\tcard_games",
    "514": "\nSELECT cardKingdomFoilId, max(faceConvertedManaCost) AS highestUnconvertedManaCost\nFROM cards\nWHERE cardKingdomFoilId IN (\n  SELECT fk_id\n  FROM foreign_data\n  WHERE flavorText = 'duels'\n)\nGROUP BY cardKingdomFoilId\nORDER BY highestUnconvertedManaCost DESC\nLIMIT 10;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "515": "\nSELECT MIN(cardReleaseDate) AS oldestMythicCardRelease, legalPlayFormats\nFROM cards\nWHERE cardType = 'mythic'\nORDER BY cardReleaseDate ASC;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "516": "\nSELECT COUNT(*) FROM cards WHERE foreign_data.flavorText = 'Volkan Ba\u00c7\u00b5a' AND foreign_data.language = 'fr-FR' \n\t----- bird -----\tcard_games",
    "517": "\nSELECT COUNT(*) AS rare_enchantment_abundance_count\nFROM cards\nWHERE type = 'ENCHANTMENT'\n  AND availability = 'RARE'\n  AND legalities.status = 'LEGAL';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "518": "\nSELECT T1.playFormat, T1.name\nFROM cards AS T1\nJOIN legalities AS T2 ON T1.uuid = T2.uuid\nWHERE T1.bannedStatus = (SELECT MAX(bannedStatus) FROM cards)\nORDER BY T1.bannedStatus DESC;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "519": "\n\t----- bird -----\tcard_games",
    "520": "\nSELECT T1.flavorText, T2.format AS format_of_play\nFROM cards AS T1\nJOIN foreign_data AS T2 ON T1.uuid = T2.uuid\nWHERE T1.id IN (\n  SELECT T3.id\n  FROM cards AS T3\n  WHERE T3.id - T1.id = 1\n)\nORDER BY COUNT(*) DESC, T1.id;\n\n\t----- bird -----\tcard_games",
    "521": "\nSELECT DISTINCT t1.name, t2.status\nFROM cards AS t1\nJOIN foreign_data AS t2 ON t1.uuid = t2.uuid\nWHERE t1.version = 1997 AND t1.flavorText LIKE '%sensitive%';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "522": "\nSELECT c.name, edhrecRank FROM cards AS c\nJOIN foreign_data AS fd ON c.id = fd.uuid\nWHERE c.rank = 1 AND c.flavorText IS NULL;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "523": "\nSELECT T1.releaseDate, COUNT(T2.id) AS num_sets\nFROM cards AS T1\nJOIN sets AS T2 ON T1.setCode = T2.code\nWHERE T1.releaseDate BETWEEN '2012-01-01' AND '2015-12-31'\nGROUP BY T1.releaseDate\nORDER BY T1.releaseDate;\n\n\t----- bird -----\tcard_games",
    "524": "\nSELECT DISTINCT t1.artist\nFROM cards AS t1\nJOIN foreign_data AS t2 ON t1.uuid = t2.uuid\nWHERE t1.cardKingdomFoilId IS NULL AND t1.cardKingdomId IN (SELECT cardKingdomFoilId FROM cards WHERE asciiName = 'black' AND availability = 'arena')\n\n\t----- bird -----\tcard_games",
    "525": "\nSELECT DISTINCT t1.uuid\nFROM cards AS t1\nJOIN legalities AS t2 ON t1.id = t2.uuid\nWHERE t2.format IN ('old-school', 'banned')\n  OR t2.format IS NULL;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "526": "\nSELECT COUNT(*) AS available_only_in_paper FROM cards WHERE artist = 'Matthew D. Wilson' AND asciiName LIKE '%paper%';\nSQL_END\n\n\t----- bird -----\tcard_games",
    "527": "\nSELECT *\nFROM rulings\nWHERE cardName = 'Kev Walker'\n  AND setCode IN (\n    SELECT uuid\n    FROM cards\n    WHERE artist = 'Kev Walker'\n      AND name LIKE '%Walker%'\n  )\nORDER BY date DESC;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "528": "\nSELECT c.name, f.format\nFROM cards c\nJOIN foreign_data f ON c.uuid = f.uuid;\nSQL_END\n\n\t----- bird -----\tcard_games",
    "529": "\nSELECT DISTINCT t1.name\nFROM cards AS t1\nJOIN legalities AS l ON t1.uuid = l.uuid\nWHERE l.format IN ('ko', 'kz')\n  AND NOT EXISTS (\n    SELECT 1\n    FROM sets AS s\n    JOIN set_translations AS st ON s.id = st.setCode\n    WHERE st.language = 'ko' AND st.date >= s.releaseDate\n      OR st.language = 'kz' AND st.date >= s.releaseDate\n  );\n\n\t----- bird -----\tcard_games",
    "530": "\nSELECT DISTINCT t1.frameVersion, t2.name AS bannedCardName\nFROM cards AS t1\nJOIN foreign_data AS t2 ON t1.flavorText = t2.flavorText AND t1.uuid = t2.uuid\nWHERE t1.name LIKE 'Allen Williams%'\nAND t1.id IN (\n  SELECT cardId\n  FROM rulings\n  WHERE date >= '2023-01-01' AND date < '2023-12-31'\n)\n\n\t----- bird -----\tcard_games",
    "531": "\nSELECT users.DisplayName FROM users INNER JOIN votes ON users.Id = votes.UserId WHERE users.DisplayName = 'Harlan' ORDER BY users.Reputation DESC LIMIT 1 \n\t----- bird -----\tcodebase_community",
    "532": "\nSELECT DISTINCT u.DisplayName FROM users AS u INNER JOIN posts AS p ON u.Id = p.OwnerUserId WHERE u.CreationDate LIKE '2014%' \n\t----- bird -----\tcodebase_community",
    "533": "\nSELECT COUNT(DISTINCT t2.`Id`) AS `Count`\nFROM users AS t1\nJOIN posts AS t2 ON t1.`AccountId` = t2.`OwnerUserId`\nWHERE strftime('%Y', t2.`LastAccessDate`) >= '2014-09-01'\nGROUP BY t1.`Id`\n\n\t----- bird -----\tcodebase_community",
    "534": "\nSELECT users.DisplayName FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId ORDER BY posts.ViewCount DESC LIMIT 1 \n\t----- bird -----\tcodebase_community",
    "535": "\nSELECT COUNT(DISTINCT u.Id) AS count, COUNT(u.Id) - (SELECT COUNT(*) FROM votes WHERE voteTypeId = 1 AND userId = u.Id) AS downVotesCount\nFROM users u\nWHERE u.upVotes > 100;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "536": "\nSELECT COUNT(DISTINCT t1.UserId) AS NumberOfUsers\nFROM users AS t1\nJOIN posts AS t2 ON t1.Id = t2.OwnerUserId\nWHERE t2.ViewCount > 10\nAND t1.CreationDate >= '2013-01-01';\n\n\t----- bird -----\tcodebase_community",
    "537": "\nSELECT COUNT(DISTINCT PostId) FROM users WHERE DisplayName = 'csgillespie';\n\n\t----- bird -----\tcodebase_community",
    "538": "\nSELECT T1.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'csgillespie' GROUP BY T1.Title \n\t----- bird -----\tcodebase_community",
    "539": "\nSELECT T1.OwnerUserId FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts' \n\t----- bird -----\tcodebase_community",
    "540": "\nSELECT T1.Title\nFROM posts AS T1\nJOIN users AS T2 ON T1.OwnerUserId = T2.Id\nWHERE T2.DisplayName = 'csgillespie'\nORDER BY T1.Score DESC\nLIMIT 1;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "541": "\nSELECT users.DisplayName FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId ORDER BY posts.Score DESC LIMIT 1 \n\t----- bird -----\tcodebase_community",
    "542": "\nSELECT COUNT(DISTINCT T2.PostId) AS TotalComments\nFROM badges AS T1\nJOIN users AS T3 ON T1.UserId = T3.Id\nJOIN posts AS T4 ON T1.PostTypeId = T4.PostTypeId\nWHERE T4.OwnerUserId = 5 AND T4.Title LIKE 'csgillespie%'\n\n\t----- bird -----\tcodebase_community",
    "543": "\nSELECT COUNT(*) AS AnswersCount\nFROM posts\nWHERE OwnerUserId = 10985;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "544": "\nSELECT users.DisplayName FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.Title = 'Examples for teaching: Correlation does not mean causation' ORDER BY posts.LastEditorDate DESC LIMIT 1 \n\t----- bird -----\tcodebase_community",
    "545": "\nSELECT COUNT(DISTINCT PostId) AS RootPostsCount\nFROM posts\nWHERE OwnerUserId = 10985;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "546": "\nSELECT u.DisplayName\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nWHERE p.AcceptedAnswerId IS NULL;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "547": "\nSELECT COUNT(DISTINCT PostId) AS ScoreCount\nFROM posts\nWHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'elder user');\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "548": "\nSELECT T1.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts' \n\t----- bird -----\tcodebase_community",
    "549": "\nSELECT T2.PostId, T2.Body\nFROM tags AS T1\nJOIN posts AS T2 ON T1.ExcerptPostId = T2.Id\nWHERE T1.TagName = 'bayesian';\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "550": "\nSELECT T2.PostId, T1.Body\nFROM posts AS T1\nJOIN postLinks AS T2 ON T1.Id = T2.PostId\nWHERE T2.RevisionGUID IS NULL\nORDER BY COUNT(*) DESC\nLIMIT 1;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "551": "\nSELECT COUNT(DISTINCT Id) AS BadgeCount\nFROM badges;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "552": "\nSELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') GROUP BY Name \n\t----- bird -----\tcodebase_community",
    "553": "\nSELECT COUNT(DISTINCT Id) AS badge_count\nFROM badges\nWHERE UserId = 2011;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "554": "\nSELECT u.DisplayName\nFROM users u\nJOIN badges b ON u.Id = b.UserId\nWHERE b.Date = (\n  SELECT MAX(Date)\n  FROM badges\n  WHERE Date = (\n    SELECT MIN(Date)\n    FROM badges\n    GROUP BY UserId\n  )\n);\n\n\t----- bird -----\tcodebase_community",
    "555": "\nSELECT AVG(T1.Score) AS AverageScore\nFROM posts AS T1\nJOIN users AS T2 ON T1.OwnerUserId = T2.Id\nWHERE T2.DisplayName = 'csgillespie';\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "556": "\nSELECT AVG(badges.Score) AS AverageBadges\nFROM badges\nJOIN users ON badges.UserId = users.Id\nWHERE users.Views > 200;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "557": "\nSELECT \n    COUNT(DISTINCT T1.PostId) AS TotalPosts,\n    SUM(CASE WHEN T2.Score > 20 THEN 1 ELSE 0 END) AS PostsOwnedByElderUser\nFROM \n    badges AS T1\nJOIN \n    users AS T2 ON T1.UserId = T2.Id\nWHERE \n    T1.Score > 20\nGROUP BY \n    T1.PostId\nHAVING \n    SUM(CASE WHEN T3.Score > 20 THEN 1 ELSE 0 END) / COUNT(DISTINCT T1.PostId) * 100 > 50;\n\n\t----- bird -----\tcodebase_community",
    "558": "\nSELECT COUNT(DISTINCT T1.UserId) FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'No.58' AND T2.BountyAmount = 19 \n\t----- bird -----\tcodebase_community",
    "559": "\nSELECT MAX(CreationDate) FROM votes;\n\n\t----- bird -----\tcodebase_community",
    "560": "\nSELECT COUNT(*) FROM badges WHERE Name = 'Revival';\n\n\t----- bird -----\tcodebase_community",
    "561": "\nSELECT T1.Title\nFROM posts AS T1\nJOIN postHistory AS T2 ON T1.Id = T2.PostId\nWHERE T2.Score = (SELECT MAX(T3.Score) FROM posts AS T3 WHERE T3.Id = T1.PostId)\nORDER BY T1.Title DESC;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "562": "\nSELECT COUNT(DISTINCT T2.Comment) AS CommentCount\nFROM postHistory AS T1\nJOIN posts AS T2 ON T1.PostId = T2.Id\nWHERE T1.RevisionGUID LIKE '1910%'\nLIMIT 1;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "563": "\nSELECT COUNT(DISTINCT T2.PostId) AS favorite_counts\nFROM posts AS T1\nJOIN postHistory AS T2 ON T1.Id = T2.PostId AND T2.RevisionGUID = '2014-04-23T15:29:39Z'\nWHERE T1.OwnerUserId = 3025;\n\n\t----- bird -----\tcodebase_community",
    "564": "\nSELECT T1.Text FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T2.ParentId = 107829;\n\n\t----- bird -----\tcodebase_community",
    "565": "\nSELECT T1.PostId, T2.Score, T2.Text\nFROM badges AS T1\nJOIN posts AS T2 ON T1.Id = T2.OwnerUserId\nWHERE T1.Name = 'User No.23853' AND T1.Date >= '2013-07-12 09:08:18'\nAND T2.PostId = (SELECT PostId FROM postHistory WHERE CreationDate = '2013-07-12 09:08:18' AND UserId = 23853);\n\n\t----- bird -----\tcodebase_community",
    "566": "\nSELECT T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.PostId = 65041 \n\t----- bird -----\tcodebase_community",
    "567": "\nSELECT COUNT(DISTINCT T1.PostId) AS PostsOwned FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Tiago Pasqualini' GROUP BY T1.Id ORDER BY T1.Id DESC SQL_END\n\t----- bird -----\tcodebase_community",
    "568": "\nSELECT users.DisplayName FROM users INNER JOIN votes ON users.Id = votes.UserId WHERE users.Id = (SELECT voteId FROM postVotes WHERE postId = 6347) ORDER BY votes.BountyAmount DESC LIMIT 1 \n\t----- bird -----\tcodebase_community",
    "569": "\nSELECT COUNT(DISTINCT T1.VoteId) FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'data visualization' \n\t----- bird -----\tcodebase_community",
    "570": "\nSELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'DatEpicCoderGuyWhoPrograms' \n\t----- bird -----\tcodebase_community",
    "571": "\nSELECT \n    COUNT(DISTINCT T2.PostId) AS NumberOfPosts,\n    COUNT(T1.VoteTypeId) AS NumberOfVotes\nFROM \n    badges AS T1\nJOIN \n    users AS T2 ON T1.UserId = T2.Id\nWHERE \n    T1.Name = 'No.24';\n\n\t----- bird -----\tcodebase_community",
    "572": "\nSELECT COUNT(DISTINCT T1.PostId) AS Views FROM badges AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Name = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' AND T2.RevisionGUID LIKE '%%-%%' END SQL_END\n\t----- bird -----\tcodebase_community",
    "573": "\nSELECT c.Id, cp.PostId, cp.RevisionGUID, cp.CreationDate, u.DisplayName\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nJOIN postHistory pc ON p.Id = pc.PostId\nJOIN comments c ON pc.UserId = c.UserId AND pc.PostId = c.PostId\nWHERE c.Score = 17;\n\n\t----- bird -----\tcodebase_community",
    "574": "\nSELECT u.DisplayName\nFROM users u\nWHERE u.WebsiteUrl = 'http://stackoverflow.com';\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "575": "\nSELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'SilentGhost' AND T1.Date IS NULL \n\t----- bird -----\tcodebase_community",
    "576": "\nSELECT u.DisplayName FROM users u WHERE u.Id = (SELECT c.UserId FROM badges b JOIN posts p ON b.PostId = p.Id WHERE p.Title = 'thank you user93!') AND u.Id != 1000000000000000000\n\n\t----- bird -----\tcodebase_community",
    "577": "\nSELECT c.Id, c.PostId, c.Score, c.Text, c.CreationDate, u.DisplayName\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nJOIN posts p ON u.Id = p.OwnerUserId\nJOIN comments c ON p.Id = c.PostId\nWHERE b.Name = 'A Lion'\nORDER BY c.CreationDate;\n\n\t----- bird -----\tcodebase_community",
    "578": "\nSELECT u.DisplayName, SUM(v.BountyAmount) AS TotalBounties\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nJOIN postHistory ph ON p.Id = ph.PostId\nWHERE p.Title = 'Understanding what Dassault iSight is doing?'\nGROUP BY u.Id;\n\n\t----- bird -----\tcodebase_community",
    "579": "\nSELECT T1.Comment FROM badges AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'How does gentle boosting differ from AdaBoost?' \n\t----- bird -----\tcodebase_community",
    "580": "\nSELECT Id, Name FROM users WHERE DisplayName LIKE 'Necromancer%';\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "581": "\nSELECT T1.OwnerDisplayName FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data' ORDER BY T2.RevisionGUID DESC LIMIT 1 \n\t----- bird -----\tcodebase_community",
    "582": "\nSELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa' GROUP BY T1.Title \n\t----- bird -----\tcodebase_community",
    "583": "\nSELECT SUM(CASE WHEN T1.PostId = (SELECT PostId FROM posts WHERE DisplayName = 'Yevgeny') THEN T2.Score ELSE 0 END) AS TotalScore,\n       T1.OwnerDisplayName AS UserDisplayName,\n       T1.LastAccessDate AS LastAccessDate,\n       T1.Reputation AS Reputation\nFROM users AS T1\nJOIN postHistory AS T2 ON T1.Id = T2.PostId AND T1.LastEditorUserId = (SELECT PostId FROM posts WHERE DisplayName = 'Yevgeny')\nORDER BY T1.LastAccessDate DESC;\n\n\t----- bird -----\tcodebase_community",
    "584": "\nSELECT T2.Text, T1.Score\nFROM posts AS T1\nJOIN postHistory AS T2 ON T1.Id = T2.PostId\nWHERE T1.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'\nORDER BY T2.RevisionGUID;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "585": "\nSELECT SUM(T2.BountyAmount) AS TotalBountyAmount\nFROM posts AS T1\nJOIN tags AS T2 ON T1.PostTypeId = T2.Id\nWHERE T1.Title LIKE '%data%';\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "586": "\nSELECT u.DisplayName, p.Title\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nWHERE u.Reputation > 0 AND p.PostTypeId = 1\nAND p.Body LIKE '%variance%'\nAND p.Score >= 50;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "587": "\nSELECT \n    p.Title,\n    SUM(c.Score) AS TotalScore\nFROM \n    badges b\nJOIN \n    posts p ON b.UserId = p.OwnerUserId\nWHERE \n    p.PostTypeId = 1 -- Assuming 'humor' is the post type for humor tags\nGROUP BY \n    p.Title, b.Name\nHAVING \n    COUNT(b.Id) > 0\nORDER BY \n    TotalScore DESC;\n\n\t----- bird -----\tcodebase_community",
    "588": "\nSELECT COUNT(DISTINCT T2.PostId) AS TotalComments\nFROM badges AS T1\nJOIN users AS T3 ON T1.UserId = T3.Id\nJOIN postHistory AS T4 ON T4.PostId = T1.Id\nJOIN posts AS T5 ON T5.Id = T4.PostId\nWHERE T1.Name = 'user13'\n\n\t----- bird -----\tcodebase_community",
    "589": "\nSELECT users.Id AS User_ID FROM users WHERE users.Reputation = ( SELECT MAX(reputation) FROM users ) SQL_END\n\t----- bird -----\tcodebase_community",
    "590": "\nSELECT u.Id AS UserID\nFROM users u\nWHERE u.Views = (SELECT MIN(Views) FROM posts);\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "591": "\nSELECT COUNT(DISTINCT T1.UserId) AS TotalUsersAwarded\nFROM badges AS T1\nJOIN users AS T2 ON T1.UserId = T2.Id\nWHERE T2.Reputation >= 0 AND T2.Reputation < 50;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "592": "\nSELECT COUNT(DISTINCT T1.UserId) AS UsersAwardedWithMoreThan5Badges\nFROM badges AS T1\nJOIN users AS T2 ON T1.UserId = T2.Id\nWHERE T1.Name > 5;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "593": "\nSELECT COUNT(DISTINCT T1.UserId) AS NumberOfUsers\nFROM badges AS T1\nJOIN users AS T2 ON T1.UserId = T2.Id\nWHERE T2.Location = 'New York'\n  AND (T1.Name = 'teacher' OR T1.Name = 'supporter');\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "594": "\nSELECT u.DisplayName, v.Reputation\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId AND p.PostTypeId = 1\nJOIN votes v ON p.Id = v.PostId\nWHERE p.PostId = 1;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "595": "\nSELECT u.DisplayName, COUNT(*) AS PostHistoryCount\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nWHERE p.PostTypeId = 1 AND p.ClosedDate IS NULL\nGROUP BY u.DisplayName\nHAVING COUNT(p.PostId) <= 1000;\n\n\t----- bird -----\tcodebase_community",
    "596": "\nSELECT u.Id, b.Name, u.Badges\nFROM users u\nJOIN badges b ON u.Id = b.UserId\nWHERE u.Id IN (\n  SELECT u2.Id\n  FROM posts p1\n  JOIN postHistory ph1 ON p1.PostId = ph1.PostId\n  JOIN comments c1 ON ph1.RevisionGUID = c1.RevisionGUID\n  WHERE c1.Text LIKE '%% %'\n)\nORDER BY COUNT(*) DESC;\n\n\t----- bird -----\tcodebase_community",
    "597": "\nSELECT COUNT(DISTINCT T1.UserId) AS TotalUsers FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location LIKE '%India%' \n\t----- bird -----\tcodebase_community",
    "598": "\nSELECT \n    (2011 - 2010) * 100 / 2010 AS percentage_difference\nFROM \n    badges;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "599": "\nSELECT DISTINCT t1.PostHistoryTypeId, COUNT(DISTINCT t2.UserId) AS UniqueUserCount\nFROM postHistory t1\nJOIN posts t2 ON t1.PostId = t2.Id\nWHERE t1.PostId = 3720\nGROUP BY t1.PostHistoryTypeId;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "600": "\nSELECT p.PostId, COUNT(*) AS PostCount\nFROM posts p\nJOIN postHistory h ON p.Id = h.PostId AND h.RevisionGUID = '61217'\nWHERE h.PostId = 61217\nGROUP BY p.PostId;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "601": "\nSELECT T1.Score, T3.LinkTypeId FROM badges AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 395;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "602": "\nSELECT PostId, UserId FROM posts WHERE Score > 60;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "603": "\nSELECT SUM(favorite_count) AS sum_favourite_count_gained\nFROM posts\nWHERE user_id = 686 AND year(created_at) = 2011;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "604": "\nSELECT AVG(upVotes) AS AverageUpVotes, AVG(age) AS AverageUserAge\nFROM users\nWHERE posts.PostTypeId = 10;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "605": "\nSELECT COUNT(DISTINCT T1.UserId) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Announcer' \n\t----- bird -----\tcodebase_community",
    "606": "\nSELECT DISTINCT b.Name\nFROM badges AS b\nJOIN users AS u ON b.UserId = u.Id\nWHERE strftime('%s', u.CreationDate) = '2010-07-19 14:39:08' AND strftime('%s', b.Date) > '2010-07-19 14:39:08';\n\n\t----- bird -----\tcodebase_community",
    "607": "\nSELECT COUNT(DISTINCT T2.Comment) AS PositiveComments\nFROM badges AS T1\nJOIN posts AS T3 ON T1.Id = T3.PostId\nJOIN postHistory AS T4 ON T3.Id = T4.PostId\nWHERE T1.Name = 'Positive' AND T4.RevisionGUID IS NOT NULL;\n\n\t----- bird -----\tcodebase_community",
    "608": "\nSELECT T1.Comment FROM badges AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CreationDate >= '2010-07-19 13:25:47' AND T2.CreationDate <= '2010-07-19 16:25:47' GROUP BY T1.Comment HAVING COUNT(T1.UserId) = 1 \n\t----- bird -----\tcodebase_community",
    "609": "\nSELECT COUNT(DISTINCT PostId) AS PostsWithScore10\nFROM posts\nWHERE Score = 10;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "610": "\nSELECT DISTINCT b.Name FROM badges AS b JOIN users AS u ON b.UserId = u.Id WHERE u.Reputation = ( SELECT MAX(Reputation) FROM users ) \n\t----- bird -----\tcodebase_community",
    "611": "\nSELECT T1.Reputation FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Date >= '2010-07-19 18:39:08' AND T1.Date < '2010-07-19 18:40:08';\n\n\t----- bird -----\tcodebase_community",
    "612": "\nSELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Pierre' GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1 \n\t----- bird -----\tcodebase_community",
    "613": "\nSELECT DISTINCT t1.Date\nFROM badges AS t1\nJOIN users AS t2 ON t1.UserId = t2.Id\nWHERE t2.Location = 'Rochester, NY';\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "614": "\nSELECT \n    COUNT(DISTINCT T2.UserId) AS TotalUsers,\n    (COUNT(T1.UserId) * 100 / COUNT(DISTINCT T1.UserId)) AS Percentage\nFROM \n    badges AS T1\nJOIN \n    users AS T2 ON T1.UserId = T2.Id\nWHERE \n    T1.Name = 'Teacher'\nGROUP BY \n    T1.Name;\n\n\t----- bird -----\tcodebase_community",
    "615": "\nSELECT \n    COUNT(DISTINCT T2.UserId) AS TotalUsers,\n    SUM(CASE WHEN T1.Badges = 'Organizer' THEN 1 ELSE 0 END) AS UsersWithBadges,\n    (COUNT(T1.UserId) * 100 / COUNT(DISTINCT T1.UserId)) AS PercentageOfTeenagers\nFROM \n    badges AS T1\nJOIN \n    users AS T2 ON T1.UserId = T2.Id\nWHERE \n    T1.Badges = 'Organizer'\nGROUP BY \n    T1.Badges, T1.Date;\n\n\t----- bird -----\tcodebase_community",
    "616": "\nSELECT T2.Score FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.CreationDate = '2010-07-19 13:19:56';\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "617": "\nSELECT T2.Text FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.CreationDate = '2010-07-19 13:37:33' AND T2.RevisionGUID = '7845e6b9-1c9d-4a1f-ba1e-1e9e9e9e9e9e';\n\n\t----- bird -----\tcodebase_community",
    "618": "\nSELECT u.Reputation, u.DisplayName, u.LastAccessDate\nFROM users u\nJOIN badges b ON u.Id = b.UserId\nWHERE u.Location = 'Vienna, Austria' AND b.Name = 'Badge'\nORDER BY u.LastAccessDate DESC;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "619": "\nSELECT COUNT(DISTINCT T1.UserId) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Supporter' \n\t----- bird -----\tcodebase_community",
    "620": "\nSELECT COUNT(DISTINCT T1.UserId) AS Views FROM badges AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Date >= '2010-07-19 13:39:08' AND T1.Date < '2010-07-19 14:39:08' GROUP BY T1.Date \n\t----- bird -----\tcodebase_community",
    "621": "\nSELECT T1.Name\nFROM badges AS T1\nJOIN users AS T2 ON T1.UserId = T2.Id\nWHERE T2.Reputation < (SELECT MAX(Reputation) FROM users);\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "622": "\nSELECT Name FROM badges WHERE UserDisplayName = 'Sharpie' ORDER BY Id LIMIT 1 \n\t----- bird -----\tcodebase_community",
    "623": "\nSELECT COUNT(DISTINCT T1.UserId) AS TotalElders FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Supporter' GROUP BY T1.UserId \n\t----- bird -----\tcodebase_community",
    "624": "\nSELECT Name FROM users WHERE Id = 30\n\n\t----- bird -----\tcodebase_community",
    "625": "\nSELECT COUNT(DISTINCT T1.`UserId`) AS `Count` FROM users AS T1 INNER JOIN badges AS T2 ON T1.`Id` = T2.`UserId` WHERE T1.`Location` = 'New York' \n\t----- bird -----\tcodebase_community",
    "626": "\nSELECT COUNT(DISTINCT T1.VoteTypeId) AS TotalVotes\nFROM votes AS T1\nWHERE T1.CreationDate BETWEEN '2010-01-01' AND '2019-12-31'\nGROUP BY T1.VoteTypeId\n\n\t----- bird -----\tcodebase_community",
    "627": "\nSELECT COUNT(DISTINCT T1.UserId) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Reputation > 0 AND T2.Reputation < 50000 \n\t----- bird -----\tcodebase_community",
    "628": "\nSELECT users.DisplayName, COUNT(posts.PostId) as ViewCount\nFROM posts\nJOIN tags ON posts.TagExcerptId = tags.Id\nWHERE tags.Count > 0\nGROUP BY users.DisplayName\nORDER BY ViewCount DESC\n\n\t----- bird -----\tcodebase_community",
    "629": "SQL_END\n\nSELECT CAST(SUM(CASE WHEN T1.Year = 2010 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.Year = 2011 THEN 1 ELSE 0 END) FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.Year = 2010 AND T2.Year = 2011\n\n\t----- bird -----\tcodebase_community",
    "630": "\nSELECT T2.tagName FROM users AS T1 INNER JOIN tags AS T2 ON T1.id = T2.ExcerptPostId WHERE T1.DisplayName = 'John Stauffer' GROUP BY T2.tagName ORDER BY COUNT(*) DESC LIMIT 1 \n\t----- bird -----\tcodebase_community",
    "631": "\nSELECT COUNT(DISTINCT PostId) FROM posts WHERE UserDisplayName = 'Daniel Vassallo' GROUP BY UserDisplayName ORDER BY COUNT(DISTINCT PostId) DESC \n\t----- bird -----\tcodebase_community",
    "632": "\nSELECT COUNT(DISTINCT T1.VoteTypeId) FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Harlan' \n\t----- bird -----\tcodebase_community",
    "633": "\nSELECT T1.PostId\nFROM posts AS T1\nJOIN postHistory AS T2 ON T1.Id = T2.PostId\nWHERE T1.Title LIKE '%slashnick%'\nGROUP BY T1.PostId\nORDER BY COUNT(T1.Body) DESC\nLIMIT 1;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "634": "\nSELECT t1.PostId, t1.Score\nFROM posts AS t1\nJOIN (\n  SELECT PostId, COUNT(*) as Popularity\n  FROM postHistory\n  WHERE UserId = 'Harvey Motulsky' OR UserId = 'Noah Snyder'\n  GROUP BY PostId\n) AS t2 ON t1.Id = t2.PostId\nORDER BY t2.Popularity DESC;\n\n\t----- bird -----\tcodebase_community",
    "635": "\nSELECT COUNT(DISTINCT PostId) AS NumberOfPostsByMattParkerWithMoreThan4Votes\nFROM posts\nWHERE UserDisplayName = 'Matt Parker'\n  AND Views > 4;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "636": "\nSELECT COUNT(DISTINCT T2.Comment) AS NegativeComments\nFROM posts AS T1\nJOIN postHistory AS T2 ON T1.Id = T2.PostId\nWHERE T1.OwnerDisplayName = 'Neil McGuigan';\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "637": "\nSELECT DISTINCT T2.TagName\nFROM tags AS T1\nJOIN posts AS T2 ON T1.ExcerptPostId = T2.Id\nWHERE T2.PostTypeId = 3 AND T2.Title LIKE '%Mark Meckes%'\nAND T2.PostTypeId NOT IN (SELECT PostId FROM comments)\nORDER BY T1.Count DESC;\n\n\t----- bird -----\tcodebase_community",
    "638": "\nSELECT DISTINCT u.DisplayName\nFROM users u\nJOIN badges b ON u.Id = b.UserId\nWHERE b.Name = 'Organizer';\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "639": "\nSELECT \n    COUNT(*) AS total_posts,\n    SUM(CASE WHEN T1.PostTypeId = 2 THEN 1 ELSE 0 END) AS posts_with_r_language,\n    (COUNT(*) - SUM(CASE WHEN T1.PostTypeId = 2 THEN 1 ELSE 0 END)) / COUNT(*) * 100 AS percentage\nFROM \n    badges AS T1\nJOIN \n    users AS T2 ON T1.UserId = T2.Id\nJOIN \n    posts AS T3 ON T1.PostId = T3.PostId\nWHERE \n    T3.OwnerDisplayName = 'Community'\nGROUP BY \n    T1.PostTypeId, T1.Name;\n\n\t----- bird -----\tcodebase_community",
    "640": "\nSELECT \n    (post_history_views - post_amos_views) AS difference_in_view_count\nFROM \n    (\n        SELECT \n            post_id,\n            view_count\n        FROM \n            postHistory\n        WHERE \n            owner_user_id = 'mornington'\n    ) AS mornington_posts\nUNION ALL\nSELECT \n    (post_history_views - post_amos_views) AS difference_in_view_count\nFROM \n    (\n        SELECT \n            post_id,\n            view_count\n        FROM \n            postHistory\n        WHERE \n            owner_user_id = 'amos'\n    ) AS amos_posts\n\n\t----- bird -----\tcodebase_community",
    "641": "\nSELECT COUNT(DISTINCT T2.UserId) AS UsersReceivedBadges\nFROM badges AS T1\nJOIN users AS T3 ON T1.UserId = T3.Id\nWHERE T1.Date BETWEEN '2014-01-01' AND '2014-12-31'\nGROUP BY T1.UserId;\n\n\t----- bird -----\tcodebase_community",
    "642": "SQL_END\n\t----- bird -----\tcodebase_community",
    "643": "\nSELECT users.DisplayName, users.Age FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.ViewCount = ( SELECT MAX(ViewCount) FROM posts ) \n\t----- bird -----\tcodebase_community",
    "644": "\nSELECT t1.PostId, t1.RevisionGUID, t1.LastEditDate, t1.LastEditorUserId\nFROM posts AS t1\nJOIN postHistory AS t2 ON t1.Id = t2.PostId AND t1.PostTypeId = 3\nWHERE t1.Title = 'Detecting a given face in a database of facial images'\nORDER BY t1.RevisionGUID DESC;\n\n\t----- bird -----\tcodebase_community",
    "645": "\nSELECT COUNT(DISTINCT T2.Comment) AS NegativeCommentsCount\nFROM users AS T1\nJOIN posts AS T2 ON T1.Id = T2.OwnerUserId\nWHERE T1.DisplayName = 'user_id_13'\nGROUP BY T1.DisplayName;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "646": "\nSELECT T1.PostTitle, U.DisplayName\nFROM badges AS T1\nJOIN users AS T2 ON T1.UserId = T2.Id\nJOIN postHistory AS T3 ON T1.Id = T3.PostId\nJOIN posts AS T4 ON T3.PostId = T4.Id\nJOIN comments AS T5 ON T4.Id = T5.PostId\nWHERE T5.Score > 0 AND T2.Reputation >= 0;\n\n\t----- bird -----\tcodebase_community",
    "647": "\nSELECT T1.badge_name\nFROM badges AS T1\nJOIN users AS T2 ON T1.UserId = T2.Id\nWHERE T2.Location = 'North Pole' AND YEAR(T2.CreationDate) = 2011;\n\n\t----- bird -----\tcodebase_community",
    "648": " \n\t----- bird -----\tcodebase_community",
    "649": "\nSELECT \n    h.Id,\n    h.PostId,\n    h.RevisionGUID,\n    h.CreationDate,\n    u.DisplayName AS LastEditorDisplayName,\n    COUNT(*) AS PostHistoryCount\nFROM \n    postHistory h\nJOIN \n    users u ON h.UserId = u.Id\nWHERE \n    h.PostTitle = 'What is the best introductory Bayesian statistics textbook?'\nGROUP BY \n    h.PostId, h.RevisionGUID, h.CreationDate, u.DisplayName;\n\n\t----- bird -----\tcodebase_community",
    "650": "\nSELECT t1.`CreationDate`, t1.`Location` \nFROM badges AS t1 \nJOIN users AS t2 ON t1.UserId = t2.Id \nWHERE t1.Name = 'Outliers' AND t1.Date >= (SELECT MAX(`LastAccessDate`) FROM posts WHERE `OwnerUserId` = t2.Id);\n\n\t----- bird -----\tcodebase_community",
    "651": "\n-- Assuming there's a table named \"posts\" that contains information about posts, including their title.\n-- The query will return the related post title of \"How to tell if something happened in a data set which monitors a value over time\".\n-- \n\t----- bird -----\tcodebase_community",
    "652": "\nSELECT T1.PostId, T1.Name\nFROM badges AS T1\nJOIN users AS T2 ON T1.UserId = T2.Id\nWHERE T2.CreationDate BETWEEN '2013-01-01' AND '2013-12-31'\nORDER BY T1.Date;\n\n\t----- bird -----\tcodebase_community",
    "653": "\nSELECT u.DisplayName FROM users u INNER JOIN posts p ON u.Id = p.OwnerUserId ORDER BY COUNT(*) DESC LIMIT 1 \n\t----- bird -----\tcodebase_community",
    "654": "\nSELECT u.DisplayName, u.Location FROM users u INNER JOIN posts p ON u.Id = p.OwnerUserId WHERE p.PostTypeId = 1 AND p.AcceptedAnswerId IS NULL AND p.Title LIKE '%hypothesis-testing%' GROUP BY u.DisplayName, u.Location HAVING COUNT(*) > 1 \n\t----- bird -----\tcodebase_community",
    "655": "\nSELECT T1.PostTitle, T2.LinkTypeId FROM badges AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Name = 'What are principal component scores?' \n\t----- bird -----\tcodebase_community",
    "656": "\nSELECT T1.OwnerDisplayName FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T2.Score = ( SELECT MAX(T3.Score) FROM posts AS T3 INNER JOIN postHistory AS T4 ON T3.Id = T4.PostId WHERE T4.PostId = T1.Id AND T4.RevisionGUID = T1.CreationDate ORDER BY T4.RevisionGUID DESC LIMIT 1 )\n\n\t----- bird -----\tcodebase_community",
    "657": "\nSELECT u.DisplayName, v.WebsiteUrl FROM users u INNER JOIN votes v ON u.Id = v.UserId WHERE v.VoteTypeId = 8 ORDER BY v.BountyAmount DESC LIMIT 1 \n\t----- bird -----\tcodebase_community",
    "658": "\nSELECT T1.Title FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId ORDER BY T2.RevisionGUID DESC LIMIT 5 \n\t----- bird -----\tcodebase_community",
    "659": "\nSELECT COUNT(DISTINCT t2.PostId) AS TagCount\nFROM tags AS t1\nJOIN posts AS p ON t1.Id = p.OwnerUserId AND p.PostTypeId = 1\nWHERE p.Score BETWEEN 5000 AND 7000;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "660": "\nSELECT t1.OwnerUserId FROM posts AS t1 INNER JOIN users AS t2 ON t1.OwnerUserId = t2.Id WHERE t1.Score = (SELECT MAX(Score) FROM posts WHERE OwnerUserId = t1.OwnerUserId)\nORDER BY t1.Score DESC LIMIT 1;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "661": "\nSELECT MAX(Users.Reputation) FROM users\n\n\t----- bird -----\tcodebase_community",
    "662": "\nSELECT COUNT(DISTINCT PostId)\nFROM posts\nWHERE Date >= '2011-01-01'\n  AND Date < '2011-12-31'\n  AND BountyAmount = 50;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "663": "\nSELECT min(UserId) FROM users WHERE Age = 1\n\t----- bird -----\tcodebase_community",
    "664": "\nSELECT T2.Score\nFROM posts AS T1\nJOIN tags AS T2 ON T1.PostId = T2.ExcerptPostId\nWHERE T1.PostTypeId = 3 -- Assuming 'popular' is the post type for popular tags\nORDER BY T1.Score DESC\nLIMIT 1;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "665": "\nSELECT AVG(CreationDate) AS AverageMonthlyLinks\nFROM posts\nWHERE Year(OwnerUserId) = 2010 AND AnswerCount <= 2;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "666": "\nSELECT T1.PostId, T1.BestVoteBounty\nFROM users AS T1\nJOIN posts AS T2 ON T1.Id = T2.OwnerUserId\nWHERE T1.DisplayName = 'user_1465'\nGROUP BY T1.PostId\nORDER BY SUM(T3.BestVoteBounty) DESC\nLIMIT 1;\n\n\t----- bird -----\tcodebase_community",
    "667": "\nSELECT T1.Title\nFROM posts AS T1\nJOIN postLinks AS T2 ON T1.Id = T2.PostId\nWHERE T2.RevisionGUID = (SELECT MAX(RevisionGUID) FROM postHistory WHERE PostId = T1.Id);\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "668": "\nSELECT users.DisplayName FROM users INNER JOIN badges ON users.Id = badges.UserId ORDER BY badges.Score DESC LIMIT 1 \n\t----- bird -----\tcodebase_community",
    "669": "\nSELECT T1.`CreationDate` FROM badges AS T1 INNER JOIN posts AS T2 ON T1.`PostId` = T2.`Id` WHERE T2.`Title` = 'chl' AND T1.`Name` = 'cast' END \n\t----- bird -----\tcodebase_community",
    "670": "\nSELECT MIN(CreationDate) AS Date\nFROM posts;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "671": "\nSELECT T1.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Autobiographer' ORDER BY T1.Date DESC LIMIT 1 \n\t----- bird -----\tcodebase_community",
    "672": "\nSELECT COUNT(DISTINCT u.Id)\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nWHERE u.Location = 'United Kingdom'\nGROUP BY u.Id\nHAVING SUM(u.FavoriteCount) >= 4;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "673": "\nSELECT AVG(T1.Votes) AS AverageVotes\nFROM users AS T1\nJOIN votes AS T2 ON T1.Id = T2.PostId\nWHERE T1.LastAccessDate IS NULL;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "674": "\nSELECT users.DisplayName, users.Reputation FROM users INNER JOIN votes ON users.Id = votes.UserId ORDER BY users.Reputation DESC LIMIT 1 \n\t----- bird -----\tcodebase_community",
    "675": "\nSELECT COUNT(DISTINCT T1.UserId) AS UsersCount\nFROM badges AS T1\nJOIN users AS T2 ON T1.UserId = T2.Id\nWHERE T1.Reputation > 2000 AND T1.ViewCount > 1000;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "676": "\nSELECT DISTINCT u.DisplayName FROM users AS u INNER JOIN posts AS p ON u.Id = p.OwnerUserId WHERE u.Reputation > 0 AND u.Age >= 18 GROUP BY u.DisplayName HAVING COUNT(*) > 1 \n\t----- bird -----\tcodebase_community",
    "677": "\nSELECT COUNT(DISTINCT PostId) FROM posts WHERE UserDisplayName = 'Jay Stevens' AND YearCreated >= 2010 \n\t----- bird -----\tcodebase_community",
    "678": "\nSELECT T1.PostId, T1.Title\nFROM posts AS T1\nJOIN users AS T2 ON T1.OwnerUserId = T2.Id\nWHERE T2.DisplayName = 'Harvey Motulsky'\nORDER BY T1.ViewCount DESC\nLIMIT 1;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "679": "\nSELECT T1.PostId, T1.Title\nFROM badges AS T1\nJOIN posts AS T2 ON T1.Id = T2.PostTypeId\nWHERE T2.Score = (SELECT MAX(T3.Score) FROM badges AS T3 WHERE T3.Id = T1.Id)\nORDER BY T2.Score DESC;\n\n\t----- bird -----\tcodebase_community",
    "680": "\nSELECT AVG(T1.Score) AS AverageScore FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Stephen Turner' GROUP BY T1.Name ORDER BY AverageScore DESC \n\t----- bird -----\tcodebase_community",
    "681": "\nSELECT u.DisplayName\nFROM users u\nWHERE u.Id IN (\n    SELECT p.OwnerUserId\n    FROM posts p\n    WHERE p.ViewCount > 20000 AND p.CreationDate >= '2011-01-01'\n)\n\nSQL_END\n\t----- bird -----\tcodebase_community",
    "682": "\nSELECT t1.PostId, t1.OwnerDisplayName\nFROM badges AS t1\nJOIN users AS t2 ON t1.UserId = t2.Id\nWHERE t2.Reputation >= 0 AND t2.Reputation < 5000\nAND t1.Date BETWEEN '2010-01-01' AND '2010-12-31'\nORDER BY t1.Date DESC\nLIMIT 1;\n\n\t----- bird -----\tcodebase_community",
    "683": "\nSELECT \n    COUNT(DISTINCT t1.PostId) AS total_posts,\n    SUM(CASE WHEN t2.Reputation > 1000 THEN 1 ELSE 0 END) AS posts_with_reputation_over_1000_in_2011\nFROM \n    badges b\nJOIN \n    users u ON b.OwnerUserId = u.Id\nJOIN \n    postHistory p ON b.PostId = p.PostId\nWHERE \n    YEAR(p.CreaionDate) = 2011 AND MONTH(p.CreaionDate) = 1 AND b.Reputation > 1000;\n\n\t----- bird -----\tcodebase_community",
    "684": "\nSELECT CAST(SUM(CASE WHEN T1.UserId = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Reputation > 0 GROUP BY T1.Id\n\n\t----- bird -----\tcodebase_community",
    "685": "\nSELECT SUM(T1.Score) AS TotalViews, T2.DisplayName\nFROM users AS T1\nJOIN posts AS T2 ON T1.Id = T2.OwnerUserId\nWHERE T2.Title = 'Computer Game Datasets'\nORDER BY T1.LastAccessDate DESC;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "686": "\nSELECT COUNT(DISTINCT PostId) AS TotalPosts\nFROM posts\nWHERE views > (SELECT AVG(views)\n              FROM posts\n             WHERE views > 0);\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "687": "\nSELECT COUNT(DISTINCT T2.Id) AS CommentCount\nFROM badges AS T1\nJOIN posts AS T3 ON T1.PostId = T3.Id\nJOIN postHistory AS T4 ON T4.PostId = T3.Id\nWHERE T4.Score = (SELECT MAX(T5.Score)\n                  FROM badges AS T5\n                  WHERE T5.PostId = T3.Id);\n\n\t----- bird -----\tcodebase_community",
    "688": "\nSELECT COUNT(DISTINCT PostId)\nFROM posts\nWHERE ViewCount > 35000 AND CommentCount = 0;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "689": "\nSELECT users.DisplayName, users.Location FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.PostId = 183;\n\n\t----- bird -----\tcodebase_community",
    "690": "\nSELECT T1.Id, T1.Name, T1.Date\nFROM badges AS T1\nJOIN users AS T2 ON T1.UserId = T2.Id\nWHERE T2.DisplayName = 'Emmett';\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "691": "\nSELECT COUNT(DISTINCT u.Id) AS Number_of_adult_users_with_5000_upvotes\nFROM users u\nWHERE u.Reputation > 100 AND u.UpVotes > 5000;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "692": "\nSELECT MAX(CreationDate) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Zolomon');\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "693": "\nSELECT COUNT(DISTINCT PostId) AS Posts, COUNT(DISTINCT Comment.Id) AS Comments\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nWHERE p.LastEditorDisplayName = (SELECT t2.DisplayName FROM tags t1 INNER JOIN users t2 ON t1.ExcerptPostId = t2.Id WHERE t1.TagName = 'latest' ORDER BY t2.Views DESC LIMIT 1)\nGROUP BY u.Id;\n\n\t----- bird -----\tcodebase_community",
    "694": "\nSELECT T2.Text FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Analysing wind data with R' AND T2.UserId = (SELECT UserId FROM users WHERE DisplayName = 'user_name');\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "695": "\nSELECT COUNT(DISTINCT T1.UserId) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Citizen Patrol' \n\t----- bird -----\tcodebase_community",
    "696": "\nSELECT COUNT(DISTINCT T1.PostId) FROM badges AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.PostTypeId WHERE T2.Tag = 'careers' \n\t----- bird -----\tcodebase_community",
    "697": "\nSELECT T1.Reputation, T1.ViewCount FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Jarrod Dixon' \n\t----- bird -----\tcodebase_community",
    "698": "\nSELECT COUNT(DISTINCT T2.PostId) AS Comments, COUNT(T1.PostId) AS Answers\nFROM badges AS T1\nJOIN posts AS T2 ON T1.Id = T2.OwnerUserId AND T2.Title = 'Clustering 1D data'\nWHERE T2.AcceptedAnswerId IS NULL;\n\n\t----- bird -----\tcodebase_community",
    "699": "\nSELECT CreationDate FROM users WHERE DisplayName = 'IrishStat' LIMIT 1\n\n\t----- bird -----\tcodebase_community",
    "700": "\nSELECT COUNT(DISTINCT PostId)\nFROM posts\nWHERE BountyAmount > 30;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "701": "\nSELECT \n    COUNT(*) AS total_posts,\n    SUM(CASE WHEN T1.Score > 50 THEN 1 ELSE 0 END) AS posts_above_50\nFROM \n    badges AS T1\nJOIN \n    users AS T2 ON T1.UserId = T2.Id\nWHERE \n    T2.Reputation >= (SELECT MAX(Reputation) FROM users)\nGROUP BY \n    T1.Name;\n\n\t----- bird -----\tcodebase_community",
    "702": "\nSELECT COUNT(DISTINCT PostId) AS PostsWithScoreLessThan20\nFROM posts\nWHERE Score < 20;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "703": "\nSELECT COUNT(DISTINCT T2.PostId)\nFROM tags AS T1\nJOIN posts AS T2 ON T1.Id = T2.OwnerUserId\nWHERE T1.TagID < 15 AND T2.PostTypeId = 3;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "704": "\nSELECT T1.ExcerptPostId, T1.WikiPostId FROM tags AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.TagName = 'sample' \n\t----- bird -----\tcodebase_community",
    "705": "\nSELECT users.Reputation, users.UpVotes FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.Title LIKE 'fine, you win :)' \n\t----- bird -----\tcodebase_community",
    "706": "\nSELECT T2.Text FROM badges AS T1 INNER JOIN postHistory AS T3 ON T1.Id = T3.PostId WHERE T1.Name = 'linear regression' AND T3.RevisionGUID LIKE '%post%';\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "707": "\nSELECT T2.Text, T3.Score\nFROM posts AS T1\nJOIN postHistory AS T2 ON T1.Id = T2.PostId\nWHERE T1.ViewCount BETWEEN 100 AND 150\nORDER BY T2.RevisionGUID DESC\nLIMIT 1;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "708": "\nSELECT t1.creationDate, t2.age\nFROM users AS t1\nJOIN posts AS t2 ON t1.id = t2.ownerUserId\nWHERE t1.id = (SELECT userId FROM comments WHERE text LIKE '%website%');\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "709": "\nSELECT COUNT(DISTINCT T2.PostId)\nFROM badges AS T1\nJOIN posts AS T3 ON T1.Id = T3.OwnerUserId\nJOIN users AS T4 ON T3.OwnerUserId = T4.Id\nWHERE T1.Name = '0' AND T3.ViewCount < 5;\n\n\t----- bird -----\tcodebase_community",
    "710": "\nSELECT COUNT(DISTINCT T2.Comment) AS CommentCount\nFROM posts AS T1\nJOIN postHistory AS T2 ON T1.Id = T2.PostId\nWHERE T1.PostTypeId = 3 AND T1.AcceptedAnswerId IS NULL;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "711": "\nSELECT COUNT(DISTINCT T2.UserId) AS TotalUsers\nFROM users AS T1\nJOIN posts AS T2 ON T1.Id = T2.OwnerUserId\nWHERE T2.PostTypeId = 3 -- Assuming 'products' is the post type for products\nAND T2.Score = 0;\n\n\t----- bird -----\tcodebase_community",
    "712": "\nSELECT p.PostId, c.Score\nFROM posts p\nJOIN postHistory h ON p.Id = h.PostId\nJOIN comments c ON h.PostId = c.PostId;\nSQL_END\n\n\t----- bird -----\tcodebase_community",
    "713": "\nSELECT COUNT(DISTINCT T2.UserId) AS UpVotes\nFROM users AS T1\nJOIN posts AS T2 ON T1.Id = T2.OwnerUserId\nJOIN badges AS T3 ON T2.PostId = T3.Id\nJOIN comments AS T4 ON T2.Id = T4.PostId\nWHERE T3.Name = 'R is also lazy evaluated.'\n\n\t----- bird -----\tcodebase_community",
    "714": "\nSELECT c.Id, c.PostId, c.Score, c.Text, c.CreationDate, u.DisplayName\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nJOIN posts p ON u.Id = p.OwnerUserId\nJOIN comments c ON p.Id = c.PostId\nWHERE b.Name = 'Harvey Motulsky';\n\n\t----- bird -----\tcodebase_community",
    "715": "\nSELECT u.DisplayName\nFROM users u\nWHERE NOT EXISTS (\n  SELECT 1 FROM comments c\n  WHERE c.UserId = u.Id AND c.Score >= 5\n);\n\n\t----- bird -----\tcodebase_community",
    "716": "\nSELECT \n    COUNT(DISTINCT c.UserId) AS total_users,\n    SUM(c.Score) / COUNT(DISTINCT c.PostId) * 100 AS percentage_up_votes\nFROM \n    badges b\nJOIN \n    comments c ON b.Id = c.UserId\nWHERE \n    c.Score BETWEEN 5 AND 10\nGROUP BY \n    b.Id;\n\n\t----- bird -----\tcodebase_community",
    "717": "\nSELECT superpower.power_name FROM hero_power INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.full_name = '3-D Man' GROUP BY superpower.power_name ORDER BY COUNT(*) DESC \n\t----- bird -----\tsuperhero",
    "718": "\nSELECT COUNT(*) AS superheroes_with_super_strength\nFROM superhero\nWHERE hero_power.power_name = 'Super Strength';\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "719": "\nSELECT COUNT(*) AS count\nFROM hero_power\nWHERE power_name = 'Super Strength'\n  AND height_cm > 200;\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "720": "\nSELECT T2.full_name\nFROM superhero AS T1\nJOIN hero_power AS T3 ON T1.id = T3.hero_id\nJOIN superpower AS T4 ON T3.power_id = T4.id\nWHERE T4.power_name IN ('Superman', 'Batman')\nGROUP BY T1.id, T1.superhero_name\nHAVING COUNT(T2.power_id) > 15;\n\n\t----- bird -----\tsuperhero",
    "721": "\nSELECT COUNT(id) AS superheroes_with_blue_eyes\nFROM superhero\nWHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'blue');\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "722": "\n\t----- bird -----\tsuperhero",
    "723": "\nSELECT COUNT(*) AS count\nFROM superhero\nWHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue')\n  AND superpower.power_name = 'Agility';\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "724": "\nSELECT T1.superhero_name\nFROM superhero AS T1\nJOIN hero_attribute AS T2 ON T1.id = T2.hero_id\nJOIN attribute AS T3 ON T2.attribute_id = T3.id\nWHERE T3.attribute_value = 0 AND T3.colour = 'blond';\n\n\t----- bird -----\tsuperhero",
    "725": "\n\t----- bird -----\tsuperhero",
    "726": "\nSELECT T1.hero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T1.publisher_name = 'Marvel Comics' ORDER BY T1.height_cm DESC LIMIT 1;\n\t----- bird -----\tsuperhero",
    "727": "\n\t----- bird -----\tsuperhero",
    "728": "\nSELECT COUNT(DISTINCT T1.hero_id) AS count\nFROM superhero AS T1\nJOIN hero_attribute AS T2 ON T1.id = T2.hero_id\nJOIN attribute AS T3 ON T2.attribute_id = T3.id\nWHERE T3.attribute_name = 'blue eyes';\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "729": "\nSELECT AVG(height_cm) AS average_height\nFROM superhero\nWHERE publisher_id = (SELECT id FROM publisher WHERE name = 'Marvel Comics');\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "730": "\nSELECT SUM(CASE WHEN T1.alignment = 'Marvel Comics' THEN 1 ELSE 0 END) / COUNT(T1.id) * 100 AS percentage\nFROM superhero AS T1\nJOIN hero_power AS T2 ON T1.id = T2.hero_id\nWHERE T1.gender_id = (SELECT id FROM gender WHERE name = 'Male')\nGROUP BY T1.id;\n\n\t----- bird -----\tsuperhero",
    "731": "\n\t----- bird -----\tsuperhero",
    "732": "\n\t----- bird -----\tsuperhero",
    "733": "\nSELECT COUNT(T1.hero_id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T1.eye_colour_id = 3 AND T1.gender_id = 1 GROUP BY T1.id ORDER BY T1.id LIMIT 10 \n\t----- bird -----\tsuperhero",
    "734": "\n\t----- bird -----\tsuperhero",
    "735": "\nSELECT COUNT(*) AS number_of_superheroes_with_blonde_hair\nFROM superhero\nWHERE hair_colour_id = (SELECT id FROM colour WHERE colour = 'blonde');\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "736": "\n\t----- bird -----\tsuperhero",
    "737": "\n\t----- bird -----\tsuperhero",
    "738": "\nSELECT COUNT(id) \nFROM superhero \nWHERE superpower.power_name = 'durability' AND superpower.power_id IN (SELECT id FROM hero_power WHERE power_id IN (SELECT id FROM superpower WHERE power_name = 'durability'));\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "739": "\nSELECT superhero_name FROM hero_power WHERE power_name = 'death touch' GROUP BY superhero_name ORDER BY length(power_name) DESC \n\t----- bird -----\tsuperhero",
    "740": "\nSELECT COUNT(*) AS count\nFROM superhero\nWHERE gender_id = (SELECT id FROM gender WHERE gender = 'female')\n  AND strength_value = 100;\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "741": "\nSELECT T1.superhero_name\nFROM superhero AS T1\nJOIN hero_power AS T2 ON T1.id = T2.hero_id\nGROUP BY T1.id, T1.id\nORDER BY COUNT(T2.power_id) DESC\nLIMIT 1;\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "742": "\nSELECT COUNT(*) FROM superhero WHERE gender_id = 1 AND eye_colour_id = 2 AND hair_colour_id = 3 AND skin_colour_id = 4 GROUP BY superhero_name;\n\n\t----- bird -----\tsuperhero",
    "743": "\nSELECT COUNT(T1.id) AS total_superheroes, SUM(CASE WHEN T2.alignment = 'Self-interest' THEN 1 ELSE 0 END) AS self_interest_superheroes,\n       SUM(CASE WHEN T3.alignment = 'Moral Code' THEN 1 ELSE 0 END) AS moral_code_superheroes,\n       COUNT(T4.id) AS total_marcos, COUNT(T5.id) AS marco_count\nFROM superhero AS T1\nJOIN alignment AS T2 ON T1.id = T2.superhero_id\nJOIN race AS T3 ON T1.race = T3.race\nJOIN gender AS T4 ON T1.gender = T4.id\nJOIN hero_attribute AS T5 ON T1.id = T5.hero_id\nJOIN superpower AS T6 ON T1.id = T6.power_id\nJOIN hero_power AS T7 ON T1.id = T7.power_id\nJOIN publisher AS T8 ON T1.publisher_id = T8.id\nJOIN race AS T9 ON T1.race = T9.race\nWHERE T2.alignment IN ('Self-interest', 'Moral Code')\nGROUP BY T1.id, T4.id;\n\n\t----- bird -----\tsuperhero",
    "744": "\nSELECT T1.publisher_name, COUNT(T2.id) AS number_of_superheroes\nFROM superhero AS T1\nJOIN publisher AS T2 ON T1.publisher_id = T2.id\nWHERE T1.gender_id IS NULL AND T1.eye_colour_id IS NULL AND T1.hair_colour_id IS NULL AND T1.skin_colour_id IS NULL\nGROUP BY T1.publisher_name\nHAVING COUNT(T2.id) > (SELECT COUNT(T3.id) FROM superhero AS T3 WHERE T3.publisher_id = T2.id)\n\n\t----- bird -----\tsuperhero",
    "745": "\n\t----- bird -----\tsuperhero",
    "746": "\nSELECT AVG(attribute_value) AS average_attribute_value\nFROM hero_power;\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "747": "\nSELECT COUNT(DISTINCT id) AS total_superheroes_without_full_name\nFROM superhero\nWHERE full_name IS NULL;\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "748": "\n\t----- bird -----\tsuperhero",
    "749": "\n\t----- bird -----\tsuperhero",
    "750": "\nSELECT AVG(w.weight_kg) AS average_weight\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN hero_attribute ha ON hp.power_id = ha.attribute_id\nWHERE s.gender_id = 1;\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "751": "\nSELECT DISTINCT T1.power_name\nFROM hero_power AS T1\nJOIN superhero AS T2 ON T1.hero_id = T2.id\nWHERE T2.gender = 'male';\n\n\t----- bird -----\tsuperhero",
    "752": "\nSELECT DISTINCT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T2.power_name IN ('alien') GROUP BY T1.superhero_name;\n\t----- bird -----\tsuperhero",
    "753": "\nSELECT DISTINCT s.superhero_name\nFROM superhero s\nWHERE s.height_cm BETWEEN 170 AND 190\n  AND NOT EXISTS (\n    SELECT 1 FROM hero_attribute h\n    WHERE s.id = h.hero_id\n      AND h.attribute_value = 2\n  );\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "754": "\n\t----- bird -----\tsuperhero",
    "755": "\nSELECT superhero_name FROM superhero WHERE gender_id = ( SELECT gender_id FROM gender WHERE name = 'Demi-God' ) AND eye_colour_id IN ( SELECT eye_colour_id FROM colour WHERE colour = 'Black' ) AND hair_colour_id IN ( SELECT hair_colour_id FROM colour WHERE colour = 'Blonde' ) AND skin_colour_id IN ( SELECT skin_colour_id FROM colour WHERE colour = 'Brown' ) \n\t----- bird -----\tsuperhero",
    "756": "\nSELECT COUNT(*) FROM superhero WHERE superpower.power_name = 'bad';\n\t----- bird -----\tsuperhero",
    "757": "\nSELECT T2.race FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id WHERE T1.weight_kg = 169 GROUP BY T2.race ORDER BY COUNT(*) DESC LIMIT 1 \n\t----- bird -----\tsuperhero",
    "758": "\nSELECT T1.hair_colour_id, T1.hair_colour\nFROM superhero AS T1\nJOIN hero_power AS T2 ON T1.id = T2.hero_id\nWHERE T1.height_cm = 185;\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "759": "\nSELECT T1.eye_colour FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.weight_kg = (SELECT MAX(weight_kg) FROM superhero);\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "760": "\nSELECT SUM(CASE WHEN T1.height_cm BETWEEN 150 AND 180 THEN 1 ELSE 0 END) / COUNT(T1.id) * 100 AS percentage\nFROM superhero AS T1\nJOIN hero_power AS T2 ON T1.id = T2.hero_id\nWHERE T1.publisher_name = 'Marvel Comics'\nGROUP BY T1.id;\n\n\t----- bird -----\tsuperhero",
    "761": "\nSELECT T1.full_name\nFROM superhero AS T1\nJOIN hero_power AS T2 ON T1.id = T2.hero_id\nWHERE T1.gender_id = 1 AND T2.power_name IN ('Superman', 'Batman')\nGROUP BY T1.id, T1.full_name\nHAVING AVG(T1.weight) > 0.79 * (SELECT AVG(weight) FROM superhero);\n\n\t----- bird -----\tsuperhero",
    "762": "\nSELECT T2.power_name\nFROM hero_power AS T1\nJOIN superhero AS T2 ON T1.hero_id = T2.id\nGROUP BY T2.id, T1.power_id\nORDER BY COUNT(*) DESC;\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "763": "\nSELECT T1.alignment, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination' \n\t----- bird -----\tsuperhero",
    "764": "\nSELECT T2.power_name\nFROM hero_power AS T1\nJOIN superhero AS T2 ON T1.hero_id = T2.id\nWHERE T1.power_id IN (\n  SELECT T3.power_id\n  FROM superpower AS T3\n  WHERE T3.power_name = 'Superhero'\n)\nAND T1.hero_id = 1;\n\n\t----- bird -----\tsuperhero",
    "765": "\nSELECT COUNT(*) FROM hero_power WHERE power_name = 'stealth';\n\n\t----- bird -----\tsuperhero",
    "766": "\nSELECT T1.hero_name\nFROM superhero AS T1\nJOIN hero_attribute AS T2 ON T1.id = T2.hero_id\nWHERE T2.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE hero_id = T1.id)\nORDER BY T1.height_cm DESC LIMIT 1;\n\n\t----- bird -----\tsuperhero",
    "767": "\nSELECT AVG(t1.height_cm) AS average_height_cm\nFROM superhero AS t1\nWHERE t1.skin_colour_id IS NULL;\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "768": "\n\t----- bird -----\tsuperhero",
    "769": "\nSELECT T1.superhero_name\nFROM superhero AS T1\nJOIN hero_power AS T2 ON T1.id = T2.hero_id\nWHERE T2.power_name = 'Durability'\nGROUP BY T1.superhero_name\nORDER BY COUNT(*) DESC\nLIMIT 1;\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "770": "\n\t----- bird -----\tsuperhero",
    "771": "\nSELECT T1.superhero_name\nFROM superhero AS T1\nJOIN hero_power AS T2 ON T1.id = T2.hero_id\nWHERE T2.power_name = 'flight';\n\n\t----- bird -----\tsuperhero",
    "772": "\nSELECT T1.eye_colour, T1.hair_colour, T1.skin_colour\nFROM superhero AS T1\nJOIN hero_power AS T2 ON T1.id = T2.hero_id\nJOIN gender AS T3 ON T1.gender_id = T3.id\nWHERE T3.gender = 'Female' AND T1.publisher_id = (SELECT id FROM publisher WHERE name = 'Dark Horse Comics')\n\n\t----- bird -----\tsuperhero",
    "773": "\nSELECT s.superhero_name, p.publisher_name\nFROM superhero s\nJOIN hero_power h ON s.id = h.hero_id\nJOIN superpower p ON h.power_id = p.id\nWHERE s.eye_colour_id = 1 AND s.hair_colour_id = 2 AND s.skin_colour_id = 3;\n\n\t----- bird -----\tsuperhero",
    "774": "\nSELECT DISTINCT T1.race, T1.publisher_name FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'superhero A-Bomb' GROUP BY T1.race, T1.publisher_name SQL_END\n\t----- bird -----\tsuperhero",
    "775": "\nSELECT CAST(SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) AS percentage\nFROM superhero AS T1\nJOIN gender AS T2 ON T1.gender_id = T2.id\nWHERE T2.gender = 'F'\nGROUP BY T1.id;\n\n\t----- bird -----\tsuperhero",
    "776": "\nSELECT superhero_name, race FROM superhero WHERE full_name = 'Charles Chandler';\n\n\t----- bird -----\tsuperhero",
    "777": "\n\t----- bird -----\tsuperhero",
    "778": "\nSELECT T1.superhero_name\nFROM superhero AS T1\nJOIN hero_power AS T2 ON T1.id = T2.hero_id\nJOIN superpower AS T3 ON T2.power_id = T3.id\nWHERE T3.power_name = 'adaptation';\n\n\t----- bird -----\tsuperhero",
    "779": "\nSELECT COUNT(DISTINCT power_id) FROM superpower WHERE hero_id = (SELECT id FROM superhero WHERE full_name = 'Amazo') \n\t----- bird -----\tsuperhero",
    "780": "\nSELECT superpower.power_name FROM hero_power INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.superhero_name = 'Hunter Zolomon' GROUP BY superpower.power_name \n\t----- bird -----\tsuperhero",
    "781": "\nSELECT T1.height_cm FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.eye_colour_id = 3;\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "782": "\nSELECT T1.hero_name\nFROM superhero AS T1\nJOIN hero_attribute AS T2 ON T1.id = T2.hero_id\nJOIN attribute AS T3 ON T2.attribute_id = T3.id\nWHERE T3.attribute_value = 0 AND T3.colour = 'black';\n\n\t----- bird -----\tsuperhero",
    "783": "\nSELECT T1.eye_colour FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.skin_colour = 'gold' AND T1.power_id IN (SELECT T3.power_id FROM superpower AS T3 WHERE T3.power_name = 'Eye Colour');\n\n\t----- bird -----\tsuperhero",
    "784": "\nSELECT T1.hero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T1.gender_id = 1 AND T1.eye_colour_id = 1 AND T1.hair_colour_id = 1 AND T1.skin_colour_id = 1\n\t----- bird -----\tsuperhero",
    "785": "\nSELECT DISTINCT s1.superhero_name FROM superhero AS s1 JOIN hero_power AS h ON s1.id = h.hero_id WHERE h.power_name IN ('neutral alignment') GROUP BY s1.superhero_name, s1.id;\n\t----- bird -----\tsuperhero",
    "786": "\nSELECT COUNT(*) AS count\nFROM hero_power\nWHERE power_name = 'strength'\nGROUP BY power_id;\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "787": "\n\t----- bird -----\tsuperhero",
    "788": "\nSELECT SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) * 100 / COUNT(id) AS percent\nFROM superhero\nWHERE gender_id = 1;\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "789": "\nSELECT AVG(w.weight) AS average_weight\nFROM hero_power\nJOIN superhero ON hero_power.hero_id = superhero.id\nWHERE superhero.race = 'Alien';\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "790": "\nSELECT ABS(E Emil Blonsky's weight - C Charles Chandler's weight)\nFROM hero_power AS P1 INNER JOIN hero_attribute AS H1 ON P1.power_id = H1.id WHERE H1.attribute_value = 2;\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "791": "\nSELECT s.superhero_name, AVG(h.height_cm) AS average_height\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nGROUP BY s.id;\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "792": "\nSELECT power_name FROM superpower WHERE power_id = (SELECT id FROM hero_power WHERE hero_id = (SELECT id FROM superhero WHERE full_name = 'Abomination'))\n\t----- bird -----\tsuperhero",
    "793": "\nSELECT COUNT(T1.id) AS count, T2.gender \nFROM superhero AS T1 \nJOIN race AS T2 ON T1.race_id = T2.id \nWHERE T1.race = 'god/eternal' AND T1.gender_id IS NULL;\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "794": "\nSELECT T1.hero_name, T1.height_cm, T1.weight_kg FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T1.alignment_id = (SELECT T3.alignment_id FROM alignment AS T3 WHERE T3.id = (SELECT T4.alignment_id FROM alignment AS T4 WHERE T4.alignment = 'fastest')) GROUP BY T1.hero_name ORDER BY T1.height_cm DESC, T1.weight_kg DESC \n\t----- bird -----\tsuperhero",
    "795": "\nSELECT COUNT(*) FROM superhero WHERE alignment = 'neutral' GROUP BY superhero_id SQL_END\n\t----- bird -----\tsuperhero",
    "796": "\nSELECT a.alignment, a.attribute_name\nFROM alignment a\nJOIN hero_attribute h ON a.id = h.hero_id;\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "797": "\nSELECT DISTINCT s.superhero_name\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nWHERE hp.power_name = 'Blind' AND hp.attribute_value = 1;\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "798": "\nSELECT T1.publisher_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Hawkman' AND T1.id IN (SELECT T3.id FROM hero_attribute AS T3 INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T4.power_name = 'Speedy') AND T1.id IN (SELECT T5.id FROM hero_power AS T6 INNER JOIN superhero AS T7 ON T6.hero_id = T7.id WHERE T7.id = T1.id) SQL_END\n\t----- bird -----\tsuperhero",
    "799": "\nSELECT COUNT(id)\nFROM superhero\nWHERE id NOT IN (SELECT DISTINCT publisher_id FROM hero_power);\n\n\t----- bird -----\tsuperhero",
    "800": "\nSELECT SUM(CASE WHEN T1.eye_colour_id = 2 THEN 1 ELSE 0 END) / COUNT(T1.id) * 100 AS percentage\nFROM superhero AS T1\nJOIN hero_attribute AS T2 ON T1.id = T2.hero_id\nWHERE T2.attribute_value = 3;\n\n\t----- bird -----\tsuperhero",
    "801": "\nSELECT \n    COUNT(T1.id) AS ratio_male,\n    COUNT(T2.id) AS count_female\nFROM \n    superhero AS T1\nJOIN \n    alignment AS T2 ON T1.alignment_id = T2.id\nGROUP BY \n    T1.id;\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "802": "\n\t----- bird -----\tsuperhero",
    "803": "\n\t----- bird -----\tsuperhero",
    "804": "\n\t----- bird -----\tsuperhero",
    "805": "\nSELECT T1.full_name\nFROM superhero AS T1\nJOIN hero_power AS T2 ON T1.id = T2.hero_id\nWHERE T2.power_name IN ('strength', 'speed')\nAND T1.weight IS NULL;\n\n\t----- bird -----\tsuperhero",
    "806": "\nSELECT T1.eye_colour_id, T1.eye_colour\nFROM superhero AS T1\nJOIN hero_attribute AS T2 ON T1.id = T2.hero_id\nWHERE T1.full_name LIKE 'Karen Beecher-Duncan%';\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "807": "\n\t----- bird -----\tsuperhero",
    "808": "\nSELECT T1.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188;\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "809": "\n\t----- bird -----\tsuperhero",
    "810": "\nSELECT T1.race\nFROM superhero AS T1\nJOIN hero_attribute AS T2 ON T1.id = T2.hero_id\nGROUP BY T1.race\nORDER BY SUM(T2.attribute_value) DESC\nLIMIT 1;\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "811": "\nSELECT a.alignment, s.power_name FROM superhero AS a JOIN hero_power AS p ON a.id = p.hero_id WHERE a.superhero_name = 'Atom IV' GROUP BY a.alignment, s.power_name \n\t----- bird -----\tsuperhero",
    "812": "\nSELECT T1.full_name\nFROM superhero AS T1\nJOIN hero_attribute AS T2 ON T1.id = T2.hero_id\nJOIN attribute AS T3 ON T2.attribute_id = T3.id\nWHERE T3.attribute_name = 'blue eyes';\n\n\t----- bird -----\tsuperhero",
    "813": "\nSELECT AVG(T1.attribute_value) AS average_attribute_value\nFROM hero_power AS T1\nJOIN superhero AS T2 ON T1.hero_id = T2.id\nWHERE T2.gender_id IS NULL;\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "814": "\nSELECT T1.skin_colour_id, T1.skin_colour\nFROM superhero AS T1\nJOIN hero_attribute AS T2 ON T1.id = T2.hero_id\nWHERE T2.attribute_value = 100;\n\n\t----- bird -----\tsuperhero",
    "815": "\nSELECT COUNT(*) AS count\nFROM superhero\nWHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female');\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "816": "\nSELECT T1.superhero_name\nFROM superhero AS T1\nJOIN hero_attribute AS T2 ON T1.id = T2.hero_id\nWHERE T2.attribute_value BETWEEN 75 AND 80;\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "817": "\nSELECT T1.race FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T1.eye_colour_id = (SELECT T3.colour FROM colour AS T3 WHERE T3.colour = 'blue') AND T1.gender_id = (SELECT T4.id FROM gender AS T4 WHERE T4.gender = 'male') SQL_END\n\t----- bird -----\tsuperhero",
    "818": "\nSELECT CAST(SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) AS percentage FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.gender = 'F';\n\n\t----- bird -----\tsuperhero",
    "819": "\nSELECT COUNT(T1.id) AS number_of_superheroes_with_blue_eyes, COUNT(T2.id) AS number_of_superheroes_without_eye_color\nFROM superhero AS T1\nJOIN hero_attribute AS T2 ON T1.id = T2.hero_id\nWHERE T1.eye_colour_id IS NULL;\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "820": "\n\t----- bird -----\tsuperhero",
    "821": "\nSELECT DISTINCT T1.power_name FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Ajax' GROUP BY T1.power_name, T1.hero_id ORDER BY T1.power_name, T1.hero_id \n\t----- bird -----\tsuperhero",
    "822": "\nSELECT COUNT(T1.gender_id) AS green_skinned_villains\nFROM superhero AS T1\nJOIN hero_attribute AS T2 ON T1.id = T2.hero_id\nJOIN attribute AS T3 ON T2.attribute_id = T3.id\nWHERE T3.attribute_name = 'green'\nGROUP BY T1.id;\n\n\t----- bird -----\tsuperhero",
    "823": "\nSELECT COUNT(*) FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female') GROUP BY superhero_id SQL_END\n\t----- bird -----\tsuperhero",
    "824": "\nSELECT T1.superhero_name, T2.attribute_value\nFROM superhero AS T1\nJOIN hero_attribute AS T2 ON T1.id = T2.hero_id\nWHERE T1.alignment_id = 3 AND T2.attribute_id IN (SELECT id FROM attribute WHERE attribute_name = 'control wind');\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "825": "\nSELECT T1.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Phoenix Force' GROUP BY T1.gender \n\t----- bird -----\tsuperhero",
    "826": "\nSELECT T1.superhero_name, T1.height_cm, T1.weight_kg FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T1.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1\n\t----- bird -----\tsuperhero",
    "827": "\nSELECT AVG(t1.height_cm) AS average_height\nFROM superhero AS t1\nJOIN hero_power AS t2 ON t1.id = t2.hero_id\nWHERE t1.gender_id IS NULL AND t1.race_id = 3;\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "828": "\nSELECT COUNT(id) AS fastest_superheroes_count\nFROM superhero\nWHERE speed > (SELECT MAX(speed) FROM superhero);\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "829": "\nSELECT T1.publisher_name, COUNT(T2.id) - COUNT(T3.id)\nFROM superhero AS T1\nJOIN alignment AS T2 ON T1.id = T2.superhero_id\nJOIN race AS T3 ON T1.race_id = T3.id\nGROUP BY T1.publisher_name;\n\n\t----- bird -----\tsuperhero",
    "830": "\nSELECT T1.alignment, MIN(T2.attribute_value) AS weakest_attribute\nFROM hero_power AS T1\nJOIN superpower AS T2 ON T1.power_id = T2.id\nWHERE T1.hero_id = 79 AND T1.power_name = 'Strength'\nGROUP BY T1.alignment;\n\n\t----- bird -----\tsuperhero",
    "831": "\n\t----- bird -----\tsuperhero",
    "832": "\n\t----- bird -----\tsuperhero",
    "833": "\n\t----- bird -----\tsuperhero",
    "834": "\nSELECT \n    COUNT(T1.id) AS total_count,\n    (COUNT(CASE WHEN T2.gender = 0 THEN 1 ELSE NULL END) / COUNT(T1.id)) * 100 AS female_percentage\nFROM \n    superhero AS T1\nJOIN \n    alignment AS T2 ON T1.alignment_id = T2.id\nWHERE \n    T1.publisher_id = (SELECT id FROM publisher WHERE name = 'George Lucas')\nGROUP BY \n    T1.id;\n\n\t----- bird -----\tsuperhero",
    "835": "\nSELECT SUM(CASE WHEN T1.alignment = 'good' THEN 1 ELSE 0 END) / COUNT(T1.id) * 100 AS percentage\nFROM superhero AS T1\nJOIN hero_power AS T2 ON T1.id = T2.hero_id\nWHERE T1.publisher_name = 'Marvel Comics'\nGROUP BY T1.id;\n\n\t----- bird -----\tsuperhero",
    "836": "\nSELECT COUNT(*) AS total_superheroes\nFROM superhero\nWHERE first_name = 'John';\n\n\t----- bird -----\tsuperhero",
    "837": "\nSELECT T1.hero_id\nFROM hero_attribute AS T1\nJOIN superpower AS T2 ON T1.attribute_id = T2.id\nWHERE T2.power_name = 'hero power'\nORDER BY T1.attribute_value ASC\nLIMIT 1;\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "838": "\n\t----- bird -----\tsuperhero",
    "839": "\nSELECT T1.full_name\nFROM superhero AS T1\nJOIN hero_power AS T2 ON T1.id = T2.hero_id\nWHERE T1.weight < 100 AND T1.eye_colour_id = (SELECT id FROM colour WHERE colour.text = 'brown');\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "840": "\n\t----- bird -----\tsuperhero",
    "841": "\nSELECT T1.weight, T2.race \nFROM superhero AS T1 \nJOIN hero_power AS T2 ON T1.id = T2.hero_id \nWHERE T1.id = 40;\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "842": "\nSELECT AVG(t1.height_cm) AS average_height\nFROM superhero AS t1\nJOIN hero_power AS t2 ON t1.id = t2.hero_id\nWHERE t1.alignment_id = 0;\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "843": "\nSELECT T1.hero_id\nFROM hero_power AS T1\nJOIN superpower AS T2 ON T1.power_id = T2.id\nWHERE T2.power_name = 'intelligence';\n\n\t----- bird -----\tsuperhero",
    "844": "\n\t----- bird -----\tsuperhero",
    "845": "\nSELECT T2.power_name\nFROM hero_power AS T1\nJOIN superhero AS T2 ON T1.hero_id = T2.id\nWHERE T1.height / 100 * (T1.height + 80) > (SELECT AVG(height) FROM superhero);\nSQL_END\n\n\t----- bird -----\tsuperhero",
    "846": "\nSELECT DISTINCT constructorRef FROM drivers WHERE driverId IN (SELECT driverId FROM qualifying WHERE raceNumber = 18 AND positionOrder > 1);\nSQL_END\n\n\t----- bird -----\tformula_1",
    "847": "\nSELECT T2.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 19 AND T2.positionOrder = 1 ORDER BY T2.laps DESC LIMIT 1;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "848": "\nSELECT DISTINCT t1.year\nFROM races AS t1\nJOIN circuits AS t2 ON t1.circuitId = t2.circuitId\nWHERE t2.location = 'Shanghai';\nSQL_END\n\n\t----- bird -----\tformula_1",
    "849": "\nSELECT circuitRef FROM circuits WHERE circuitId = (SELECT circuitId FROM races WHERE name = 'Circuit de Barcelona-Catalunya') \n\t----- bird -----\tformula_1",
    "850": "\nSELECT races.name FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Germany' ORDER BY races.raceId LIMIT 1 \n\t----- bird -----\tformula_1",
    "851": "\nSELECT T1.circuitId, T2.position\nFROM constructors AS T1\nJOIN races AS T2 ON T1.constructorId = T2.constructorId\nWHERE T1.name = 'Renault'\nORDER BY T1.circuitId;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "852": "\nSELECT COUNT(raceId)\nFROM races\nWHERE year = 2010\n  AND circuitId IN (\n    SELECT circuitId\n    FROM circuits\n    WHERE country NOT IN ('Asia', 'Europe')\n  );\nSQL_END\n\n\t----- bird -----\tformula_1",
    "853": "\n\nSELECT DISTINCT r.name FROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.country = 'Spain';\n\n\n\t----- bird -----\tformula_1",
    "854": "\nSELECT circuitRef, location FROM circuits WHERE country = 'Australia' ORDER BY location LIMIT 1;\n\t----- bird -----\tformula_1",
    "855": "\nSELECT races.name, races.date, races.time FROM races INNER JOIN qualifying ON races.raceId = qualifying.raceId WHERE qualifying.constructorId = (SELECT constructorId FROM circuits WHERE circuitRef = 'SPE-01') AND qualifying.driverId = (SELECT driverId FROM drivers WHERE number = 2) \n\t----- bird -----\tformula_1",
    "856": "\nSELECT t1.date, t1.time FROM races AS t1 INNER JOIN qualifying AS t2 ON t1.raceId = t2.raceId WHERE t1.circuitId = 38 ORDER BY t1.date ASC \n\t----- bird -----\tformula_1",
    "857": "\nSELECT circuitRef, lat, lng FROM circuits WHERE name = 'Abu Dhabi Grand Prix' AND country = 'United Arab Emirates' \n\t----- bird -----\tformula_1",
    "858": "\nSELECT T1.country FROM constructors AS T1 INNER JOIN races AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = 24 AND T1.statusId = 1;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "859": "\nSELECT results.resultId, races.raceId, drivers.driverId, constructors.constructorId, 354 AS raceId, 'Q1' AS constructor, 'fastestLap' AS number, 'fastestLapTime' AS positionOrder, 0.0 AS points, 0 AS laps, '00:00:00' AS time, 0 AS milliseconds FROM results INNER JOIN races ON results.raceId = races.raceId WHERE drivers.driverRef = 'Bruno Senna' AND constructors.constructorRef = 'SNN' ORDER BY results.lap DESC LIMIT 1 \n\t----- bird -----\tformula_1",
    "860": "\nSELECT T2.nationality FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 355 AND T2.constructorId = 10;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "861": "\nSELECT T1.driverId, T1.number \nFROM results AS T1 \nJOIN qualifying AS T2 ON T1.raceId = T2.raceId AND T1.constructorId = T2.constructorId AND T1.number = 0 \nWHERE T2.q3 = '0:01:54' AND T2.raceId = 903;\n\n\t----- bird -----\tformula_1",
    "862": "\nSELECT COUNT(DISTINCT driverId) FROM results WHERE raceId = (SELECT raceId FROM races WHERE circuitId = 1 AND year = 2007 AND name = 'Bahrain Grand Prix') - 1 \n\t----- bird -----\tformula_1",
    "863": "\nSELECT T2.year FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceId = 901;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "864": "\nSELECT COUNT(driverId) FROM drivers WHERE raceId = (SELECT raceId FROM races WHERE date = '2015-11-29' AND time LIKE '%game%') \n\t----- bird -----\tformula_1",
    "865": "\nSELECT T1.driverRef, MAX(T2.position) AS oldest_position\nFROM drivers AS T1\nJOIN results AS T2 ON T1.driverId = T2.driverId AND T2.raceId = 592\nGROUP BY T1.driverRef;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "866": "\nSELECT T1.driverRef, T1.forename, T1.surname, T1.dob, T1.nationality, T1.url\nFROM drivers AS T1\nJOIN qualifying AS T2 ON T1.driverId = T2.driverId AND T2.raceId = 161\nWHERE T2.lap = 0 AND T2.position = 1;\n\n\t----- bird -----\tformula_1",
    "867": "\nSELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 933 AND T2.position = (SELECT MAX(position) FROM results WHERE raceId = 933)\n\n\t----- bird -----\tformula_1",
    "868": "\nSELECT circuitRef, lat, lng FROM circuits WHERE country = 'Malaysia' AND location = 'Grand Prix' END \n\t----- bird -----\tformula_1",
    "869": "\nSELECT c.url\nFROM constructors c\nJOIN constructorResults cr ON c.constructorId = cr.constructorId AND cr.raceId = 9\nWHERE cr.points = (SELECT MAX(points) FROM constructorResults);\nSQL_END\n\n\t----- bird -----\tformula_1",
    "870": "\nSELECT results.resultId, races.raceId, drivers.driverId, constructors.constructorId, drivers.number, drivers.position, drivers.positionText, drivers.positionOrder, results.points, results.laps, results.time, results.milliseconds, results.fastestLap, results.rank, results.fastestLapTime, results.fastestLapSpeed FROM results INNER JOIN races ON results.raceId = races.raceId INNER JOIN drivers ON results.driverId = drivers.driverId INNER JOIN constructors ON results.constructorId = constructors.constructorId WHERE drivers.fname = 'Lucas' AND drivers.lname = 'di Grassi' AND races.raceId = 345 \n\t----- bird -----\tformula_1",
    "871": "\nSELECT T2.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.constructorId = 347 AND T2.position = 2 AND T2.time LIKE '0:01:15';\nSQL_END\n\n\t----- bird -----\tformula_1",
    "872": "\nSELECT T2.forename, T2.surname\nFROM drivers AS T1\nJOIN constructorStandings AS T2 ON T1.driverId = T2.driverId\nWHERE T1.constructorId = 45 AND T2.position = 'Q3' AND T2.points > 0;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "873": "\nSELECT T1.time FROM races AS T1 INNER JOIN qualifying AS T2 ON T1.raceId = T2.raceId WHERE T2.driverId = 743 AND T2.constructorId = 1;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "874": "\nSELECT drivers.driverRef, drivers.number, drivers.position, drivers.positionText FROM drivers INNER JOIN results ON drivers.driverId = results.driverId WHERE results.raceId = (SELECT raceId FROM races WHERE year = 2006 AND constructorId = 1) ORDER BY results.laps DESC LIMIT 1 \n\t----- bird -----\tformula_1",
    "875": "\nSELECT T2.year FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceId = 901;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "876": "\nSELECT COUNT(driverId) \nFROM drivers \nWHERE raceId = (SELECT raceId FROM races WHERE date = '2015-11-29' AND year = 2015);\nSQL_END\n\n\t----- bird -----\tformula_1",
    "877": "\nSELECT T2.driverRef, MIN(T1.position) AS youngest\nFROM drivers AS T1\nJOIN results AS T2 ON T1.driverId = T2.driverId AND T1.constructorId = T2.constructorId AND T2.raceId = 872\nGROUP BY T1.driverId;\n\n\t----- bird -----\tformula_1",
    "878": "\nSELECT drivers.d FName, drivers.d LName, drivers.driverId, races.raceId, drivers.number, drivers.position, drivers.positionText, drivers.lapTime, drivers.time, drivers.milliseconds, drivers.fastestLap, drivers.rank, drivers.fastestLapTime, drivers.status FROM drivers INNER JOIN results ON drivers.driverId = results.driverId WHERE results.raceId = 348 ORDER BY drivers.lapTime DESC LIMIT 1 \n\t----- bird -----\tformula_1",
    "879": "\nSELECT T2.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results);\nSQL_END\n\n\t----- bird -----\tformula_1",
    "880": "\nSELECT \n  (CASE \n    WHEN MAX(`raceId`) = 853 THEN 0\n    ELSE (853 - MIN(`raceId`)) * 100 / MAX(`raceId`)\n  END) AS percent_faster\nFROM \n  results\nWHERE \n  `constructorId` = 853 AND `driverId` = 853;\n\n\t----- bird -----\tformula_1",
    "881": "\nSELECT COUNT(*) AS total_drivers, SUM(points) / COUNT(*) * 100 AS completion_rate\nFROM drivers\nWHERE YEAR(raceId) = 1983 AND DATE(date) = '16/07/1983';\n\n\t----- bird -----\tformula_1",
    "882": "\n\t----- bird -----\tformula_1",
    "883": "\nSELECT COUNT(*) AS race_count, raceId FROM races WHERE YEAR(raceId) = 2005 ORDER BY raceId DESC;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "884": "\nSELECT r.year, r.name\nFROM races r\nWHERE r.raceId = (\n  SELECT MAX(r2.raceId)\n  FROM races r2\n  WHERE r2.year = r.year AND r2.month = r.month\n);\nSQL_END\n\n\t----- bird -----\tformula_1",
    "885": "\n\nSELECT races.date FROM races \nWHERE races.year = 1999 AND races.round = (SELECT MAX(round) FROM races WHERE year = 1999)\n\n\n\t----- bird -----\tformula_1",
    "886": "\nSELECT year FROM races GROUP BY year ORDER BY COUNT(year) DESC LIMIT 1;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "887": "\nSELECT DISTINCT r.year\nFROM races r\nWHERE r.year = 2017 AND r.circuitId IN (\n    SELECT c.circuitId\n    FROM circuits c\n    WHERE c.year = 2000\n)\nAND r.year != 2000;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "888": "\nSELECT circuits.circuitRef, circuits.location FROM circuits WHERE circuits.country = 'Europe' ORDER BY circuits.circuitId LIMIT 1 \n\t----- bird -----\tformula_1",
    "889": "\nSELECT DISTINCT t1.year FROM races AS t1 INNER JOIN constructors AS t2 ON t1.constructorId = t2.constructorId WHERE t1.circuitId = 3 AND t1.name = 'Brands Hatch' AND t1.url = 'https://www.f1.com/brands-hatch-qualifying-season' GROUP BY t1.year HAVING MAX(t1.year) - MIN(t1.year) + 1 > 2021 END SQL_END\n\t----- bird -----\tformula_1",
    "890": "\nSELECT COUNT(year) AS seasons_hosted\nFROM races\nWHERE circuit_id = (SELECT circuit_id FROM circuits WHERE name = 'Silverstone Circuit')\n  AND country = 'United Kingdom'\n  AND year IN (\n    SELECT race.year\n    FROM races\n    JOIN qualifying ON races.raceId = qualifying.raceId\n    WHERE qualifying.driverId = (SELECT driverId FROM drivers WHERE surname = 'Simpson' AND forename = 'Silverstone')\n      AND qualifying.constructorId = (SELECT constructorId FROM constructors WHERE constructorRef = 'United Kingdom')\n  );\nSQL_END\n\n\t----- bird -----\tformula_1",
    "891": "\nSELECT drivers.driverRef, drivers.position, drivers.positionText\nFROM drivers\nJOIN results ON drivers.driverId = results.driverId\nWHERE results.raceId = (SELECT raceId FROM races WHERE name = '2010 Singapore Grand Prix' LIMIT 1)\nORDER BY drivers.position;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "892": "\nSELECT T1.driverRef, T1.firstName, T1.lastName \nFROM drivers AS T1 \nJOIN results AS T2 ON T1.driverId = T2.driverId \nWHERE T2.points = (SELECT MAX(points) FROM results);\n\n\t----- bird -----\tformula_1",
    "893": "\nSELECT drivers.driverRef, drivers.points\nFROM drivers\nJOIN qualifying ON drivers.driverId = qualifying.driverId\nWHERE qualifying.raceId = 2017 AND qualifying.number = 3;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "894": "\nSELECT r.name, d.driverRef, r.laps\nFROM races r\nJOIN qualifying q ON r.raceId = q.raceId\nJOIN results res ON r.raceId = res.raceId\nWHERE res.fastestLapTime IS NOT NULL\nORDER BY res.fastestLapTime DESC;\n\n\t----- bird -----\tformula_1",
    "895": "\nSELECT AVG(t1.time) AS average_lap_time\nFROM results AS t1\nJOIN races AS t2 ON t1.raceId = t2.raceId\nWHERE t2.year = 2009 AND t1.driverId = 786;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "896": "\nSELECT SUM(CASE WHEN T1.year = 2010 THEN 1 ELSE 0 END) AS percentage\nFROM drivers AS T1\nJOIN constructors AS T2 ON T1.constructorId = T2.constructorId\nJOIN races AS T3 ON T1.driverId = T3.driverId\nWHERE T3.name = 'Hamilton' AND T3.year > 2010;\n\n\t----- bird -----\tformula_1",
    "897": "\nSELECT T2.driverRef, T2.nationality, AVG(T3.points) AS average_points\nFROM drivers AS T1\nJOIN results AS T2 ON T1.driverId = T2.driverId\nWHERE T1.constructorId = 1 AND T1.positionOrder > 0\nGROUP BY T2.driverId\nORDER BY average_points DESC;\n\n\t----- bird -----\tformula_1",
    "898": "\nSELECT MAX(driverId) AS youngest_japanese_driver_id, driverRef\nFROM drivers\nWHERE nationality = 'Japanese'\n  AND (dob >= '1900-01-01' OR dob IS NULL)\n  AND year(dob) = 2022 - YEAR('1900')\n\n\t----- bird -----\tformula_1",
    "899": "\nSELECT circuitId FROM circuits WHERE year IN (1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000) AND circuitId IN (\n    SELECT circuitId FROM races WHERE year BETWEEN 1990 AND 2000 GROUP BY circuitId HAVING COUNT(*) = 4\n);\n\n\t----- bird -----\tformula_1",
    "900": "\nSELECT c.circuitRef, r.name AS race_name\nFROM circuits c\nJOIN races r ON c.circuitId = r.circuitId\nWHERE r.year = 2006 AND r.country = 'USA';\nSQL_END\n\n\t----- bird -----\tformula_1",
    "901": "\nSELECT r.name, c.circuitRef\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE r.year = 2005 AND r.round >= 1;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "902": "\nSELECT DISTINCT r.name\nFROM races r\nJOIN qualifying q ON r.raceId = q.raceId AND q.driverId = (SELECT driverId FROM drivers WHERE number < 10)\nWHERE r.circuitId = (SELECT circuitId FROM circuits WHERE name = 'Alex Yoong')\nORDER BY r.date;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "903": "\nSELECT COUNT(DISTINCT T1.raceId) AS wins\nFROM drivers AS T1\nJOIN constructors AS T2 ON T1.constructorId = T2.constructorId\nJOIN constructorResults AS T3 ON T1.driverId = T3.driverId AND T3.constructorId = 1\nJOIN races AS T4 ON T3.raceId = T4.raceId\nWHERE T4.year = 2018 AND T4.circuitId = 796;\n\n\t----- bird -----\tformula_1",
    "904": "\nSELECT r.year, r.name\nFROM races r\nJOIN qualifying q ON r.raceId = q.raceId AND q.driverId = (SELECT driverId FROM drivers WHERE driverRef = 'Michael Schumacher' LIMIT 1)\nWHERE q.position = (SELECT MAX(position) FROM results WHERE constructorId = (SELECT constructorId FROM constructors WHERE constructorRef = 'Ferrari' LIMIT 1))\nAND q.number = (SELECT MIN(number) FROM results WHERE constructorId = (SELECT constructorId FROM constructors WHERE constructorRef = 'Ferrari' LIMIT 1))\nORDER BY q.lap DESC, r.year;\n\n\t----- bird -----\tformula_1",
    "905": "\nSELECT AVG(points) AS average_points\nFROM drivers\nWHERE driverRef = 'Eddie Irvine'\nAND YEAR(raceId) = 2000;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "906": "\nSELECT r.name, c.points\nFROM races r\nJOIN qualifying q ON r.raceId = q.raceId\nJOIN constructors c ON q.constructorId = c.constructorId\nWHERE q.driverId = (SELECT driverId FROM drivers WHERE firstName = 'Lewis' AND lastName = 'Hamilton');\nSQL_END\n\n\t----- bird -----\tformula_1",
    "907": "\nSELECT raceId, year FROM races WHERE YEAR(raceId) = 2017 ORDER BY date;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "908": "\nSELECT r.year, c.circuitRef, c.location\nFROM races r\nJOIN qualifying q ON r.raceId = q.raceId\nWHERE q.number = (SELECT MAX(number) FROM qualifying);\nSQL_END\n\n\t----- bird -----\tformula_1",
    "909": "\nSELECT SUM(CASE WHEN T1.year = 2023 THEN 1 ELSE 0 END) AS percentage_of_races_in_germany\nFROM races r\nJOIN constructors c ON r.constructorId = c.constructorId\nWHERE c.country = 'Germany' AND r.year = 2023;\n\n\t----- bird -----\tformula_1",
    "910": "\n\t----- bird -----\tformula_1",
    "911": "\nSELECT DISTINCT circuitRef\nFROM circuits\nWHERE circuitId = (SELECT circuitId FROM races WHERE name = 'Silverstone Circuit' AND location = 'Hockenheimring')\n  OR circuitId = (SELECT circuitId FROM races WHERE name = 'Hungaroring' AND location = 'Hockenheimring');\n\n\t----- bird -----\tformula_1",
    "912": "\n\t----- bird -----\tformula_1",
    "913": "\n\t----- bird -----\tformula_1",
    "914": "\nSELECT COUNT(DISTINCT driverId) AS num_drivers_without_code\nFROM drivers\nWHERE driverId NOT IN (\n  SELECT DISTINCT driverId\n  FROM results\n);\n\n\t----- bird -----\tformula_1",
    "915": "\nSELECT T1.country\nFROM drivers AS T1\nJOIN races AS T2 ON T1.driverId = T2.driverId\nWHERE T2.year = (SELECT MAX(year) FROM races)\nORDER BY T1.dob DESC\nLIMIT 1;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "916": "\nSELECT T2.forename, T2.surname FROM drivers AS T1 JOIN constructors AS T2 ON T1.driverRef = T2.constructorRef WHERE T1.nationality = 'Italy' ORDER BY T1.forename;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "917": "\nSELECT circuits.url, constructors.name, drivers.forename, drivers.surname FROM circuits INNER JOIN constructors ON circuits.circuitId = constructors.circuitId INNER JOIN drivers ON circuits.driverId = drivers.driverId WHERE drivers.forename = 'Anthony' AND drivers.surname = 'Davidson';\n\n\t----- bird -----\tformula_1",
    "918": "\nSELECT constructors.name FROM constructors WHERE constructorRef = 'Lewis Hamilton' ORDER BY constructors.name LIMIT 1;\n\t----- bird -----\tformula_1",
    "919": "\nSELECT circuitRef FROM circuits WHERE year = 2009 AND circuitId IN (SELECT circuitId FROM races WHERE raceId = (SELECT raceId FROM qualifying WHERE constructorId = 1 ORDER BY laps DESC LIMIT 1)) \n\t----- bird -----\tformula_1",
    "920": "\nSELECT DISTINCT t2.year\nFROM races AS t1\nJOIN qualifying AS t3 ON t1.raceId = t3.raceId\nJOIN constructors AS t4 ON t1.constructorId = t4.constructorId\nWHERE t1.circuitId = 7 AND t3.number = 1;\n\n\t----- bird -----\tformula_1",
    "921": "\nSELECT races.raceId, circuits.circuitRef, drivers.dob, constructors.name, constructors.url, constructorResults.points, constructorStandings.position, constructorStandings.positionText FROM races INNER JOIN constructors ON races.constructorId = constructors.constructorId INNER JOIN driverStandings ON races.driverId = driverStandings.driverId INNER JOIN lapTimes ON races.raceId = lapTimes.raceId INNER JOIN pitStops ON races.raceId = pitStops.raceId INNER JOIN qualifying ON races.raceId = qualifying.raceId INNER JOIN results ON qualifying.resultId = results.resultId WHERE races.year = 2019 AND races.circuitId = 'Silverstone' \n\t----- bird -----\tformula_1",
    "922": "\nSELECT T1.time FROM races AS T1 INNER JOIN qualifying AS T2 ON T1.raceId = T2.raceId WHERE T2.number = 20 AND T2.year = 2010;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "923": "\nSELECT COUNT(raceId) FROM races WHERE country = 'Italy' AND circuitId IN (SELECT circuitId FROM circuits WHERE location = 'Italy') \n\t----- bird -----\tformula_1",
    "924": "\nSELECT DISTINCT t1.date\nFROM races AS t1\nJOIN qualifying AS t2 ON t1.raceId = t2.raceId AND t1.year = t2.year\nWHERE t1.circuitId = 389 AND t1.name = 'Barcelona-Catalunya';\nSQL_END\n\n\t----- bird -----\tformula_1",
    "925": "\nSELECT url FROM circuits WHERE circuitRef = 'Circuit 1234567890' AND year = 2009 AND country = 'Spain' \n\t----- bird -----\tformula_1",
    "926": "\nSELECT MAX(time) AS fastestLapTime FROM results WHERE driverId = 1 AND constructorId = 1 AND raceId IN (SELECT raceId FROM qualifying WHERE number = 1 ORDER BY laps DESC LIMIT 1) \n\t----- bird -----\tformula_1",
    "927": "\nSELECT drivers.forename, drivers.surname\nFROM drivers\nJOIN results ON drivers.driverId = results.driverId\nWHERE results.lap = 1 AND results.position = 1;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "928": "\nSELECT drivers.dreamName AS reference_name FROM drivers INNER JOIN results ON drivers.driverId = results.driverId WHERE results.raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008) ORDER BY results.laps LIMIT 1 \n\t----- bird -----\tformula_1",
    "929": "\n\t----- bird -----\tformula_1",
    "930": "\n\t----- bird -----\tformula_1",
    "931": "\nSELECT MAX(T1.laps) AS fastestLapSpeed, T1.driverId, T1.constructorId, T1.position, T1.positionText, T1.points, T1.laps, T1.time, T1.milliseconds FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 2009 AND T1.constructorId = 1 ORDER BY T1.laps DESC LIMIT 1 \n\t----- bird -----\tformula_1",
    "932": "\nSELECT DISTINCT t2.year FROM races AS t1 INNER JOIN qualifying AS t2 ON t1.raceId = t2.raceId WHERE t1.driverId = 'Lewis Hamilton' GROUP BY t2.year HAVING COUNT(*) > 0 \n\t----- bird -----\tformula_1",
    "933": "\nSELECT statusId, rank FROM results WHERE driverId = 1 AND constructorId = 2 AND raceId = (SELECT raceId FROM qualifying WHERE year = 2008 AND driverId = 1 AND constructorId = 2) ORDER BY laps DESC LIMIT 1;\n\t----- bird -----\tformula_1",
    "934": "\nSELECT T1.forename, T1.surname \nFROM drivers AS T1 \nJOIN qualifying AS T2 ON T1.driverId = T2.driverId \nWHERE T2.raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008) \nAND T2.number = 4;\n\n\t----- bird -----\tformula_1",
    "935": "\nSELECT COUNT(driverId) AS num_drivers\nFROM drivers\nWHERE driverId IN (\n  SELECT driverId\n  FROM results\n  WHERE raceId = (SELECT raceId FROM races WHERE name = '2008 Australian Grand Prix')\n)\n\nSQL_END\n\t----- bird -----\tformula_1",
    "936": "\nSELECT T1.lap, T1.position, T1.points FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.driverId = 'Lewis Hamilton' AND T1.constructorId = 'constructor 1' AND T1.grid = 1 AND T1.position = (SELECT MAX(position) FROM results AS T3 INNER JOIN races AS T4 ON T3.raceId = T4.raceId WHERE T4.year = 2008 AND T4.driverId = 'Lewis Hamilton' AND T4.constructorId = 'constructor 1') \n\t----- bird -----\tformula_1",
    "937": "\nSELECT T2.time FROM races AS T1 INNER JOIN qualifying AS T2 ON T1.raceId = T2.raceId WHERE T1.year = 2008 AND T2.position = 2;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "938": "\nSELECT drivers.dreamName AS \"Champion\", races.name AS \"Race Name\" \nFROM drivers \nJOIN constructorStandings ON drivers.driverId = constructorStandings.driverId \nJOIN constructors ON constructorStandings.constructorId = constructors.constructorId \nWHERE constructors.country = 'Australia' AND constructors.year = 2008 \nAND constructorStandings.position = 1 \nGROUP BY drivers.dreamName, races.name \nORDER BY points DESC \n\n\t----- bird -----\tformula_1",
    "939": "\nSELECT COUNT(DISTINCT driverId) FROM drivers WHERE constructorId = (SELECT constructorId FROM constructors WHERE constructorRef = 'USA') INTERSECT SELECT COUNT(DISTINCT driverId) FROM drivers WHERE raceId IN (SELECT raceId FROM qualifying WHERE year = 2008 AND constructorId = (SELECT constructorId FROM constructors WHERE constructorRef = 'USA')) \n\t----- bird -----\tformula_1",
    "940": "\nSELECT COUNT(DISTINCT driverId) AS num_drivers\nFROM drivers\nWHERE constructorId = (SELECT constructorId FROM constructors WHERE constructorRef = '2008 Australian Grand Prix');\nSQL_END\n\n\t----- bird -----\tformula_1",
    "941": "\nSELECT SUM(points) AS total_points\nFROM drivers\nWHERE driverId = (SELECT driverId FROM results WHERE constructorId = 1 AND number = 1);\nSQL_END\n\n\t----- bird -----\tformula_1",
    "942": "\nSELECT AVG(time) AS average_fastest_lap_time_seconds\nFROM results\nWHERE driverId = (SELECT driverId FROM drivers WHERE firstName = 'Lewis' AND lastName = 'Hamilton');\nSQL_END\n\n\t----- bird -----\tformula_1",
    "943": "\nSELECT COUNT(*) AS total_laps_completed, SUM(LAPTimes.lap) AS total_laps\nFROM races\nJOIN qualifying ON races.raceId = qualifying.raceId\nWHERE YEAR(raceId) = 2008 AND constructorId = (SELECT constructorId FROM constructors WHERE constructorRef = 'Australian Grand Prix')\nGROUP BY COUNT(*) / SUM(LAPTimes.lap);\n\n\t----- bird -----\tformula_1",
    "944": "\nSELECT \n    CASE \n        WHEN r2.position = 1 THEN 0\n        ELSE (r2.position - 1) * 100 / r2.position\n    END AS percentage_faster,\n    r2.name\nFROM \n    races r1\nJOIN \n    results r2 ON r1.raceId = r2.raceId AND r2.driverId = r1.driverId\nWHERE \n    r1.year = 2008 AND r1.constructorId = 1\nORDER BY \n    percentage_faster DESC;\n\n\t----- bird -----\tformula_1",
    "945": "\n\t----- bird -----\tformula_1",
    "946": "\nSELECT circuitRef, lat, lng FROM circuits WHERE country = 'US';\nSQL_END\n\n\t----- bird -----\tformula_1",
    "947": "\nSELECT COUNT(DISTINCT driverId) AS number_of_british_drivers_born_after_1980\nFROM drivers\nWHERE nationality = 'British' AND dob > '1980-01-01';\nSQL_END\n\n\t----- bird -----\tformula_1",
    "948": "\nSELECT AVG(points) AS average_points\nFROM constructors\nWHERE nationality = 'British';\nSQL_END\n\n\t----- bird -----\tformula_1",
    "949": "\nSELECT c.constructorRef, MAX(r.points) AS max_points\nFROM constructors c\nJOIN drivers d ON c.driverId = d.driverId\nJOIN results r ON c.circuitId = r.circuitId\nGROUP BY c.constructorRef;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "950": "\nSELECT T1.constructorRef, 0 AS points\nFROM constructors AS T1\nJOIN drivers AS T2 ON T1.constructorId = T2.driverId\nJOIN races AS T3 ON T3.raceId = T2.raceId\nWHERE T3.year = 291 AND T3.circuitId = 1;\n\n\t----- bird -----\tformula_1",
    "951": "\nSELECT COUNT(constructorId) AS points_count\nFROM constructors\nWHERE constructorRef LIKE '%0%'\n  AND constructorId IN (\n    SELECT driverId\n    FROM results\n    WHERE raceId = (SELECT raceId FROM races WHERE name = '2023-01-01' OR name = '2023-01-02')\n      AND statusId = 1\n  )\n\n\t----- bird -----\tformula_1",
    "952": "\nSELECT DISTINCT c.constructorRef FROM constructors c WHERE c.constructorId IN (SELECT r.constructorId FROM results r GROUP BY r.constructorId HAVING COUNT(r.driverId) = 1) AND r.statusId = 1 \n\t----- bird -----\tformula_1",
    "953": "\nSELECT COUNT(constructorId) AS constructor_count\nFROM constructors\nWHERE nationality = 'France'\n  AND constructorRef LIKE '%%_%';\nSQL_END\n\n\t----- bird -----\tformula_1",
    "954": "\nSELECT \n    r.circuitRef,\n    COUNT(*) AS total_races,\n    SUM(CASE WHEN c.country = 'JP' THEN 1 ELSE 0 END) AS japanese_drivers_completed,\n    (SUM(CASE WHEN c.country = 'JP' THEN 1 ELSE 0 END) * 100 / COUNT(*)) AS percentage_japanese_drivers_completed\nFROM \n    races r\nJOIN \n    drivers d ON r.driverId = d.driverId\nWHERE \n    r.year BETWEEN 2007 AND 2009\nGROUP BY \n    r.circuitRef, r.year\nORDER BY \n    r.year;\n\n\t----- bird -----\tformula_1",
    "955": "\nSELECT T1.year, AVG(T2.time) AS average_time_seconds\nFROM races AS T1\nJOIN qualifying AS T2 ON T1.raceId = T2.raceId\nGROUP BY T1.year;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "956": "\nSELECT drivers.forename, drivers.surname\nFROM drivers\nWHERE drivers.driverId IN (\n  SELECT drivers2.driverId\n  FROM drivers drivers2\n  WHERE drivers2.bornAfter(1975) AND drivers2.rank = 2\n)\nORDER BY drivers.driverId;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "957": "\nSELECT COUNT(DISTINCT driverId) AS numberOfItalianDrivers\nFROM drivers\nWHERE nationality = 'Italy';\n\n\t----- bird -----\tformula_1",
    "958": "\nSELECT drivers.forename, drivers.surname \nFROM drivers \nJOIN results ON drivers.driverId = results.driverId;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "959": "\nSELECT T1.laps, T1.time, T1.positionText FROM races AS T1 INNER JOIN qualifying AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2009 AND T2.driverId = (SELECT driverId FROM drivers ORDER BY points DESC LIMIT 1) AND T1.constructorId = (SELECT constructorId FROM constructors WHERE name = 'Champion') ORDER BY T1.laps ASC;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "960": "\nSELECT AVG(fastestLapSpeed) AS average_faster_lap_speed\nFROM results\nWHERE raceId = (SELECT raceId FROM races WHERE name = '2009 Spanish Grand Prix');\nSQL_END\n\n\t----- bird -----\tformula_1",
    "961": "\nSELECT r.name, r.year\nFROM races r\nWHERE r.circuitId = (SELECT circuitId FROM circuits ORDER BY time LIMIT 1);\nSQL_END\n\n\t----- bird -----\tformula_1",
    "962": "\nSELECT COUNT(*) AS total_drivers, SUM(CASE WHEN birth_year < 1985 AND lap_number > 50 THEN 1 ELSE 0 END) AS percentage_born_before_1985\nFROM drivers\nWHERE birth_year < 1985;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "963": "\nSELECT COUNT(driverId)\nFROM drivers\nWHERE driverId IN (\n  SELECT driverId\n  FROM results\n  WHERE constructorId = (SELECT constructorId FROM constructors WHERE name = 'F-1' AND nationality = 'France')\n  GROUP BY driverId\n  HAVING MIN(time) < '02:00.00'\n)\n\n\t----- bird -----\tformula_1",
    "964": "\nSELECT DISTINCT constructorRef FROM drivers WHERE nationality = 'America';\nSQL_END\n\n\t----- bird -----\tformula_1",
    "965": "\nSELECT raceId FROM races WHERE YEAR(raceId) = 2009;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "966": "\nSELECT COUNT(driverId) AS driver_count\nFROM drivers\nWHERE race_id = 18;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "967": "\nSELECT T1.driverRef, COUNT(*) AS count\nFROM drivers AS T1\nJOIN results AS T2 ON T1.driverId = T2.driverId\nWHERE T2.positionOrder >= 3 AND T2.positionText LIKE '%Netherlands%'\nGROUP BY T1.driverRef;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "968": "\n\t----- bird -----\tformula_1",
    "969": "\nSELECT COUNT(DISTINCT driverId) AS number_of_Australian_drivers_born_1980\nFROM drivers\nWHERE nationality = 'Australia' AND dob >= '1980-01-01';\nSQL_END\n\n\t----- bird -----\tformula_1",
    "970": "\nSELECT drivers.driverRef, drivers.fname, drivers.surname\nFROM drivers\nJOIN races ON drivers.driverId = races.driverId\nWHERE drivers.constructorId = (SELECT constructorId FROM constructors WHERE nationality = 'Germany' AND year = 1980 OR 1981)\nORDER BY drivers.lapTime ASC\nLIMIT 3;\n\n\t----- bird -----\tformula_1",
    "971": "\n\t----- bird -----\tformula_1",
    "972": "\nSELECT DISTINCT r.driverId, r.constructorId \nFROM results r \nJOIN drivers d ON r.driverId = d.driverId \nWHERE d.birthYear = 1971 AND r.lapTime = (SELECT MIN(lapTime) FROM laps WHERE driverId = r.driverId);\nSQL_END\n\n\t----- bird -----\tformula_1",
    "973": "\nSELECT drivers.driverRef, drivers.fname, drivers.surname, drivers.position, drivers.positionText, drivers.laps, drivers.time, driversmilliseconds FROM drivers \nJOIN races ON drivers.driverId = races.driverId \nWHERE drivers.birthday < '1982-01-01' AND drivers.lapTime = (SELECT MAX(lapTime) FROM qualifying WHERE raceId = 1)\nORDER BY drivers.position DESC LIMIT 10;\n\n\t----- bird -----\tformula_1",
    "974": "\nSELECT DISTINCT T1.raceId, T1.driverId, T1.constructorId, T1.number, T1.position, T1.positionText, T1.laps, T1.time, T1.milliseconds, T1.fastestLap, T1.fastestLapTime, T1.statusId FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.laps = (SELECT MAX(laps) FROM results WHERE raceId = T2.raceId) ORDER BY T1.time LIMIT 1;\n\t----- bird -----\tformula_1",
    "975": "\nSELECT T1.year\nFROM races AS T1\nJOIN qualifying AS T2 ON T1.raceId = T2.raceId\nWHERE T2.positionOrder = 1\nGROUP BY T1.year\nORDER BY AVG(T1.time) ASC\nLIMIT 1;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "976": "\nSELECT drivers.driverId, drivers.fastestLapTime\nFROM drivers\nJOIN results ON drivers.driverId = results.driverId\nWHERE results.laps = 1\nORDER BY fastestLapTime DESC\nLIMIT 5;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "977": "\nSELECT COUNT(*) AS count\nFROM results\nWHERE race_id IN (\n    SELECT race_id\n    FROM qualifying\n    WHERE race_id BETWEEN 50 AND 100\n)\nAND status = 'disqualified';\nSQL_END\n\n\t----- bird -----\tformula_1",
    "978": "\nSELECT circuitRef, location FROM circuits WHERE country = 'Austria';\nSQL_END\n\n\t----- bird -----\tformula_1",
    "979": "\nSELECT raceId, COUNT(*) AS finishers\nFROM results\nGROUP BY raceId\nORDER BY finishers DESC\nLIMIT 1;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "980": "\nSELECT T2.driverRef, T1.nationality, T1.dob\nFROM races AS T1\nJOIN qualifying AS T2 ON T1.raceId = T2.raceId AND T2.number = 23\nWHERE T2.positionOrder > 1;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "981": "\nSELECT T1.year, T1.date, T1.time\nFROM races AS T1\nJOIN qualifying AS T2 ON T1.raceId = T2.raceId\nWHERE T2.driverId IS NULL\nORDER BY T1.year, T1.date, T1.time;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "982": "\nSELECT COUNT(DISTINCT T1.driverId) AS AmericanDriversDisqualified\nFROM drivers AS T1\nJOIN results AS T2 ON T1.driverId = T2.driverId\nWHERE T1.country = 'USA' AND T2.statusId = 3;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "983": "\nSELECT c.name, r.url\nFROM constructors c\nJOIN drivers d ON c.constructorId = d.driverId\nJOIN races r ON c.circuitId = r.circuitId\nWHERE c.nationality = 'Italy' AND c.country = 'Italy'\nORDER BY r.points DESC\nLIMIT 1;\n\n\t----- bird -----\tformula_1",
    "984": "\nSELECT T2.url\nFROM constructors AS T1\nJOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId\nWHERE T2.wins = (SELECT MAX(wins) FROM constructorStandings);\nSQL_END\n\n\t----- bird -----\tformula_1",
    "985": "\nSELECT r.driverId, r.constructorId, r.number, r.position, r.positionText, r.laps, r.time, r.milliseconds, r.fastestLapTime, r.fastestLapSpeed\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId AND r.raceId = (SELECT raceId FROM races WHERE name = 'French Grand Prix' LIMIT 1)\nWHERE r.laps = 3;\n\n\t----- bird -----\tformula_1",
    "986": "\nSELECT r.name, t.time AS fastestLapTime\nFROM races r\nJOIN qualifying q ON r.raceId = q.raceId\nJOIN results res ON q.driverId = res.driverId AND q.constructorId = res.constructorId\nWHERE res.grid = 1\nORDER BY res.laps DESC\nLIMIT 1;\n\n\t----- bird -----\tformula_1",
    "987": "\nSELECT AVG(t1.time) AS average_fastest_lap_time\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nWHERE YEAR(r.raceId) = 2006 AND r.constructorId = (SELECT constructorId FROM constructors WHERE constructorRef = 'United States Grand Prix')\nLIMIT 10;\n\n\t----- bird -----\tformula_1",
    "988": "\nSELECT drivers.driverRef, drivers.fname, drivers.surname, drivers.position, drivers.positionText, drivers.wins,\n       MIN(pitStops.stop) AS shortest_pit_stop_duration\nFROM drivers\nJOIN races ON drivers.driverId = races.driverId\nWHERE drivers.country = 'Germany' AND drivers.dob BETWEEN '1980-01-01' AND '1985-12-31'\nGROUP BY drivers.driverId, drivers.driverRef\nORDER BY shortest_pit_stop_duration ASC LIMIT 5;\n\n\t----- bird -----\tformula_1",
    "989": "\nSELECT r.name, r.time\nFROM races r\nJOIN qualifying q ON r.raceId = q.raceId\nWHERE q.year = 2008 AND q.driverId = (SELECT driverId FROM drivers WHERE constructorId = (SELECT constructorId FROM constructors WHERE constructorRef = 'Canadian Grand Prix' AND nationality = 'Canada'))\nORDER BY r.time DESC LIMIT 1;\n\n\t----- bird -----\tformula_1",
    "990": "\nSELECT T1.constructorRef FROM constructors AS T1 INNER JOIN races AS T2 ON T1.constructorId = T2.constructorId WHERE T2.year = 2009 AND T2.name = 'Singapore Grand Prix' ORDER BY T1.constructorRef DESC LIMIT 1 \n\t----- bird -----\tformula_1",
    "991": "\nSELECT drivers.forename, drivers.surname, drivers.dob\nFROM drivers\nWHERE drivers.forename LIKE '%Austrian%'\n  AND drivers.surname LIKE '%1981%'\n  AND drivers.surname LIKE '%1991%'\n  AND drivers.dob BETWEEN '1981-01-01' AND '1991-12-31';\n\n\t----- bird -----\tformula_1",
    "992": "\nSELECT T1.forename, T1.surname, T1.dob\nFROM drivers AS T1\nJOIN constructors AS T2 ON T1.constructorId = T2.constructorId\nWHERE T1.nationality = 'Germany' AND T1.dob BETWEEN '1971-01-01' AND '1985-12-31'\nORDER BY T1.dob DESC;\n\n\t----- bird -----\tformula_1",
    "993": "\nSELECT circuitRef, location FROM circuits WHERE name = 'Hungaroring' \n\t----- bird -----\tformula_1",
    "994": "\nSELECT T1.constructorRef, T1.name, T1.nationality \nFROM constructors AS T1 \nJOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId \nWHERE T2.circuitId = (SELECT circuitId FROM races WHERE name = 'Monaco Grand Prix' AND year BETWEEN 1980 AND 2010) \nORDER BY T1.points DESC;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "995": "\nSELECT AVG(points) AS average_score\nFROM results\nWHERE driverId = (SELECT driverId FROM drivers WHERE name = 'Lewis Hamilton')\nAND constructorId = (SELECT constructorId FROM constructors WHERE nationality = 'Turkey');\nSQL_END\n\n\t----- bird -----\tformula_1",
    "996": "\nSELECT AVG(year) AS annual_average FROM races WHERE year BETWEEN 2010 AND 2019;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "997": "\nSELECT DISTINCT constructorId, nationality FROM drivers WHERE nationality IN (SELECT nationality FROM drivers GROUP BY nationality HAVING COUNT(*) > (SELECT MAX(nationality) FROM drivers)) \n\t----- bird -----\tformula_1",
    "998": "\nSELECT COUNT(*) AS total_points, SUM(points) AS total_points_acquired\nFROM results\nWHERE rank = 91;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "999": "\nSELECT r.name\nFROM races r\nJOIN qualifying q ON r.raceId = q.raceId\nWHERE q.fastestLapTime IS NOT NULL AND q.fastestLapTime = (SELECT MIN(fastestLapTime) FROM results WHERE raceId = q.raceId);\nSQL_END\n\n\t----- bird -----\tformula_1",
    "1000": "\nSELECT circuitRef, location\nFROM circuits\nWHERE raceId = (SELECT MAX(raceId) FROM races)\nORDER BY location+country DESC\nLIMIT 1;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "1001": "\nSELECT T1.driverRef, T1.fName, T1.surname \nFROM drivers AS T1 \nJOIN qualifying AS T2 ON T1.driverId = T2.driverId \nWHERE T2.raceId = (SELECT raceId FROM races WHERE name = 'Marina Bay Street Circuit' AND year = 2008 AND round = 3) \nAND T1.position = 1;\n\n\t----- bird -----\tformula_1",
    "1002": "\nSELECT \n    c.forename + c.surname AS full_name,\n    c.nationality,\n    r.name\nFROM \n    drivers d\nJOIN \n    races r ON d.driverId = r.driverId\nWHERE \n    d.dob = (SELECT MIN(dob) FROM drivers)\nORDER BY \n    d.dob DESC LIMIT 1;\n\n\t----- bird -----\tformula_1",
    "1003": "\nSELECT COUNT(*) AS number_of_accidents\nFROM results\nWHERE statusId = 3 AND raceId = (SELECT raceId FROM races WHERE name = 'Canadian Grand Prix' LIMIT 1);\nSQL_END\n\n\t----- bird -----\tformula_1",
    "1004": "\nSELECT T1.driverRef, T1.wins\nFROM drivers AS T1\nJOIN results AS T2 ON T1.driverId = T2.driverId\nWHERE T2.raceId = (SELECT MAX(raceId) FROM races)\nORDER BY T1.position DESC LIMIT 1;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "1005": "\nSELECT MAX(t2.time) AS longest_time FROM results AS t1\nJOIN pitStops AS t2 ON t1.raceId = t2.raceId AND t1.driverId = t2.driverId;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "1006": "\nSELECT t1.time FROM races AS t1 INNER JOIN qualifying AS t2 ON t1.raceId = t2.raceId WHERE t2.constructorId = 0 AND t2.number = 1 ORDER BY t1.time LIMIT 1;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "1007": "\nSELECT MAX(t2.time) AS longest_time FROM results AS t1 INNER JOIN pitStops AS t2 ON t1.raceId = t2.raceId WHERE t1.driverId = 7 AND t1.constructorId = 1;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "1008": "\nSELECT T2.lap, T1.constructorId, T1.driverId, T1.position, T1.positionText, T1.points, T1.laps, T1.time, T1.milliseconds FROM races AS T1 INNER JOIN qualifying AS T2 ON T1.raceId = T2.raceId WHERE T1.year = 2011 AND T1.driverId = 'Lewis Hamilton' AND T1.constructorId = 'constructor1' AND T2.positionOrder = 3;\n\n\t----- bird -----\tformula_1",
    "1009": "\nSELECT r.driverId, p.stop, p.lap, t.time, t.duration, t.milliseconds\nFROM results r\nJOIN qualifying q ON r.raceId = q.raceId\nJOIN pitStops p ON q.driverId = p.driverId AND q.constructorId = p.constructorId\nWHERE q.year = 2011\nORDER BY r.lap;\n\n\t----- bird -----\tformula_1",
    "1010": "\nSELECT T2.lap FROM races AS T1 INNER JOIN qualifying AS T2 ON T1.raceId = T2.raceId WHERE T1.driverId = 7 AND T1.constructorId = 1 ORDER BY T2.lap DESC LIMIT 1;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "1011": "\nSELECT T1.driverRef, T1.forename, T1.surname\nFROM drivers AS T1\nJOIN results AS T2 ON T1.driverId = T2.driverId\nWHERE T2.laps = 0 AND T2.positionOrder = 1;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "1012": "\nSELECT T2.position, T1.name\nFROM races AS T1\nJOIN qualifying AS T2 ON T1.raceId = T2.raceId AND T1.driverId = T2.driverId\nJOIN results AS T3 ON T1.raceId = T3.raceId\nWHERE T3.fastestLap = 'Lewis Hamilton'\nORDER BY T3.laps DESC, T3.position;\n\n\t----- bird -----\tformula_1",
    "1013": "\nSELECT MAX(lap) FROM qualifying WHERE raceId = (SELECT raceId FROM races WHERE circuitId = 1 AND name = 'Austrian Grand Prix Circuit')\n\t----- bird -----\tformula_1",
    "1014": "\nSELECT races.raceId, circuits.circuitRef, laps.lap, laps.position, laps.time, lapsmilliseconds(milliseconds)\nFROM races\nJOIN qualifying ON races.raceId = qualifying.raceId\nJOIN lapTimes ON qualifying.raceId = lapTimes.raceId\nJOIN constructors ON qualifying.constructorId = constructors.constructorId\nJOIN drivers ON qualifying.driverId = drivers.driverId\nJOIN circuits ON qualifying.circuitId = circuits.circuitId\nWHERE races.year = 2023 AND races.country = 'Italy' AND races.statusId = 1;\n\n\t----- bird -----\tformula_1",
    "1015": "\nSELECT DISTINCT r.name FROM races r INNER JOIN qualifying q ON r.raceId = q.raceId WHERE q.number = 1 AND q.q1 LIKE 'A' AND q.q2 LIKE 'A' AND q.q3 LIKE 'A' AND q.position > 0 ORDER BY r.date DESC LIMIT 1 \n\t----- bird -----\tformula_1",
    "1016": "\nSELECT T2.lap, T1.driverId, T1.constructorId, T1.position, T1.positionText, T1.laps, T1.time, T1.milliseconds, T1.fastestLap, T1.fastestLapTime, T1.statusId\nFROM races AS T1\nJOIN qualifying AS T2 ON T1.raceId = T2.raceId AND T1.driverId = T2.driverId AND T1.constructorId = T2.constructorId\nWHERE T1.name = 'Austrian Grand Prix Circuit'\n  AND T1.position = (SELECT MAX(position) FROM results WHERE raceId = T1.raceId)\n  AND T1.statusId = (SELECT statusId FROM status WHERE status = 'fastest lap')\nORDER BY T1.laps DESC, T1.time DESC;\n\n\t----- bird -----\tformula_1",
    "1017": "\nSELECT circuitRef, lat, lng FROM circuits WHERE lap = 129.488;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "1018": "\nSELECT AVG(t.time) AS average_time_milliseconds\nFROM qualifying q\nJOIN races r ON q.raceId = r.raceId\nJOIN pitStops ps ON r.raceId = ps.raceId\nWHERE q.driverId = 1 AND q.constructorId = 1\nGROUP BY q.raceId;\n\n\t----- bird -----\tformula_1",
    "1019": "\nSELECT AVG(time) AS average_lap_time_milliseconds\nFROM laps\nWHERE race_id IN (\n  SELECT race_id\n  FROM races\n  WHERE country = 'Italy'\n)\nORDER BY race_id;\nSQL_END\n\n\t----- bird -----\tformula_1",
    "1020": "\nSELECT T1.player_api_id, T1.overall_rating\nFROM Player_Attributes AS T1\nJOIN League AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id\nWHERE T1.date = '2023-01-01' AND T1.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes WHERE date = '2023-01-01')\nORDER BY T1.overall_rating DESC;\n\n\t----- bird -----\teuropean_football_2",
    "1021": "\n\t----- bird -----\teuropean_football_2",
    "1022": "\nSELECT T1.preferred_foot\nFROM Player_Attributes AS T1\nJOIN League AS T2 ON T1.player_api_id = T2.id\nWHERE T1.potential = (SELECT MIN(potential) FROM Player_Attributes WHERE player_api_id = T2.id)\nORDER BY T1.potential ASC;\n\n\t----- bird -----\teuropean_football_2",
    "1023": "\nSELECT COUNT(*) AS count\nFROM Player_Attributes\nWHERE player_api_id IN (\n  SELECT player_api_id\n  FROM Team_Attributes\n  WHERE team_fifa_api_id = (SELECT team_fifa_api_id FROM Match WHERE stage = 1)\n  AND player_api_id IN (\n    SELECT player_api_id\n    FROM Player\n    WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player_Attributes WHERE player_rating BETWEEN 60 AND 65)\n  )\n)\nAND player_api_id NOT IN (\n  SELECT player_api_id\n  FROM Team_Attributes\n  WHERE team_fifa_api_id = (SELECT team_fifa_api_id FROM Match WHERE stage = 1)\n  AND player_api_id IN (\n    SELECT player_api_id\n    FROM Player\n    WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player_Attributes WHERE player_rating BETWEEN 60 AND 65)\n  )\n);\n\n\t----- bird -----\teuropean_football_2",
    "1024": "\nSELECT T1.player_api_id, T1.crossing\nFROM Player_Attributes AS T1\nJOIN Team_Attributes AS T2 ON T1.player_api_id = T2.team_fifa_api_id\nWHERE T2.date LIKE '2023-06%'\nGROUP BY T1.player_api_id\nORDER BY T1.crossing DESC\nLIMIT 5;\n\n\t----- bird -----\teuropean_football_2",
    "1025": "\n\t----- bird -----\teuropean_football_2",
    "1026": "\nSELECT T2.home_team_name AS home_team, COUNT(T1.match_api_id) AS matches\nFROM Match AS T1\nJOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id\nWHERE T1.season = '2016' AND T1.stage = 1\nGROUP BY T2.home_team_name\nORDER BY matches DESC LIMIT 1;\n\n\t----- bird -----\teuropean_football_2",
    "1027": "\nSELECT T1.player_name\nFROM Player_Attributes AS TA\nJOIN Team_Attributes AS TAT ON TA.id = TAT.team_fifa_api_id\nJOIN Match ON TAT.match_api_id = Match.id\nWHERE TAT.chanceCreationPenalties > 0\nORDER BY TAT.chanceCreationPenalties DESC\nLIMIT 10;\n\n\t----- bird -----\teuropean_football_2",
    "1028": "\nSELECT T2.name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_api_id = T2.home_team_api_id WHERE T1.team_fifa_api_id = (SELECT team_fifa_api_id FROM League WHERE name = 'Scotland Premier League' AND season = '2010') GROUP BY T2.name HAVING COUNT(T2.match_api_id) = (SELECT COUNT(*) FROM Team AS T3 INNER JOIN Match AS T4 ON T3.team_api_id = T4.home_team_api_id WHERE T3.team_fifa_api_id = (SELECT team_fifa_api_id FROM League WHERE name = 'Scotland Premier League' AND season = '2010')) \n\t----- bird -----\teuropean_football_2",
    "1029": "\nSELECT T1.team_api_id, T1.date, T1.buildUpPlaySpeed\nFROM Team_Attributes AS T1\nJOIN Match ON T1.team_fifa_api_id = Match.home_team_api_id OR T1.team_fifa_api_id = Match.away_team_api_id\nWHERE T1.buildUpPlaySpeed > (SELECT MAX(buildUpPlaySpeed) FROM Team_Attributes)\nORDER BY T1.buildUpPlaySpeed DESC;\n\n\t----- bird -----\teuropean_football_2",
    "1030": "\nSELECT T2.name AS league_name, COUNT(*) AS match_draws\nFROM Team_Attributes T1\nJOIN Match M ON T1.match_api_id = M.match_api_id\nJOIN League L ON M.league_id = L.id\nWHERE M.season = '2016' AND M.stage = 3\nGROUP BY T2.name\nORDER BY match_draws DESC;\n\n\t----- bird -----\teuropean_football_2",
    "1031": "\nSELECT DISTINCT t2.player_api_id\nFROM Player_Attributes AS t1\nJOIN Team_Attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id\nWHERE t1.sprint_speed >= 97 AND t1.date BETWEEN '2013-01-01' AND '2015-12-31';\n\n\t----- bird -----\teuropean_football_2",
    "1032": "\nSELECT T1.name AS league_name, COUNT(T2.match_api_id) AS total_matches\nFROM Team_Attributes T1\nJOIN Match T2 ON T1.team_fifa_api_id = T2.home_team_api_id OR T1.team_fifa_api_id = T2.away_team_api_id\nGROUP BY T1.team_fifa_api_id, T1.player_api_id\nORDER BY total_matches DESC;\n\n\t----- bird -----\teuropean_football_2",
    "1033": "\nSELECT AVG(height) AS average_height\nFROM Player\nWHERE birthday BETWEEN '1990-01-01' AND '1995-12-31';\n\n\t----- bird -----\teuropean_football_2",
    "1034": "\nSELECT DISTINCT player_api_id\nFROM Player_Attributes\nWHERE date = '2010-01-01'\n  AND overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes WHERE date = '2010-01-01' AND player_fifa_api_id = player_fifa_api_id)\n  AND player_api_id IN (\n    SELECT player_api_id\n    FROM Player\n    WHERE birthday LIKE '%%2010%'\n  );\n\n\t----- bird -----\teuropean_football_2",
    "1035": "\nSELECT DISTINCT t2.team_fifa_api_id \nFROM Team_Attributes AS t1 \nJOIN Match ON t1.match_api_id = Match.id \nJOIN Team AS t3 ON t1.team_fifa_api_id = t3.team_fifa_api_id \nWHERE t1.date BETWEEN '2023-01-01' AND '2023-12-31'\nGROUP BY t1.team_fifa_api_id\nHAVING COUNT(DISTINCT t1.date) > 50 AND COUNT(DISTINCT t1.date) < 60;\n\n\t----- bird -----\teuropean_football_2",
    "1036": "\nSELECT T2.team_long_name\nFROM Team_Attributes AS T1\nJOIN Match ON T1.match_api_id = Match.match_api_id\nJOIN Team AS T2 ON Match.home_team_api_id = T2.team_api_id\nWHERE T1.date LIKE '2012%'\nGROUP BY T2.team_long_name\nHAVING SUM(T1.chanceCreationPassing) >= 5;\n\n\t----- bird -----\teuropean_football_2",
    "1037": "\nSELECT \n    AVG(overall_rating) AS average_overall_rating,\n    COUNT(*) AS total_players,\n    SUM(CASE WHEN preferred_foot = 'left' THEN 1 ELSE 0 END) AS left_footed_players,\n    SUM(CASE WHEN preferred_foot = 'right' THEN 1 ELSE 0 END) AS right_footed_players\nFROM \n    Player_Attributes\nWHERE \n    player_fifa_api_id IN (\n        SELECT \n            player_fifa_api_id\n        FROM \n            Player\n        WHERE \n            birthday BETWEEN '1987-01-01' AND '1992-12-31'\n    )\nGROUP BY \n    left_footed_players, right_footed_players;\n\n\t----- bird -----\teuropean_football_2",
    "1038": "\nSELECT T1.league_id, SUM(T2.goal) AS total_goals\nFROM Team_Attributes T1\nJOIN Match M ON T1.team_fifa_api_id = M.home_team_api_id OR T1.team_fifa_api_id = M.away_team_api_id\nJOIN League L ON M.league_id = L.id\nGROUP BY T1.team_fifa_api_id, T1.team_api_id\nORDER BY total_goals DESC\nLIMIT 5;\n\n\t----- bird -----\teuropean_football_2",
    "1039": "\nSELECT AVG(overall_rating) AS average_long_shot_done\nFROM Player_Attributes\nWHERE player_api_id = (SELECT player_api_id FROM Team_Attributes WHERE team_fifa_api_id = (SELECT team_fifa_api_id FROM Match WHERE home_team_api_id = 1 AND away_team_api_id = 2));\n\n\t----- bird -----\teuropean_football_2",
    "1040": "\nSELECT T1.player_name\nFROM Player_Attributes AS TA\nJOIN Team_Attributes AS TAT ON TA.id = TAT.team_fifa_api_id\nJOIN Team AS T ON TAT.team_fifa_api_id = T.id\nWHERE TAT.height > 180\nORDER BY AVG(TA.heading_accuracy) DESC\nLIMIT 10;\n\n\t----- bird -----\teuropean_football_2",
    "1041": "\nSELECT T2.team_name\nFROM Team_Attributes AS T1\nJOIN Match ON T1.match_api_id = Match.match_api_id\nJOIN Team AS T2 ON Match.home_team_api_id = T2.team_api_id\nWHERE T1.buildUpPlayDribblingClass = 'normal' AND T1.chanceCreationPassing < (SELECT AVG(chance_creation_passing) FROM Match)\nORDER BY chance_creation_passing DESC;\n\n\t----- bird -----\teuropean_football_2",
    "1042": "\nSELECT T2.name\nFROM Team_Attributes AS T1\nJOIN Match ON T1.match_api_id = Match.id\nJOIN League AS T2 ON Match.league_id = T2.id\nWHERE T1.home_team_goal > T1.away_team_goal AND T2.season = '2009/2010';\n\n\t----- bird -----\teuropean_football_2",
    "1043": "\n\t----- bird -----\teuropean_football_2",
    "1044": "\nSELECT DISTINCT p.player_name\nFROM Player p\nWHERE p.birthday LIKE '%1970-10%'\n  AND p.player_fifa_api_id IN (\n    SELECT t2.player_fifa_api_id\n    FROM Team_Attributes t2\n    WHERE t2.team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'Real Madrid')\n  );\n\n\t----- bird -----\teuropean_football_2",
    "1045": "\nSELECT DISTINCT T1.attacking_work_rate FROM Player_Attributes AS T1 INNER JOIN Team_Attributes AS T2 ON T1.player_api_id = T2.team_api_id WHERE T2.home_team_api_id = (SELECT team_api_id FROM Team WHERE player_name = 'Franco Zennaro') AND T1.player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Franco Zennaro')\n\t----- bird -----\teuropean_football_2",
    "1046": "\nSELECT T2.buildUpPlaySpeed, T2.buildUpPlayDribbling, T2.buildUpPlayPassing, T2.buildUpPlayPositioningClass\nFROM Team_Attributes AS T1\nJOIN Match ON T1.match_api_id = Match.id\nJOIN Team AS T2 ON Match.home_team_api_id = T2.team_api_id\nWHERE T2.player_fifa_api_id = 1 AND T1.date LIKE '2023-06-%' AND T1.buildUpPlaySpeed > 0.5;\n\n\t----- bird -----\teuropean_football_2",
    "1047": "\nSELECT T3.finishing FROM Team_Attributes AS T1 INNER JOIN Player_Attributes AS T2 ON T1.team_api_id = T2.player_fifa_api_id WHERE T1.date = '2014-09-18' AND T2.player_name = 'Francois Affolter'\n\t----- bird -----\teuropean_football_2",
    "1048": "\nSELECT T1.overall_rating AS overall_rating_2011\nFROM Player_Attributes AS T1\nJOIN Player AS T2 ON T1.player_api_id = T2.id\nWHERE T2.player_name = 'Gabriel Tamas' AND T1.date LIKE '%2011';\n\n\t----- bird -----\teuropean_football_2",
    "1049": "\nSELECT COUNT(*) FROM Match WHERE season = '2015/2016' AND country_id = (SELECT id FROM Country WHERE name = 'Scotland Premier League')\n\t----- bird -----\teuropean_football_2",
    "1050": "\nSELECT T1.preferred_foot\nFROM Player_Attributes AS T1\nJOIN Team_Attributes AS T2 ON T1.player_api_id = T2.team_api_id\nWHERE T2.date LIKE '2023-01-%'\nLIMIT 1;\n\n\t----- bird -----\teuropean_football_2",
    "1051": "\nSELECT id, player_name\nFROM Player\nWHERE potential = (SELECT MAX(potential) FROM Player);\n\n\t----- bird -----\teuropean_football_2",
    "1052": "\nSELECT COUNT(*) AS total_players\nFROM Player\nWHERE weight < 130\nGROUP BY player_api_id\nHAVING SUM(potential) - SUM(preferred_foot) = 0;\nSQL_END\n\n\t----- bird -----\teuropean_football_2",
    "1053": "\nSELECT T2.team_short_name\nFROM Team_Attributes AS T1\nJOIN Match ON T1.match_api_id = Match.match_api_id\nJOIN Team AS T2 ON Match.home_team_api_id = T2.team_api_id\nWHERE T1.chanceCreationPassingClass = 'Risky'\nORDER BY T2.team_short_name;\n\n\t----- bird -----\teuropean_football_2",
    "1054": "\n\t----- bird -----\teuropean_football_2",
    "1055": "\nSELECT date FROM Player WHERE overall_rating = ( SELECT MAX(overall_rating) FROM Player ) ORDER BY date LIMIT 1;\nSQL_END\n\n\t----- bird -----\teuropean_football_2",
    "1056": "\n\t----- bird -----\teuropean_football_2",
    "1057": "\nSELECT AVG(home_team_goal) AS average_home_team_goal\nFROM Match\nWHERE season = '2010/2011'\n  AND country_id = (SELECT team_api_id FROM Team WHERE name = 'Poland');\nSQL_END\n\n\t----- bird -----\teuropean_football_2",
    "1058": "\nSELECT T2.player_api_id, T1.player_name, T2.finishing\nFROM Player_Attributes AS T1\nJOIN Team_Attributes AS T2 ON T1.player_fifa_api_id = T2.team_fifa_api_id\nWHERE T1.player_api_id = (SELECT player_api_id FROM Player ORDER BY finishing DESC LIMIT 1)\nORDER BY finishing DESC;\n\n\t----- bird -----\teuropean_football_2",
    "1059": "\nSELECT DISTINCT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.overall_rating > 180;\nSQL_END\n\n\t----- bird -----\teuropean_football_2",
    "1060": "\n\t----- bird -----\teuropean_football_2",
    "1061": "\nSELECT COUNT(*) AS num_players\nFROM Player\nWHERE player_name = 'Adam' AND weight > 170;\nSQL_END\n\n\t----- bird -----\teuropean_football_2",
    "1062": "\nSELECT DISTINCT T1.player_name\nFROM Player_Attributes AS TA\nJOIN Team_Attributes AS TA2 ON TA.id = TA2.team_fifa_api_id AND TA2.team_api_id = (SELECT id FROM Team WHERE team_api_id = (SELECT id FROM Team WHERE name = 'Team 1'))\nJOIN Player AS P1 ON TA.player_fifa_api_id = P1.player_fifa_api_id\nWHERE T1.date BETWEEN '2008-01-01' AND '2010-12-31'\nGROUP BY T1.player_name\nHAVING AVG(TA.overall_rating) > 80;\n\n\t----- bird -----\teuropean_football_2",
    "1063": "\nSELECT `potential` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Team_Attributes` WHERE `team_fifa_api_id` = (SELECT `team_fifa_api_id` FROM `Team` WHERE `team_name` = 'Aaron Doran') LIMIT 1)\n\t----- bird -----\teuropean_football_2",
    "1064": "\nSELECT DISTINCT p.player_name\nFROM Player p\nJOIN Player_Attributes pa ON p.id = pa.player_fifa_api_id\nWHERE pa.preferred_foot = 'left';\n\n\t----- bird -----\teuropean_football_2",
    "1065": "\nSELECT DISTINCT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.buildUpPlaySpeedClass = 'fast' \n\t----- bird -----\teuropean_football_2",
    "1066": "\n\t----- bird -----\teuropean_football_2",
    "1067": "\nSELECT T2.team_short_name\nFROM Team_Attributes AS T1\nJOIN Match ON T1.match_api_id = Match.match_api_id\nJOIN Team AS T2 ON Match.home_team_api_id = T2.team_api_id\nWHERE T1.buildUpPlayPassing > 70;\nSQL_END\n\n\t----- bird -----\teuropean_football_2",
    "1068": "\nSELECT AVG(overall_rating) AS average_overall_rating\nFROM Player_Attributes\nWHERE player_api_id IN (\n  SELECT player_api_id\n  FROM Team_Attributes\n  WHERE team_api_id = (SELECT team_api_id\n                       FROM Match\n                       WHERE season = '2015-2016'\n                         AND stage = 1)\n);\n\n\t----- bird -----\teuropean_football_2",
    "1069": "\nSELECT T1.player_name\nFROM Player_Attributes AS TA\nJOIN Team_Attributes AS TAAT ON TA.id = TAAT.team_fifa_api_id AND TAAT.team_api_id = T1.id\nJOIN Team AS T2 ON T1.team_api_id = T2.id\nWHERE T2.height IS NULL\nORDER BY T1.height ASC;\n\n\t----- bird -----\teuropean_football_2",
    "1070": "\n\t----- bird -----\teuropean_football_2",
    "1071": "\nSELECT DISTINCT T2.team_short_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.buildUpPlaySpeed = 31 AND T1.buildUpPlayDribbling = 53 AND T1.buildUpPlayPassing = 32 GROUP BY T2.team_short_name HAVING COUNT(T1.team_api_id) = 1 SQL_END\n\t----- bird -----\teuropean_football_2",
    "1072": "\n\t----- bird -----\teuropean_football_2",
    "1073": "\nSELECT COUNT(*) FROM Match WHERE country_id = (SELECT id FROM League WHERE name = 'Germany 1 Bundesliga') AND season = '2008-09' AND stage = 1;\n\t----- bird -----\teuropean_football_2",
    "1074": "\n\t----- bird -----\teuropean_football_2",
    "1075": "\nSELECT T2.player_name\nFROM Player_Attributes AS T1\nJOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id\nWHERE T1.balance_score = 61 AND T1.potential = 61;\n\n\t----- bird -----\teuropean_football_2",
    "1076": "\nSELECT AVG(T1.ball_control) - AVG(T2.ball_control)\nFROM Player_Attributes AS T1\nJOIN Player AS T2 ON T1.player_api_id = T2.id\nWHERE T1.player_name = 'Abdou Diallo' AND T2.player_name = 'Aaron Appindangoye';\n\n\t----- bird -----\teuropean_football_2",
    "1077": "\n\t----- bird -----\teuropean_football_2",
    "1078": "\nSELECT `Player_Attributes`.`player_api_id` AS `player_api_id`, `Player_Attributes`.`player_fifa_api_id` AS `player_fifa_api_id`, `Player_Attributes`.`date`, `Player_Attributes`.`overall_rating`, `Player_Attributes`.`potential`, `Player_Attributes`.`preferred_foot`, `Player_Attributes`.`attacking_work_rate`, `Player_Attributes`.`defensive_work_rate`, `Player_Attributes`.`crossing`, `Player_Attributes`.`finishing`, `Player_Attributes`.`heading_accuracy`, `Player_Attributes`.`short_passing`, `Player_Attributes`.`volleys`, `Player_Attributes`.`dribbling`, `Player_Attributes`.`curve`, `Player_Attributes`.`free_kick_accuracy`, `Player_Attributes`.`long_passing`, `Player_Attributes`.`ball_control`, `Player_Attributes`.`acceleration`, `Player_Attributes`.`sprint_speed`, `Player_Attributes`.`agility`, `Player_Attributes`.`reactions`, `Player_Attributes`.`balance`, `Player_Attributes`.`shot_power`, `Player_Attributes`.`jumping`, `Player_Attributes`.`stamina`, `Player_Attributes`.`strength`, `Player_Attributes`.`long_shots`, `Player_Attributes`.`aggression`, `Player_Attributes`.`interceptions`, `Player_Attributes`.`positioning`, `Player_Attributes`.`vision`, `Player_Attributes`.`penalties`, `Player_Attributes`.`marking`, `Player_Attributes`.`standing_tackle`, `Player_Attributes`.`sliding_tackle`, `Player_Attributes`.`gk_diving`, `Player_Attributes`.`gk_handling`, `Player_Attributes`.`gk_kicking`, `Player_Attributes`.`gk_positioning`, `Player_Attributes`.`gk_reflexes`\n\n\t----- bird -----\teuropean_football_2",
    "1079": "\n\t----- bird -----\teuropean_football_2",
    "1080": "\nSELECT COUNT(*) AS remaining_players\nFROM Player_Attributes\nWHERE attacking_work_rate = 'left';\n\n\t----- bird -----\teuropean_football_2",
    "1081": "\n\t----- bird -----\teuropean_football_2",
    "1082": "\n\t----- bird -----\teuropean_football_2",
    "1083": "\nSELECT T1.player_name\nFROM Player_Attributes AS TA\nJOIN Team_Attributes AS TAAT ON TA.id = TAAT.team_fifa_api_id AND TAAT.team_api_id = T1.id\nWHERE TAAT.buildUpPlaySpeedClass = 'Strong' AND TAAT.chanceCreationPassingClass = 'Strong'\nORDER BY TA.overall_rating DESC;\n\n\t----- bird -----\teuropean_football_2",
    "1084": "\nSELECT COUNT(*) AS count\nFROM Player_Attributes\nWHERE player_fifa_api_id IN (\n  SELECT player_fifa_api_id\n  FROM Player\n  WHERE birthday < '1986-01-01'\n)\nAND position = 'defensive_work_rate'\nAND team_api_id IN (\n  SELECT team_api_id\n  FROM Match\n  WHERE season = '2023-24' AND stage = 1 AND date LIKE '%attack%'\n);\n\n\t----- bird -----\teuropean_football_2",
    "1085": "\nSELECT T1.player_name, T2.crossing\nFROM Player_Attributes AS T1\nJOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id\nWHERE T1.player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Ariel Borysiuk')\n  AND T2.crossing > (SELECT T3.crossing FROM Player_Attributes AS T3 JOIN Team_Attributes AS T4 ON T3.team_api_id = T4.team_api_id WHERE T3.player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Arouna Kone'))\n  AND T1.player_api_id != (SELECT player_api_id FROM Player WHERE player_name = 'Ariel Borysiuk')\nORDER BY T2.crossing DESC;\n\n\t----- bird -----\teuropean_football_2",
    "1086": "\n\t----- bird -----\teuropean_football_2",
    "1087": "\nSELECT COUNT(*) AS count\nFROM Player\nWHERE height > 180 AND (vitality_volley_score > 70 OR vitality_volley_score IS NULL);\nSQL_END\n\n\t----- bird -----\teuropean_football_2",
    "1088": "\nSELECT T1.player_name\nFROM Player_Attributes AS TA\nJOIN Team_Attributes AS TAAT ON TA.id = TAAT.team_fifa_api_id AND TAAT.team_api_id = TAA.id\nJOIN Match AS M ON TAAT.match_api_id = M.match_api_id\nWHERE (TA.volley_score > 70) AND (TA.dribbling_score > 70)\n\n\t----- bird -----\teuropean_football_2",
    "1089": "\nSELECT COUNT(*) FROM Match WHERE season = '2008/2009' AND country_id = (SELECT id FROM Country WHERE name = 'Belgium')\n\t----- bird -----\teuropean_football_2",
    "1090": "\nSELECT T2.long_passing FROM Player_Attributes AS T1 INNER JOIN Team_Attributes AS T2 ON T1.player_api_id = T2.team_api_id WHERE T1.date = 'oldest' ORDER BY T1.date DESC LIMIT 1;\nSQL_END\n\n\t----- bird -----\teuropean_football_2",
    "1091": "\nSELECT COUNT(DISTINCT T1.match_api_id) FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T2.country_id = 3 AND T1.date LIKE '09-04%'\n\t----- bird -----\teuropean_football_2",
    "1092": "\nSELECT T1.league_id, T1.name\nFROM Team_Attributes AS T1\nJOIN League AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id\nWHERE T2.season = '2008-2009'\nGROUP BY T1.team_fifa_api_id, T1.team_api_id\nORDER BY COUNT(T1.id) DESC;\n\n\t----- bird -----\teuropean_football_2",
    "1093": "\nSELECT AVG(overall_rating) AS average_overall_rating\nFROM Player\nWHERE player_fifa_api_id IN (\n  SELECT player_fifa_api_id\n  FROM Player\n  WHERE birthday < '1986-01-01'\n)\n\n\t----- bird -----\teuropean_football_2",
    "1094": "\nSELECT \n    ABS((overall_rating_Ari - overall_rating_Paulin) / overall_rating_Ari * 100) AS percentage_difference\nFROM \n    Player_Attributes\nWHERE \n    player_api_id = (SELECT player_api_id FROM Team_Attributes WHERE team_fifa_api_id = (SELECT team_fifa_api_id FROM Team WHERE team_name = 'Ariel Borysiuk'))\nAND \n    player_api_id = (SELECT player_api_id FROM Team_Attributes WHERE team_fifa_api_id = (SELECT team_fifa_api_id FROM Team WHERE team_name = 'Paulin Puel')))\n\n\t----- bird -----\teuropean_football_2",
    "1095": "\nSELECT AVG(buildUpPlaySpeed) AS average_build_up_play_speed\nFROM Match\nJOIN Team ON Match.home_team_api_id = Team.team_api_id\nJOIN Player ON Team.home_player_X1 = Player.player_fifa_api_id;\n\n\t----- bird -----\teuropean_football_2",
    "1096": "\n\t----- bird -----\teuropean_football_2",
    "1097": "\nSELECT overall_rating, crossing FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Team_Attributes WHERE team_fifa_api_id = (SELECT team_fifa_api_id FROM Match WHERE home_team_api_id = 1 AND stage = 1)) AND player_name = 'Aaron Lennox'\n\t----- bird -----\teuropean_football_2",
    "1098": "\nSELECT T1.chanceCreationPassing, T1.chanceCreationPassingClass \nFROM Match AS T1 \nJOIN Team_Attributes AS T2 ON T1.match_api_id = T2.team_fifa_api_id \nWHERE T2.team_api_id = (SELECT team_api_id FROM Team WHERE team_name = 'Ajax') AND T1.home_team_api_id = 1;\n\n\t----- bird -----\teuropean_football_2",
    "1099": "\n\t----- bird -----\teuropean_football_2",
    "1100": "\n\t----- bird -----\teuropean_football_2",
    "1101": "\nSELECT AVG(goal) AS average_goals_made\nFROM Match\nWHERE team_api_id = (SELECT team_api_id FROM Team WHERE team_name = 'Parma')\n  AND league_id = (SELECT league_id FROM League WHERE country_id = (SELECT id FROM Country WHERE name = 'Italy'))\n  AND stage = 1;\n\n\t----- bird -----\teuropean_football_2",
    "1102": "\nSELECT T1.player_name\nFROM Player_Attributes AS TA\nJOIN Team_Attributes AS TAAT ON TA.id = TAAT.team_fifa_api_id AND TAAT.team_api_id = (SELECT team_api_id FROM Team WHERE date = '2016-06-23' AND stage = 1)\nWHERE TAAT.overall_rating = 77\nORDER BY TA.date ASC LIMIT 1;\n\n\t----- bird -----\teuropean_football_2",
    "1103": "\n\t----- bird -----\teuropean_football_2",
    "1104": "\nSELECT T1.potential FROM Player_Attributes AS T1 INNER JOIN League AS T2 ON T1.player_api_id = T2.player_fifa_api_id WHERE T2.date = '2010-08-30' AND T1.player_fifa_api_id = 5\n\t----- bird -----\teuropean_football_2",
    "1105": "\nSELECT T2.attacking_work_rate FROM Player_Attributes AS T1 INNER JOIN Team_Attributes AS T2 ON T1.player_api_id = T2.team_api_id WHERE T1.date = '2015-05-01' AND T1.player_fifa_api_id = 3;\n\n\t----- bird -----\teuropean_football_2",
    "1106": "\nSELECT DISTINCT T1.defensive_work_rate FROM Player_Attributes AS T1 INNER JOIN Team_Attributes AS T2 ON T1.player_api_id = T2.team_api_id WHERE T1.player_name = 'Kevin Berigaud' AND T2.date = '2013/02/22' \n\t----- bird -----\teuropean_football_2",
    "1107": "\nSELECT T1.date FROM Player_Attributes AS T1 INNER JOIN Team_Attributes AS T2 ON T1.player_api_id = T2.team_api_id WHERE T2.home_team_api_id = (SELECT team_api_id FROM Team WHERE team_name = 'Kevin Constant') AND T1.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Kevin Constant'))\n\n\t----- bird -----\teuropean_football_2",
    "1108": "\n\t----- bird -----\teuropean_football_2",
    "1109": "\n\t----- bird -----\teuropean_football_2",
    "1110": "\nSELECT T1.buildUpPlayPassingClass FROM Team_Attributes AS T1 INNER JOIN League AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T2.name = 'FC Lorient' AND T1.date = '2010/02/22' \n\t----- bird -----\teuropean_football_2",
    "1111": "\nSELECT T1.chanceCreationPassingClass FROM Team_Attributes AS T1 INNER JOIN Match AS T2 ON T1.team_fifa_api_id = T2.home_team_api_id WHERE T2.date = '2013-09-20' AND T2.match_api_id = (SELECT match_api_id FROM Team_Attributes WHERE team_name = 'PEC Zwolle') END \n\t----- bird -----\teuropean_football_2",
    "1112": "\n\t----- bird -----\teuropean_football_2",
    "1113": "\n\t----- bird -----\teuropean_football_2",
    "1114": "\nSELECT AVG(overall_rating) AS average_overall_rating\nFROM Player_Attributes\nWHERE player_api_id = (SELECT player_api_id FROM Team_Attributes WHERE team_fifa_api_id = (SELECT team_fifa_api_id FROM Match WHERE date BETWEEN '2007-02-22' AND '2016-04-21' AND stage = 3));\n\n\t----- bird -----\teuropean_football_2",
    "1115": "\nSELECT \n    (Landon_Donovan_overall_rating - Jordan_Bowery_overall_rating) * 100 / Landon_Donovan_overall_rating AS percentage\nFROM \n    Player_Attributes\nWHERE \n    player_api_id = (SELECT player_api_id FROM Team_Attributes WHERE team_api_id = (SELECT team_api_id FROM Match WHERE date = '2013-07-12' AND stage = 1))\nORDER BY \n    Landon_Donovan_overall_rating DESC;\n\n\t----- bird -----\teuropean_football_2",
    "1116": "\nSELECT player_name FROM Player_Attributes WHERE player_api_id IN (SELECT player_fifa_api_id FROM Team_Attributes WHERE team_api_id = (SELECT team_api_id FROM Match ORDER BY chance_creationPassing DESC LIMIT 5)) GROUP BY player_name HAVING COUNT(*) > 1 SQL_END\n\t----- bird -----\teuropean_football_2",
    "1117": "\nSELECT player_api_id FROM Player WHERE id IN (SELECT MAX(id) FROM Player GROUP BY player_api_id ORDER BY overall_rating DESC LIMIT 10);\nSQL_END\n\n\t----- bird -----\teuropean_football_2",
    "1118": "\nSELECT DISTINCT T1.player_name\nFROM Player AS T1\nJOIN Team_Attributes AS T2 ON T1.id = T2.team_fifa_api_id\nWHERE T2.date LIKE '2023-06%'\nAND T2.player_api_id IN (\n  SELECT T3.id\n  FROM League AS T3\n  JOIN Match AS M ON T3.id = M.country_id\n  WHERE M.home_team_api_id = T1.id AND M.stage = 1\n)\nORDER BY T1.player_name;\n\n\t----- bird -----\teuropean_football_2",
    "1119": "\nSELECT COUNT(home_goal) AS home_team_goals\nFROM Match\nWHERE team_api_id = (SELECT team_api_id FROM Team WHERE player_name = 'Aaron Lennon');\nSQL_END\n\n\t----- bird -----\teuropean_football_2",
    "1120": "\nSELECT SUM(T1.home_goal) AS away_team_goal FROM Match AS T1 INNER JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id WHERE T2.player_name IN ('Daan Smith', 'Filipe Ferreira')\n\n\t----- bird -----\teuropean_football_2",
    "1121": "\nSELECT SUM(home_team_goal) AS total_home_team_goals\nFROM Match\nWHERE home_player_10 IS NOT NULL AND home_player_10 BETWEEN 30 AND 39;\n\n\t----- bird -----\teuropean_football_2",
    "1122": "\nSELECT T1.player_name FROM Player AS T1 INNER JOIN League AS T2 ON T1.player_api_id = T2.player_fifa_api_id WHERE T2.name = 'State 10' GROUP BY T1.player_name ORDER BY T1.overall_rating DESC \n\t----- bird -----\teuropean_football_2",
    "1123": "\nSELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Team_Attributes AS T2 ON T1.player_api_id = T2.team_api_id WHERE T1.potential = (SELECT MAX(potential) FROM Player_Attributes)\nORDER BY T1.potential DESC;\nSQL_END\n\n\t----- bird -----\teuropean_football_2",
    "1124": "\nSELECT T1.player_name FROM Player_Attributes AS TA JOIN Team_Attributes AS TA2 ON TA.player_api_id = TA2.team_api_id WHERE TA.date LIKE '2023-06%' AND TA2.date LIKE '2023-07%' GROUP BY TA.player_name HAVING SUM(TA.attacking_work_rate) > 1\n\n\t----- bird -----\teuropean_football_2",
    "1125": "\nSELECT T1.id, T1.player_name\nFROM Player_Attributes AS T1\nJOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id\nWHERE T1.finishing = 1\nORDER BY T1.date DESC\nLIMIT 1;\n\n\t----- bird -----\teuropean_football_2",
    "1126": "\nSELECT DISTINCT T1.player_name FROM Player AS T1 INNER JOIN Team_Attributes AS T2 ON T1.id = T2.team_fifa_api_id WHERE T2.team_api_id IN (SELECT team_api_id FROM Team WHERE country_id = 3) AND T1.country_id = 3 GROUP BY T1.player_name HAVING COUNT(*) > 1 SQL_END\n\t----- bird -----\teuropean_football_2",
    "1127": "\nSELECT T1.team_name, T2.country_id\nFROM Team_Attributes AS T1\nJOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_fifa_api_id\nWHERE T1.buildUpPlaySpeedClass = 'high' AND T1.buildUpPlayPassingClass = 'high' AND T1.chanceCreationPassingClass = 'high'\nAND T1.chanceCreationCrossingClass = 'high' AND T1.chanceCreationShootingClass = 'high'\nAND T1.chanceCreationPositioningClass = 'high' AND T1.defenceTeamWidthClass = 'high' AND T1.defenceDefenderLineClass = 'high' AND T1.positioningClass = 'high' AND T1.sprint_speed > 90\nORDER BY T2.player_name;\n\n\t----- bird -----\teuropean_football_2",
    "1128": "\n\t----- bird -----\teuropean_football_2",
    "1129": "\nSELECT DISTINCT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.date LIKE '2023-06%' AND T1.buildUpPlaySpeedClass = 'slow speed' GROUP BY T2.team_long_name SQL_END\n\t----- bird -----\teuropean_football_2",
    "1130": "\n\t----- bird -----\teuropean_football_2",
    "1131": "\n\t----- bird -----\teuropean_football_2",
    "1132": "\nSELECT T1.player_name\nFROM Player AS T1\nJOIN Team_Attributes AS T2 ON T1.id = T2.team_fifa_api_id\nWHERE T2.home_team_api_id IS NULL AND T2.team_api_id IN (\n    SELECT T3.team_fifa_api_id\n    FROM Team AS T3\n    WHERE T3.player_api_id = T1.player_api_id\n)\nORDER BY T1.overall_rating DESC\nLIMIT 3;\n\n\t----- bird -----\teuropean_football_2",
    "1133": "\nSELECT COUNT(*) AS count\nFROM Player\nWHERE player_name = 'Aaron'\n  AND birthday >= '1990-01-01';\n\n\t----- bird -----\teuropean_football_2",
    "1134": "\nSELECT T1.jumping - T2.jumping AS difference\nFROM Player_Attributes AS T1\nJOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id AND T1.player_fifa_api_id = T2.player_fifa_api_id\nWHERE T1.id = 6 AND T2.id = 23;\n\n\t----- bird -----\teuropean_football_2",
    "1135": "\nSELECT T1.player_api_id\nFROM Player_Attributes AS TA\nJOIN Team_Attributes AS TAT ON TA.id = TAT.team_fifa_api_id\nJOIN Player AS P ON TAT.home_player_X1 = P.player_api_id\nWHERE TAT.chanceCreationCrossingClass = 'right' AND TAT.chanceCreationPassingClass = 'cross'\nLIMIT 3;\n\n\t----- bird -----\teuropean_football_2",
    "1136": "\nSELECT COUNT(DISTINCT player_api_id)\nFROM Player_Attributes\nWHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE preferred_foot = 'left' AND attacking_work_rate IS NOT NULL) \n  AND player_api_id IN (\n    SELECT DISTINCT player_api_id\n    FROM Team_Attributes\n    WHERE team_api_id = (SELECT team_api_id FROM Match WHERE stage = 1)\n      AND date LIKE '%crossing%'\n  )\n  AND player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE preferred_foot = 'left' AND attacking_work_rate IS NOT NULL)\n\n\t----- bird -----\teuropean_football_2",
    "1137": "\nSELECT \n    COUNT(*) AS total_players,\n    SUM(CASE WHEN strength > 80 THEN 1 ELSE 0 END) AS players_with_strength_more_than_80\nFROM \n    Player_Attributes\nWHERE \n    player_api_id IN (\n        SELECT \n            player_api_id\n        FROM \n            Player_Attributes\n        WHERE \n            player_api_id IN (\n                SELECT \n                    player_api_id\n                FROM \n                    Player_Attributes\n                WHERE \n                    strength > 80\n            )\n    );\n\n\t----- bird -----\teuropean_football_2",
    "1138": "\n\t----- bird -----\teuropean_football_2",
    "1139": "\nSELECT T1.home_team_goal, T1.away_team_goal\nFROM Match AS T1\nJOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id\nJOIN Team AS T3 ON T1.away_team_api_id = T3.team_api_id;\n\n\t----- bird -----\teuropean_football_2",
    "1140": "\nSELECT `Player_Attributes`.`sprint_speed`, `Player_Attributes`.`agility`, `Player_Attributes`.`acceleration` FROM `Player_Attributes` WHERE `Player_Attributes`.`player_api_id` = (SELECT `Player_Attributes`.`player_api_id` FROM `Player_Attributes` INNER JOIN Player ON `Player_Attributes`.`player_api_id` = `Player`.`player_api_id` WHERE `Player_Attributes`.`player_fifa_api_id` = (SELECT `Player_Attributes`.`player_fifa_api_id` FROM `Player_Attributes` INNER JOIN Player ON `Player_Attributes`.`player_api_id` = `Player`.`player_api_id` WHERE `Player_Attributes`.`player_name` = 'Alexis Blin') LIMIT 1\n\n\t----- bird -----\teuropean_football_2",
    "1141": "\nSELECT T1.chanceCreationPassingClass, T1.chanceCreationCrossingClass, T1.chanceCreationShootingClass FROM Team_Attributes AS T1 INNER JOIN Player_Attributes AS T2 ON T1.team_api_id = T2.player_fifa_api_id WHERE T2.player_api_id = 38459607 AND T2.player_name = 'KSV Cercle Brugge' \n\t----- bird -----\teuropean_football_2",
    "1142": "\n\t----- bird -----\teuropean_football_2",
    "1143": "\n\t----- bird -----\teuropean_football_2",
    "1144": "\nSELECT T1.player_api_id, T1.player_name, T2.weight, T2.height, T2.birthday, T3.date, T4.chance_creation_passing, T5.chance_creation_crossing, T6.chance_creation_shooting, T7.chance_creation_positioning, T8.chance_creation_defending\nFROM Player_Attributes AS T1\nJOIN Team_Attributes AS T2 ON T1.player_api_id = T2.team_fifa_api_id AND T1.player_name = 'heaviest_weight_player'\nJOIN Match AS T3 ON T1.player_api_id = T3.home_team_api_id OR T1.player_api_id = T3.away_team_api_id\nJOIN Team AS T4 ON T3.team_api_id = T4.team_api_id\nJOIN League AS T5 ON T4.country_id = T5.id\nJOIN Country AS T6 ON T5.country_id = T6.id\nJOIN Player_Attributes AS T7 ON T7.player_api_id = T1.player_api_id AND T7.player_name = 'heaviest_weight_player'\nJOIN Team_Attributes AS T8 ON T8.team_fifa_api_id = T7.team_fifa_api_id AND T8.team_api_id = T5.id\nJOIN Match AS T9 ON T8.team_api_id = T9.home_team_api_id OR T8.team_api_id = T9.away_team_api_id\nJOIN Team AS T10 ON T9.team_api_id = T10.team_api_id\nJOIN League AS T11 ON T10.country_id = T11.id\nJOIN Country AS T12 ON T11.country_id = T12.id\nWHERE T1.player_fifa_api_id = 'heaviest_weight_player'\nORDER BY T3.date DESC;\n\n\t----- bird -----\teuropean_football_2",
    "1145": "\n\t----- bird -----\teuropean_football_2",
    "1146": "\nSELECT T2.team_name AS away_team_name\nFROM Match AS M\nJOIN Team AS T1 ON M.home_team_api_id = T1.team_api_id\nJOIN Team AS T2 ON M.away_team_api_id = T2.team_api_id\nWHERE M.match_api_id = (SELECT MAX(match_api_id) FROM Match)\nORDER BY T2.goal DESC\nLIMIT 1;\n\n\t----- bird -----\teuropean_football_2",
    "1147": "\n\t----- bird -----\teuropean_football_2",
    "1148": "\nSELECT COUNT(*) AS total_players, SUM(overall_strength) AS average_strength\nFROM Player_Attributes\nWHERE player_fifa_api_id IN (\n  SELECT player_fifa_api_id\n  FROM Player\n  WHERE height < 180\n)\nGROUP BY player_fifa_api_id\nHAVING AVG(overall_strength) > 70;\n\n\t----- bird -----\teuropean_football_2",
    "1149": "\nSELECT \n    COUNT(*) AS Inpatient,\n    COUNT(*) - (COUNT(DISTINCT T1.ID) * 0.5) AS Outpatient,\n    (COUNT(T2.ID) / COUNT(T1.ID)) * 100 AS Deviation\nFROM \n    Examination E1\nJOIN \n    Patient P1 ON E1.ID = P1.ID\nLEFT JOIN \n    Laboratory L1 ON E1.ID = L1.ID\nLEFT JOIN \n    Examination E2 ON E1.ID = E2.ID\nJOIN \n    Patient P2 ON E2.ID = P2.ID\nWHERE \n    (P1.SEX = 'M' AND P2.SEX = 'M') OR (P1.SEX = 'F' AND P2.SEX = 'F')\nGROUP BY \n    E1.Examination Date, E1.ACL, E1.ANA, E1.aCL, E1.Diagnosis\nORDER BY \n    Deviation DESC;\n\n\t----- bird -----\tthrombosis_prediction",
    "1150": "\nSELECT COUNT(*) AS Total, SUM(CASE WHEN Sex = 'F' THEN 1 ELSE 0 END) / COUNT(*) * 100 AS FemalePercentage\nFROM Patient\nWHERE BirthDate > '1930-01-01';\n\n\t----- bird -----\tthrombosis_prediction",
    "1151": "\nSELECT COUNT(*) AS Inpatients\nFROM Examination\nWHERE YEAR(Examination Date) BETWEEN 1930 AND 1940;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1152": "\nSELECT \n    SUM(CASE WHEN T1.Diagnosis = 'SLE' THEN 1 ELSE 0 END) / COUNT(T2.ID) AS ratio\nFROM \n    Examination E1\nJOIN \n    Patient P1 ON E1.ID = P1.ID\nJOIN \n    Laboratory L1 ON E1.ID = L1.ID\nWHERE \n    T1.Diagnosis = 'SLE'\nGROUP BY \n    T1.ID;\n\n\t----- bird -----\tthrombosis_prediction",
    "1153": "\nSELECT T1.Examination Date\nFROM Examination AS T1\nJOIN Patient AS T2 ON T1.ID = T2.ID\nWHERE T2.Diagnosis = '30609';\n\n\t----- bird -----\tthrombosis_prediction",
    "1154": "\nSELECT T1.ID, T1.BIRTHDAY, T1.Examination Date\nFROM Examination AS T1\nJOIN Patient AS T2 ON T1.ID = T2.ID\nWHERE T2.ID = 163109;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1155": "\nSELECT ID, SEX, Birthday FROM Patient WHERE LDH > 150;\n\n\t----- bird -----\tthrombosis_prediction",
    "1156": "\nSELECT ID, Birthday FROM Patient WHERE Diagnosis = 'Positive Coagulation';\n\n\t----- bird -----\tthrombosis_prediction",
    "1157": "\nSELECT ID, Sex, Diagnosis FROM Examination WHERE Diagnosis = 'Severe Thrombosis';\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1158": "\nSELECT ID, Diagnosis FROM Patient WHERE Birthday = '1937-01-01';\n\n\t----- bird -----\tthrombosis_prediction",
    "1159": "\nSELECT ID, Sex, Diagnosis FROM Examination WHERE aCL < 3.5;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1160": "\nSELECT COUNT(*) AS total_patients, SUM(CASE WHEN TREATMENT = 'Total Protein Not Within Normal Range' THEN 1 ELSE 0 END) / COUNT(*) * 100 AS percentage\nFROM Examination E\nJOIN Patient P ON E.ID = P.ID\nWHERE P.SEX = 'Female';\n\n\t----- bird -----\tthrombosis_prediction",
    "1161": "\nSELECT AVG(ANA) AS AverageAntiCardiolipinAbundance\nFROM Examination\nWHERE Diagnosis = 'In-patient age 50 and above';\n\n\t----- bird -----\tthrombosis_prediction",
    "1162": "\nSELECT COUNT(*) AS count\nFROM Examination e\nJOIN Patient p ON e.ID = p.ID\nWHERE YEAR(e.Examination Date) = 1997 AND p.Diagnosis = 'Female';\n\n\t----- bird -----\tthrombosis_prediction",
    "1163": "\nSELECT MIN(T1.Birthday) AS Age\nFROM Examination E1\nJOIN Patient P1 ON E1.ID = P1.ID\nWHERE E1.Examination Date = 'initial arrival'\nORDER BY E1.ID;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1164": "\nSELECT COUNT(*) AS count\nFROM Examination\nWHERE Diagnosis = 'Thrombosis'\n  AND YEAR(Examination Date) = 1997;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1165": "\nSELECT MIN(T1.Birthday) - MAX(T2.Birthday)\nFROM Examination AS T1\nJOIN Patient AS T2 ON T1.ID = T2.ID\nWHERE T1.ACL = 'normal' AND T1.Diagnosis = 'normal';\n\n\t----- bird -----\tthrombosis_prediction",
    "1166": "\nSELECT T1.ID, T1.Symptoms FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Admission LIKE '0%' AND T2.Diagnosis IS NULL ORDER BY T1.Examination Date LIMIT 1;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1167": "\nSELECT \n    DATE_FORMAT(DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH), '%M') AS month,\n    COUNT(*) AS average_patients_per_month\nFROM \n    Examination E1\nJOIN \n    Patient P ON E1.ID = P.ID\nWHERE \n    E1.Examination Date >= '1998-12-31'\nGROUP BY \n    DATE_FORMAT(DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH), '%M')\nORDER BY \n    month;\n\n\t----- bird -----\tthrombosis_prediction",
    "1168": "\nSELECT T1.ID, T1.Birthday, T2.Age\nFROM Examination AS T1\nJOIN Patient AS T2 ON T1.ID = T2.ID\nWHERE T1.Examination Date = (SELECT MAX(Examination Date) FROM Examination);\n\n\t----- bird -----\tthrombosis_prediction",
    "1169": "\nSELECT \n    COUNT(*) AS total_patients,\n    SUM(CASE WHEN acl = 1 THEN 1 ELSE 0 END) / COUNT(*) AS male_to_female_ratio\nFROM \n    Examination\nWHERE \n    diagnosis = 'Abnormal Uric Acid Count'\nGROUP BY \n    total_patients;\n\n\t----- bird -----\tthrombosis_prediction",
    "1170": "\nSELECT COUNT(DISTINCT ID) AS Patients_Without_Examination\nFROM Examination E1\nWHERE E1.Examination Date < DATEADD(year, 1, E1.Admission);\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1171": "\nSELECT COUNT(*) AS Number_of_patients\nFROM Examination\nWHERE YEAR(Examination Date) BETWEEN 1990 AND 1993;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1172": "\nSELECT COUNT(*) AS MalePatientsWithElevatedTBIL\nFROM Patient\nWHERE Sex = 'M'\n  AND (Total_Bilirubin > 25 || Total_Bilirubin IS NULL);\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1173": "\nSELECT T2.Diagnosis\nFROM Examination E1\nJOIN Patient P ON E1.ID = P.ID\nWHERE E1.Examination Date BETWEEN '1/1/1985' AND '12/31/1995'\nGROUP BY T2.Diagnosis\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n\t----- bird -----\tthrombosis_prediction",
    "1174": "\nSELECT AVG(T1.Birthday) AS AverageAge\nFROM Examination E1\nJOIN Patient P1 ON E1.ID = P1.ID\nWHERE E1.Examination Date = '2091-10'\n  AND P1.Admission = '2091-10';\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1175": "\nSELECT T1.ID, T1.Birthday, T2.Diagnosis\nFROM Examination AS T1\nJOIN Patient AS T2 ON T1.ID = T2.ID\nWHERE T1.Examination Date = (SELECT MAX(Examination Date) FROM Examination)\nORDER BY T1.Examination Date DESC;\n\n\t----- bird -----\tthrombosis_prediction",
    "1176": "\nSELECT T3.ANCA FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Examination Date = '1996-12-01' AND T2.ID = 3605340;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1177": "\nSELECT T1.ID, T1.TC FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.ID = 2927464 AND T1.Date = '1995-09-04' AND T1.TC <= 180;\n\n\t----- bird -----\tthrombosis_prediction",
    "1178": "\n\t----- bird -----\tthrombosis_prediction",
    "1179": "\nSELECT T3.ID, T3.ACL, T3.ANA, T3.aCL, T3.Diagnosis, T3.KCT, T3.RVVT, T3.LAC, T3.Symptoms, T3.Thrombosis, T3.ForeignKeys[T1.ID] AS ID\nFROM Examination E\nJOIN Patient P ON E.ID = P.ID\nWHERE E.Examination Date = '2023-01-01' AND E.ACL = 'SLE'\nAND E.KCT = '1994/02/19';\n\n\t----- bird -----\tthrombosis_prediction",
    "1180": "\nSELECT T3.BIRTHDAY, T1.SEX, T2.DESCRIPTION FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.ALT GLUTAMIC PLYC TRANSEMAE STATUS = 9 AND T1.Examination Date = '1992-06-12';\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1181": "\nSELECT T1.Birthday FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Examination Date = '1991-10-21' AND T2.aCL Uric Acid Level = 8.4;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1182": "\nSELECT COUNT(DISTINCT ID) AS Total_Lab_tests\nFROM Examination E1\nJOIN Patient P1 ON E1.ID = P1.ID\nWHERE E1.Examination Date = '2019-06-13' AND E1.Diagnosis = 'SJS'\nAND E1.Date >= '1995-01-01';\n\n\t----- bird -----\tthrombosis_prediction",
    "1183": "\nSELECT T1.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Admission LIKE '1997/01/27';\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1184": "\nSELECT T1.ID, T1.Symptoms\nFROM Examination AS T1\nJOIN Patient AS T2 ON T1.ID = T2.ID\nWHERE T2.Birthday = '1959-03-01' AND T1.Examination Date = '2023-09-27';\n\n\t----- bird -----\tthrombosis_prediction",
    "1185": "\nSELECT \n    AVG(Total Cholesterol) AS Decrease Rate\nFROM \n    Examination E1\nJOIN \n    Patient P1 ON E1.ID = P1.ID\nWHERE \n    E1.Birthday >= '1959-02-18' AND E1.Birthday < '1981-12-31'\nGROUP BY \n    E1.Birthday\nORDER BY \n    E1.Birthday;\n\n\t----- bird -----\tthrombosis_prediction",
    "1186": "\nSELECT ID, Diagnosis FROM Patient WHERE ID IN (SELECT ID FROM Examination WHERE Diagnosis = 'Behcet\\' AND Examination Date BETWEEN '197-01-01' AND '1997-12-31');\n\n\t----- bird -----\tthrombosis_prediction",
    "1187": "\nSELECT DISTINCT T1.ID\nFROM Examination AS T1\nJOIN Patient AS T2 ON T1.ID = T2.ID\nWHERE T1.Examination Date BETWEEN '1987-07-06' AND '1996-01-31'\nAND (T1.ALTG Level > 30) AND (T1.ALB Level < 4)\nORDER BY T1.ID;\n\n\t----- bird -----\tthrombosis_prediction",
    "1188": "\nSELECT COUNT(*) AS count, ID\nFROM Patient\nWHERE SEX = 'F'\nAND Birthday >= '1964-01-01'\nGROUP BY ID;\n\n\t----- bird -----\tthrombosis_prediction",
    "1189": "\nSELECT COUNT(DISTINCT ID)\nFROM Examination E1\nJOIN Patient P1 ON E1.ID = P1.ID\nWHERE E1.Examination Date >= '2023-01-01' AND E1.Examination Date <= '2023-12-31'\n  AND (E1.ANA Pattern = 'S' AND E1.ANCA > (SELECT AVG(ANA Pattern) FROM Examination WHERE Examination Date >= '2023-01-01' AND Examination Date <= '2023-12-31') * 2)\n  AND (E1.ANA Pattern = 'IgM' AND E1.ANCA > (SELECT AVG(ANA Pattern) FROM Examination WHERE Examination Date >= '2023-01-01' AND Examination Date <= '2023-12-31') * 2)\n  AND E1.Diagnosis = 'Thrombosis'\n  AND P1\u8bca\u65ad = '2';\n\n\t----- bird -----\tthrombosis_prediction",
    "1190": "\nSELECT \n    COUNT(*) AS total_patients,\n    SUM(CASE WHEN aCL < 10 THEN 1 ELSE 0 END) / COUNT(*) * 100 AS percentage_below_normal_uric_acid\nFROM Examination\nWHERE aCL BETWEEN 5 AND 20;\n\n\t----- bird -----\tthrombosis_prediction",
    "1191": "\nSELECT \n    COUNT(*) AS total_patients,\n    SUM(CASE WHEN Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) / COUNT(*) * 100 AS percentage_diagnosed\nFROM \n    Examination E1\nJOIN \n    Patient P1 ON E1.ID = P1.ID\nWHERE \n    E1.Birthday >= '1981-01-01'\nGROUP BY \n    E1.Birthday;\n\n\t----- bird -----\tthrombosis_prediction",
    "1192": "\nSELECT DISTINCT T1.ID, T1.First Name, T1.Last Name, T2.Description\nFROM Patient AS T1\nJOIN Examination AS T2 ON T1.ID = T2.ID\nWHERE T2.Examination Date >= '1991-10-01' AND T2.Examination Date < '1991-10-31'\nAND T2.Diagnosis LIKE '%blood%bilirubin%'\nAND T2.TBIL BETWEEN 0.5 AND 4;\n\n\t----- bird -----\tthrombosis_prediction",
    "1193": "\nSELECT COUNT(*) AS count\nFROM Examination EX1\nWHERE NOT EXISTS (\n  SELECT 1 FROM Patient P2\n  WHERE EX1.ID = P2.ID AND EX1.Diagnosis = 'ANA Pattern'\n)\nAND EX1.Birthday BETWEEN '1980-01-01' AND '1989-12-31';\n\n\t----- bird -----\tthrombosis_prediction",
    "1194": "\nSELECT T1.SEX FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis LIKE 'PSS%' AND T1.Examination Date = 'acl' AND T1.AnA Pattern = 'C%2B%EB%80%93' AND T1.ANA > 2 + 1 AND T1.LAC IS NOT NULL;\n\n\t----- bird -----\tthrombosis_prediction",
    "1195": "\nSELECT AVG(T1.ALB) AS AverageBloodAlbuminLevel\nFROM Examination E1\nJOIN Patient P1 ON E1.ID = P1.ID\nJOIN Laboratory L1 ON E1.ID = L1.ID\nWHERE P1.SEX = 'F' AND L1.LABOUR_DATE > '2019-01-01' AND L1.LABOUR_DATE < '2020-01-01'\nGROUP BY E1.Examination Date, E1.ACL, E1.ANA\nHAVING COUNT(DISTINCT P1.ID) = 1\nAND L1.LABOUR_DATE > '2019-01-01' AND L1.LABOUR_DATE < '2020-01-01'\n\n\t----- bird -----\tthrombosis_prediction",
    "1196": "\nSELECT DISTINCT T1.Symptoms\nFROM Examination E\nJOIN Patient P ON E.ID = P.ID\nWHERE E.Diagnosis LIKE '%SLE%'\nGROUP BY T1.Symptoms, E.Examination Date\nORDER BY COUNT(*) DESC;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1197": "\nSELECT Examination.Examination Date, Patient.Diagnosis\nFROM Examination\nJOIN Patient ON Examination.ID = Patient.ID\nWHERE Patient.ID = 48473;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1198": "\nSELECT COUNT(*) AS NumberOfFemalePatients\nFROM Examination E\nJOIN Patient P ON E.ID = P.ID\nWHERE E.Diagnosis = 'APS';\n\n\t----- bird -----\tthrombosis_prediction",
    "1199": "\nSELECT COUNT(*) AS num_patients\nFROM Examination\nWHERE YEAR(Examination Date) = 1997;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1200": "\nSELECT \n    COUNT(*) AS total_patients,\n    SUM(CASE WHEN Diagnosis = 'SLE' THEN 1 ELSE 0 END) / COUNT(*) * 100 AS proportion_thrombocytopenia_sle\nFROM \n    Examination E\nJOIN \n    Patient P ON E.ID = P.ID\nWHERE \n    E.Symptoms LIKE '%thrombosis%'\nGROUP BY \n    total_patients;\n\n\t----- bird -----\tthrombosis_prediction",
    "1201": "\nSELECT COUNT(*) AS TotalPatients, SUM(CASE WHEN Diagnosis = 'RA' THEN 1 ELSE 0 END) / COUNT(*) * 100 AS PercentageWomen\nFROM Patient\nWHERE YEAR(Birthday) = 2000 AND SEX = 'F'\nGROUP BY Diagnosis;\n\nSQL_END\n\t----- bird -----\tthrombosis_prediction",
    "1202": "\nSELECT COUNT(*) AS count\nFROM Examination E1\nJOIN Patient P ON E1.ID = P.ID\nWHERE E1.Examination Date BETWEEN '1995-01-01' AND '1997-12-31'\n  AND E1.Diagnosis LIKE '%BEHCET%'\n  AND NOT EXISTS (\n    SELECT 1 FROM Examination E2 WHERE E2.ID = P.ID\n      AND E2.Examination Date BETWEEN '1995-01-01' AND '1997-12-31'\n      AND E2.Diagnosis LIKE '%BEHCET%'\n  );\n\n\t----- bird -----\tthrombosis_prediction",
    "1203": "\nSELECT COUNT(*) AS count\nFROM Patient\nWHERE SEX = 'female'\n  AND (ADmission, Diagnosis) IN (\n    SELECT Examination Date\n    FROM Examination\n    WHERE aCL < 3.5\n  );\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1204": "\nSELECT MIN(T1.Examination Date) - T2.Admission FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.ID = 821298;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1205": "\nSELECT T1.ID, T1.Examination Date, T2.aCL, T2.ANANAcl Pattern, T2.anaa Pattern, T3.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T1.ID = 57266;\n\n\t----- bird -----\tthrombosis_prediction",
    "1206": "\nSELECT Examination.Date, Patient.First_Name, Patient.Last_Name\nFROM Examination\nJOIN Patient ON Examination.ID = Patient.ID\nWHERE Examination aCL > 150;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1207": "\nSELECT ID, SEX, Birthday FROM Patient WHERE YEAR(Birthday) = 1994 AND AST(GOT) <= 20;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1208": "\nSELECT T1.ID\nFROM Examination AS T1\nJOIN Patient AS T2 ON T1.ID = T2.ID\nWHERE T2.SEX = 'Male' AND T1.GPT > 30;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1209": "\nSELECT T1.ID, T1.Birthday, T2.Diagnosis\nFROM Examination AS T1\nJOIN Patient AS T2 ON T1.ID = T2.ID\nWHERE T1.aCL > 30 AND T1.aCL < 60;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1210": "\nSELECT AVG(LDH) AS AverageIndex\nFROM Laboratory\nWHERE LDH IN (\n  SELECT aCL FROM Examination WHERE aCL BETWEEN 100 AND 200\n);\n\n\t----- bird -----\tthrombosis_prediction",
    "1211": "\nSELECT ID, Age FROM Patient WHERE LDH > 100 AND LDH < 300;\n\n\t----- bird -----\tthrombosis_prediction",
    "1212": "\nSELECT T1.ID, T1.Examination Date, T2.Diagnosis\nFROM Examination AS T1\nJOIN Patient AS T2 ON T1.ID = T2.ID\nWHERE T1.aCL > 0 AND T1.ALT < 35.0;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1213": "\nSELECT ID FROM Patient WHERE Birthday = '1982-04-01';\n\nSQL_END\n\t----- bird -----\tthrombosis_prediction",
    "1214": "\nSELECT ID, SEX, Birthday FROM Patient WHERE TP < (SELECT MIN(TP) FROM Patient);\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1215": "\nSELECT T1.ID, (TP - 20) AS deviation\nFROM Patient AS T1\nJOIN Examination AS T2 ON T1.ID = T2.ID\nWHERE T1.SEX = 'Female' AND T2.TP > 20;\n\n\t----- bird -----\tthrombosis_prediction",
    "1216": "\nSELECT ID, Patient.Birthday\nFROM Patient\nWHERE Patient.SEX = 'M'\n  AND NOT (Patient.Diagnosis LIKE '%albumin%')\nORDER BY Patient.Birthday DESC;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1217": "\nSELECT T1.ID, T1.Birthday, T1.Description, T2.Diagnosis\nFROM Patient AS T1\nJOIN Examination AS T2 ON T1.ID = T2.ID\nWHERE T1.BirthYear = 1982;\n\n\t----- bird -----\tthrombosis_prediction",
    "1218": "\nSELECT COUNT(*) AS total_patients, SUM(CASE WHEN acl > 10 THEN 1 ELSE 0 END) / COUNT(*) * 100 AS percentage_over_normal_range\nFROM Examination\nWHERE diagnosis = 'Uric Acid'\nGROUP BY diagnosis;\n\n\t----- bird -----\tthrombosis_prediction",
    "1219": "\nSELECT AVG(T1.UA) AS AverageUA\nFROM Patient P\nJOIN Examination E ON P.ID = E.ID\nWHERE E.Examination Date = (SELECT MAX(E2.Examination Date)\n                           FROM Examination E2\n                          WHERE E2.aCL IgG > 0.5 AND E2.aCL IgM > 0.5);\n\n\t----- bird -----\tthrombosis_prediction",
    "1220": "\nSELECT ID, SEX, Birthday FROM Patient WHERE UN BETWEEN 150 AND 200;\n\n\t----- bird -----\tthrombosis_prediction",
    "1221": "\nSELECT ID, SEX, Birthday FROM Patient WHERE Diagnosis = 'RA' AND UN IN (SELECT UN FROM Lab ORDER BY RRP DESC LIMIT 1);\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1222": "\nSELECT COUNT(*) AS MalePatientsWithCreatinineIndexOutOfRange\nFROM Examination\nWHERE Diagnosis = 'Creatinine Index Out of Normal Range';\n\n\t----- bird -----\tthrombosis_prediction",
    "1223": "\nSELECT COUNT(*) AS count\nFROM Examination E1\nJOIN Patient P1 ON E1.ID = P1.ID\nWHERE E1.aCL > 0 AND E1.aCL < 250\nGROUP BY E1.ID\nHAVING SUM(E1.ANA Pattern) - SUM(E1.ANA Pattern) * (E1.KCT / 100) > 0;\n\n\t----- bird -----\tthrombosis_prediction",
    "1224": "\nSELECT ID, Sex, Birthday FROM Patient WHERE ID = (SELECT MAX(ID) FROM Examination);\n\n\t----- bird -----\tthrombosis_prediction",
    "1225": "\nSELECT T1.SEX, SUM(T2.T-BIL) AS Total_Bilirubin\nFROM Patient AS T1\nJOIN Examination AS T2 ON T1.ID = T2.ID\nWHERE T2.Examination Date < '2023-01-01' AND T2.Examination Date > '2023-01-01'\nGROUP BY T1.SEX;\n\n\t----- bird -----\tthrombosis_prediction",
    "1226": "\nSELECT ID, T-CHO FROM Patient WHERE T-CHO = ( SELECT MAX(T-CHO) FROM Patient );\n\n\t----- bird -----\tthrombosis_prediction",
    "1227": "\nSELECT AVG(T1.Birthday) AS AverageAge\nFROM Patient AS T1\nJOIN Examination AS T2 ON T1.ID = T2.ID\nWHERE T2.aCL > 0 AND T2.Diagnosis LIKE 'high%';\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1228": "\nSELECT ID, Diagnosis FROM Patient WHERE ID NOT IN (SELECT ID FROM Examination WHERE aCL > 100 AND aCL < 250) AND aCL >= 100;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1229": "\nSELECT COUNT(*) AS num_patients\nFROM Patient\nWHERE ID IN (\n    SELECT ID\n    FROM Examination\n    WHERE aCL > 100 AND Diagnosis = 'TG' AND aCL > 200\n)\nAND Age > 50;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1230": "\nSELECT DISTINCT T1.ID\nFROM Examination AS T1\nJOIN Patient AS T2 ON T1.ID = T2.ID\nWHERE T1.Creatinine Phosphokinase (TP) BETWEEN 0 AND 40;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1231": "\nSELECT COUNT(*) AS count\nFROM Patient\nWHERE YEAR(Birthday) BETWEEN 1936 AND 1956\n  AND (CreatininePhosphokinase > 0.4);\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1232": "\nSELECT ID, SEX, Birthday FROM Patient WHERE ID NOT IN (\n    SELECT ID FROM Examination WHERE GLU NOT BETWEEN 70 AND 180 AND T-CHO BETWEEN 5.2 AND 6.4\n)\n\n\t----- bird -----\tthrombosis_prediction",
    "1233": "\nSELECT ID, GLU\nFROM Examination\nWHERE Patient.ID IN (\n  SELECT ID\n  FROM Examination\n  WHERE Examination.Examination Date >= '1991-01-01'\n)\nAND Examination.ID NOT IN (\n  SELECT Patient.ID\n  FROM Examination\n  WHERE Examination.Examination Date < '1991-01-01'\n);\n\n\t----- bird -----\tthrombosis_prediction",
    "1234": "\nSELECT ID, SEX, Birthday\nFROM Patient\nWHERE (aCL > 150) AND (aCL < 400)\nGROUP BY ID, SEX\nORDER BY AGE ASC;\n\n\t----- bird -----\tthrombosis_prediction",
    "1235": "\nSELECT T1.ID, T1.Birthday\nFROM Examination AS T1\nJOIN Patient AS T2 ON T1.ID = T2.ID\nWHERE T1.Diagnosis < 'lower red blood cell';\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1236": "\nSELECT T1.ID, T1.Diagnosis \nFROM Examination AS T1 \nJOIN Patient AS T2 ON T1.ID = T2.ID \nWHERE T2.SEX = 'female' AND T2.Birthday > '50-59' AND T1.AnA Pattern = 'abnormal red blood cell count';\n\n\t----- bird -----\tthrombosis_prediction",
    "1237": "\nSELECT ID, Sex FROM Examination WHERE Diagnosis = 'Low Hemoglobin Level';\n\n\t----- bird -----\tthrombosis_prediction",
    "1238": "\nSELECT T1.ID, T1.SEX \nFROM Examination AS T1 \nJOIN Patient AS T2 ON T1.ID = T2.ID \nWHERE T2.Diagnosis = 'SLE' AND T1.HemoglobinLevel = 0;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1239": "\nSELECT ID, Age FROM Examination WHERE ID IN (\n    SELECT Patient.ID \n    FROM Examination \n    JOIN Patient ON Examination.ID = Patient.ID \n    GROUP BY Examination.ID \n    HAVING COUNT(DISTINCT Examination.Examination Date) > 1\n)\n\n\t----- bird -----\tthrombosis_prediction",
    "1240": "\nSELECT AVG(TT) AS Average_Hematoclit_Level\nFROM Laboratory\nWHERE Date BETWEEN '1991-01-01' AND '1991-12-31'\n  AND ID IN (\n    SELECT ID\n    FROM Examination\n    WHERE Examination Date < '1991-01-01'\n      AND Examination Date > '1991-01-01'\n  );\n\n\t----- bird -----\tthrombosis_prediction",
    "1241": "\nSELECT COUNT(*) AS Number_of_patients_with_lower_than_normal_range, \n       COUNT(*) - (SELECT COUNT(*) FROM Examination WHERE aCL < 10) AS Difference_in_patients\nFROM Patient\nWHERE Diagnosis = 'Abnormal Platelet Level';\n\n\t----- bird -----\tthrombosis_prediction",
    "1242": "\nSELECT ID, Patient.Birthday FROM Examination \nJOIN Patient ON Examination.ID = Patient.ID \nWHERE Examination.Examination Date = '1984-01-01' AND Examination aCL IgG < 50;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1243": "\nSELECT COUNT(*) AS total_patients, \n       (COUNT(CASE WHEN T1.SEX = 'F' THEN 1 ELSE NULL END) / COUNT(T1.ID)) * 100 AS female_prothrombin_time_percentage\nFROM Patient P\nJOIN Examination E ON P.ID = E.ID\nWHERE P.Birthday > '2023-01-01'\nGROUP BY P.ID;\n\n\t----- bird -----\tthrombosis_prediction",
    "1244": "\nSELECT DISTINCT T1.ID\nFROM Patient AS T1\nJOIN Examination AS T2 ON T1.ID = T2.ID\nWHERE T2.Examination Date > '1992-01-01'\n  AND T2.AnA Pattern = 'normal';\n\n\t----- bird -----\tthrombosis_prediction",
    "1245": "\nSELECT COUNT(*) AS ResultCount\nFROM Examination\nWHERE Examination Date > '1997-01-01';\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1246": "\nSELECT COUNT(*) AS count\nFROM Examination E1\nJOIN Patient P ON E1.ID = P.ID\nWHERE E1.ANANACL > 0 AND E1.Thrombosis >= 1;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1247": "\nSELECT COUNT(*) AS count\nFROM Examination E1\nJOIN Patient P ON E1.ID = P.ID\nWHERE E1.aCL > 0 AND E1.AANA = '0' AND E1.AANA Pattern = '0'\nGROUP BY E1.ID;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1248": "\nSELECT COUNT(*) AS num_patients\nFROM Examination\nWHERE Diagnosis = 'Abnormal Fibrinogen Level';\n\n\t----- bird -----\tthrombosis_prediction",
    "1249": "\nSELECT DISTINCT T1.Diagnosis\nFROM Examination E\nJOIN Patient P ON E.ID = P.ID\nWHERE E.ANANACL > 0;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1250": "\nSELECT T1.ID\nFROM Examination E\nJOIN Patient P ON E.ID = P.ID\nWHERE E.Diagnosis = 'SLE'\n  AND (E.ANAs LIKE '%aCL%' OR E.ANAs LIKE '%ANA%')\n  AND NOT EXISTS (\n    SELECT 1 FROM Laboratory L WHERE L.Date = E.Examination Date AND L.ID = E.ID\n  );\n\n\t----- bird -----\tthrombosis_prediction",
    "1251": "\nSELECT COUNT(*) AS AbortionSymptomsCount\nFROM Examination\nWHERE aCL < 1;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1252": "\nSELECT COUNT(*) AS count\nFROM Examination E1\nJOIN Patient P ON E1.ID = P.ID\nWHERE E1.aCL > 0 AND E1.Diagnosis = 'Normal';\n\n\t----- bird -----\tthrombosis_prediction",
    "1253": "\nSELECT T1.ID, T1.Diagnosis \nFROM Examination AS T1 \nJOIN Patient AS T2 ON T1.ID = T2.ID \nWHERE T1.aCL > 0.5 AND T1.AANA = 'normal' \nORDER BY T1.aCL DESC LIMIT 1;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1254": "\nSELECT COUNT(*) AS Patients\nFROM Examination E\nJOIN Patient P ON E.ID = P.ID\nWHERE E.ANANAcl = 'normal' AND E.Birthday > '1990-01-01';\n\n\t----- bird -----\tthrombosis_prediction",
    "1255": "\nSELECT T1.Diagnosis\nFROM Examination E\nJOIN Patient P ON E.ID = P.ID\nWHERE E.ACL_IgM > 0 AND E.ACL_IgA > 0;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1256": "\nSELECT COUNT(*) FROM Examination E1 INNER JOIN Patient P ON E1.ID = P.ID WHERE E1.ANAnaPattern = 'normal' AND NOT EXISTS (SELECT 1 FROM Examination E2 WHERE E2.Examination Date = E1.Examination Date AND E2.aCL IgG IS NULL)\n\n\t----- bird -----\tthrombosis_prediction",
    "1257": "\nSELECT COUNT(DISTINCT ID) AS count\nFROM Examination E1\nJOIN Patient P ON E1.ID = P.ID\nWHERE E1.CRP > 0 AND E1.CRP < 18;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1258": "\nSELECT COUNT(*) AS count\nFROM Examination E\nJOIN Patient P ON E.ID = P.ID\nWHERE E.RHMAF = 'Normal' AND E.Diagnosis = 'Positive Measure of Degree of Coagulation';\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1259": "\nSELECT DISTINCT T1.ID, T1.Diagnosis\nFROM Examination AS T1\nJOIN Patient AS T2 ON T1.ID = T2.ID\nWHERE T2.Birthday > '1995-01-01' AND T1.ANFA != 0;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1260": "\nSELECT ID FROM Patient WHERE RF = 'normal' AND (Age > 60 OR Age IS NULL);\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1261": "\nSELECT COUNT(*) AS count\nFROM Examination E\nWHERE NOT EXISTS (\n  SELECT 1 FROM Patient P WHERE P.ID = E.ID AND E.RF = 'normal'\n);\n\n\t----- bird -----\tthrombosis_prediction",
    "1262": "\nSELECT COUNT(*) AS count\nFROM Examination E\nJOIN Patient P ON E.ID = P.ID\nWHERE E.ANACL3 = 'Normal' AND E.ANAPattern = 'P';\n\n\t----- bird -----\tthrombosis_prediction",
    "1263": "\nSELECT T1.ID, T1.Examination Date\nFROM Examination AS T1\nJOIN Patient AS T2 ON T1.ID = T2.ID\nWHERE T1.AnA Pattern = 'aCL IgA' AND T1.Diagnosis = 'Normal'\nORDER BY T1.AnA Pattern DESC\nLIMIT 1;\n\n\t----- bird -----\tthrombosis_prediction",
    "1264": "\nSELECT COUNT(*) AS count\nFROM Examination E1\nJOIN Patient P ON E1.ID = P.ID\nWHERE E1.aCL > 0 AND E1.ANANAclg > 0;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1265": "\nSELECT COUNT(*) AS num_patients\nFROM Examination E\nJOIN Patient P ON E.ID = P.ID\nWHERE E.ANANA = 'normal' AND E.Diagnosis = 'admitted to the hospital';\n\n\t----- bird -----\tthrombosis_prediction",
    "1266": "\nSELECT T1.ID, T1.Birthday\nFROM Examination AS T1\nJOIN Patient AS T2 ON T1.ID = T2.ID\nWHERE T1.ACL > 0 AND T1.AnA = '1' AND T1.Diagnosis LIKE '%abnormal%'\nORDER BY T1.Birthday ASC;\n\n\t----- bird -----\tthrombosis_prediction",
    "1267": "\nSELECT COUNT(*) AS NumberOfPatients\nFROM Examination E1\nJOIN Patient P ON E1.ID = P.ID\nWHERE E1.ANANAcl IS NULL AND E1.Diagnosis LIKE '%thrombosis%'\nGROUP BY E1.ID;\n\n\t----- bird -----\tthrombosis_prediction",
    "1268": "\nSELECT ID\nFROM Examination\nWHERE Diagnosis = 'Abnormal Anti-SM'\n  AND (ANA Pattern = 'Youngest' OR ANA Pattern = 'Youngest' OR aCL IgA < 10)\nORDER BY ID;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1269": "\nSELECT ID FROM Examination WHERE Examination Date > '1997-01-01' AND aCL IgG = 0;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1270": "\nSELECT COUNT(*) AS count\nFROM Examination E1\nJOIN Patient P1 ON E1.ID = P1.ID\nWHERE E1.ANANA = 'normal' AND E1.Symptoms LIKE '%vertigo%'\nAND P1.Sex = 'male';\n\n\t----- bird -----\tthrombosis_prediction",
    "1271": "\nSELECT COUNT(*) AS Patients\nFROM Examination E\nJOIN Patient P ON E.ID = P.ID\nWHERE E.ANANA = 'normal' AND E.BIRTHDAY < '1990-01-01';\n\n\t----- bird -----\tthrombosis_prediction",
    "1272": "\nSELECT T1.ID\nFROM Examination E\nJOIN Patient P ON E.ID = P.ID\nWHERE E.Diagnosis = 'First'\n  AND (E.ANANACL, E.ANANAM) IN (\n    SELECT T2.ANANACL, T2.ANANAM\n    FROM Examination E1\n    JOIN Examination E2 ON E1.ID = E2.ID\n    WHERE E1.ANANACL > E2.ANANACL AND E1.ANANAM < E2.ANANAM\n  )\nORDER BY P.Birthday DESC, P.FirstDate DESC;\n\n\t----- bird -----\tthrombosis_prediction",
    "1273": "\nSELECT COUNT(*) AS num_patients\nFROM Examination E\nJOIN Patient P ON E.ID = P.ID\nWHERE E.ANANA = 'normal' AND E.Diagnosis LIKE '%SLE%'\nGROUP BY E.ID;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1274": "\nSELECT COUNT(DISTINCT ID)\nFROM Examination E1\nWHERE E1.ID NOT IN (\n  SELECT DISTINCT E2.ID\n  FROM Examination E2\n  WHERE E2.aCL = 'normal' AND E2.Diagnosis = 'other'\n);\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1275": "\nSELECT COUNT(*) AS count\nFROM Patient\nWHERE ID IN (\n    SELECT ID\n    FROM Examination\n    WHERE aCL = 'normal' AND aCL = 'normal'\n)\nAND Diagnosis = 'normal'\nAND (Sex = 'male' OR Sex = 'female');\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1276": "\nSELECT T1.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.ACL > 0 AND T1.AnA Pattern = 'acl' AND T1.Symptoms LIKE '%anomaly%'\n\n\t----- bird -----\tthrombosis_prediction",
    "1277": "\nSELECT COUNT(*) AS count\nFROM Examination E1\nJOIN Patient P ON E1.ID = P.ID\nWHERE E1.ANANA = 'normal' AND E1.Diagnosis NOT IN (SELECT Diagnosis FROM Examination WHERE ID = P.ID);\n\n\t----- bird -----\tthrombosis_prediction",
    "1278": "\nSELECT COUNT(*) AS NumberOfPatients\nFROM Examination E\nJOIN Patient P ON E.ID = P.ID\nWHERE E.ANANAcl > 0 AND E.Diagnosis LIKE '%anti-DNA-II%'\nGROUP BY E.ID;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1279": "\nSELECT COUNT(*) AS TotalPatients, SUM(CASE WHEN aCL > 0 THEN 1 ELSE 0 END) AS PatientsWithAbnormalAST,\n       SUM(CASE WHEN aCL > 0 AND aCL < 50 THEN 1 ELSE 0 END) AS PatientsWithNormalAST,\n       (SUM(CASE WHEN aCL > 0 THEN 1 ELSE 0 END) * 100 / COUNT(*) - SUM(CASE WHEN aCL <= 50 THEN 1 ELSE 0 END)) AS Percentage\nFROM Examination\nWHERE Diagnosis = 'SLE'\nGROUP BY PatientsWithAbnormalAST, PatientsWithNormalAST;\n\n\t----- bird -----\tthrombosis_prediction",
    "1280": "\nSELECT COUNT(*) AS count\nFROM Examination\nWHERE Diagnosis = 'Normal'\n  AND (Sex = 'Male' OR (Sex = 'Female' AND YEAR(Birthday) >= 1980)) ;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1281": "\nSELECT T1.Birthday FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.aCL > 0 AND T1.Diagnosis = 'Abnormal' ORDER BY T1.Birthday LIMIT 1;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1282": "\nSELECT T1.Birthday\nFROM Patient AS T1\nJOIN Examination AS T2 ON T1.ID = T2.ID\nWHERE T2.ACL > 0 AND T2.ACL < 50\nORDER BY T1.Birthday DESC\nLIMIT 3;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1283": "\nSELECT COUNT(*) AS count\nFROM Patient\nWHERE Diagnosis = 'Normal Glutamic Pyloric Transaminase'\n  AND (Sex = 'Male' OR Sex IS NULL);\n\n\t----- bird -----\tthrombosis_prediction",
    "1284": "\nSELECT T1.Examination Date, T2.First Date\nFROM Examination AS T1\nJOIN Patient AS T2 ON T1.ID = T2.ID\nWHERE T1.aCL > 0 AND T1.ALT < 350\nORDER BY T1.aCL DESC;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1285": "\nSELECT MAX(T1.Examination Date) AS LatestPatientDate\nFROM Examination E\nJOIN Patient P ON E.ID = P.ID\nWHERE E.Diagnosis = 'Abnormal Lactate Dehydrogenase'\n  AND (P.Birthday IS NULL OR P.Birthday < CURRENT_DATE());\n\n\t----- bird -----\tthrombosis_prediction",
    "1286": "\nSELECT COUNT(*) AS Admissions\nFROM Examination E\nJOIN Patient P ON E.ID = P.ID\nWHERE E.ACL > 0 AND E.Diagnosis LIKE '%alp%'\nGROUP BY E.ID;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1287": "\nSELECT COUNT(*) AS TotalPatients\nFROM Examination E\nWHERE E.ID NOT IN (\n  SELECT ID FROM Patient WHERE Diagnosis = 'Normal'\n)\nAND E.Diagnosis = 'Normal';\n\n\t----- bird -----\tthrombosis_prediction",
    "1288": "\nSELECT T1.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Total Protein < 30;\n\n\t----- bird -----\tthrombosis_prediction",
    "1289": "\nSELECT COUNT(*) AS TotalPatients\nFROM Examination E\nWHERE E.Diagnosis = 'SJS'\n  AND E.ID NOT IN (\n    SELECT ID FROM Patient WHERE Diagnosis = 'SJS'\n  );\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1290": "\nSELECT Examination.Date\nFROM Examination\nJOIN Patient ON Examination.ID = Patient.ID\nWHERE Examination.aCL > 0 AND Examination.aCL BETWEEN 180 AND 365;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1291": "\nSELECT COUNT(*) AS count\nFROM Examination\nWHERE Diagnosis = 'normal'\n  AND (aCL IgA = 0 OR aCL IgM = 0)\n  AND (ANA Pattern = 'normal' OR ANA Pattern = 'negative')\n  AND (aCL IgG = 0 OR aCL IgM = 0);\n\n\t----- bird -----\tthrombosis_prediction",
    "1292": "\nSELECT T1.ID, T1.Examination Date, T2.ACL, T2.ANA, T3.aCL, T4.Diagnosis\nFROM Examination AS T1\nJOIN Patient AS T2 ON T1.ID = T2.ID\nJOIN Laboratory AS T3 ON T1.ID = T3.ID\nJOIN Laboratory AS T4 ON T3.ID = T4.ID\nWHERE T4.ANANAcl > 0.5 AND T4.RVVT LIKE 'normal%';\n\n\t----- bird -----\tthrombosis_prediction",
    "1293": "\nSELECT MAX(ANA) AS HighestAntiNucleusAbundance\nFROM Examination\nWHERE Diagnosis = 'Normal Creatinine Level';\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1294": "\nSELECT ID FROM Patient WHERE CreatinineLevel = 0 AND AntiCardiolipinAbiConcentrationLevel = (SELECT MAX(AntiCardiolipinAbiConcentrationLevel) FROM Patient);\n\n\t----- bird -----\tthrombosis_prediction",
    "1295": "\nSELECT COUNT(DISTINCT ID) AS TotalPatients\nFROM Examination E1\nJOIN Patient P ON E1.ID = P.ID\nWHERE E1.Ana Pattern = 'Peripheral';\n\n\t----- bird -----\tthrombosis_prediction",
    "1296": "\nSELECT T1.ID, T1.Examination Date, T2.ANCA Concentration\nFROM Examination AS T1\nJOIN Patient AS T2 ON T1.ID = T2.ID\nWHERE T1.Total Bilirubin > 30 AND T1.ACL IgG > 5 AND T1.ACL IgM > 10;\n\n\t----- bird -----\tthrombosis_prediction",
    "1297": "\nSELECT COUNT(*) AS TotalPatients\nFROM Examination E\nWHERE E.Diagnosis = 'Total Cholesterol > Normal'\n  AND (E.ANAs, E.ANAs Pattern) = ('aCL IgG', 'aCL IgM')\n  AND NOT EXISTS (\n    SELECT 1 FROM Patient P WHERE P.ID = E.ID AND P.TotalCholesterol > 200\n  );\n\n\t----- bird -----\tthrombosis_prediction",
    "1298": "\nSELECT COUNT(*) AS TotalPatients\nFROM Examination E\nJOIN Patient P ON E.ID = P.ID\nWHERE E.ANATotalCholesterol < 200 AND E.ANAPattern = 'Total';\n\n\t----- bird -----\tthrombosis_prediction",
    "1299": "\nSELECT COUNT(DISTINCT ID) AS Number_of_patients_with_normal_triglyceride_and_other_symptoms\nFROM Examination\nWHERE Diagnosis = 'Normal' AND Symptoms IS NOT NULL;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1300": "\nSELECT T2.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.AnA Pattern = 'normal' ORDER BY T1.AnCL DESC LIMIT 1;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1301": "\nSELECT ID FROM Examination WHERE Diagnosis = 'Thrombosis' AND (ANA Pattern = 'Abnormal' OR ANA Pattern = 'Negative');\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1302": "\nSELECT COUNT(*) AS count\nFROM Examination\nWHERE Diagnosis = 'Normal'\n  AND (ANA Pattern = 'Positive' OR ANA Pattern = 'Negative');\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1303": "\nSELECT Examination.Date\nFROM Examination\nJOIN Patient ON Examination.ID = Patient.ID\nWHERE Examination.Diagnosis = 'Abnormal Blood Glucose'\nORDER BY Examination.Birthday DESC\nLIMIT 1;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1304": "\nSELECT COUNT(*) AS count\nFROM Examination E1\nJOIN Patient P ON E1.ID = P.ID\nWHERE E1.aCL > 0 AND E1.Diagnosis = 'normal' AND NOT EXISTS (\n    SELECT 1 FROM Examination E2 WHERE E2.ID = E1.ID AND E2.aCL < E1.aCL\n);\n\n\t----- bird -----\tthrombosis_prediction",
    "1305": "\nSELECT COUNT(*) AS AcceptedPatients\nFROM Examination\nWHERE Diagnosis = 'Normal White Blood Cell Level';\n\n\t----- bird -----\tthrombosis_prediction",
    "1306": "\nSELECT COUNT(*) AS PatientsWithNormalWhiteBloodCellLevel\nFROM Examination E\nJOIN Patient P ON E.ID = P.ID\nWHERE E.Diagnosis = 'SLE' AND E.ANANACL = 0;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1307": "\nSELECT ID FROM Examination WHERE Diagnosis = 'Anemia' AND Symptoms LIKE '%abnormal%';\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1308": "\nSELECT COUNT(DISTINCT ID) AS Number_of_patients_with_other_symptoms\nFROM Examination E1\nJOIN Patient P ON E1.ID = P.ID\nWHERE E1.ANANACL = 'normal' AND E1.Symptoms IS NOT NULL;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1309": "\nSELECT T1.ID, T1.Platelet Level\nFROM Examination AS T1\nJOIN Patient AS T2 ON T1.ID = T2.ID\nWHERE T1.Diagnosis LIKE '%MCTD%'\n  AND T1.Platelet Level BETWEEN 50 AND 150;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1310": "\nSELECT AVG(T1.PTT) AS AverageProthrombinTime\nFROM Patient P1\nJOIN Examination E1 ON P1.ID = E1.ID\nWHERE P1.SEX = 'Male'\n  AND E1.Examination Date = E1.ANAna;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1311": "\nSELECT COUNT(*) AS count\nFROM Examination E\nJOIN Patient P ON E.ID = P.ID\nWHERE E.Diagnosis = 'Severe Thrombosis' AND E.Thrombosis = 1;\nSQL_END\n\n\t----- bird -----\tthrombosis_prediction",
    "1312": "\n\t----- bird -----\tstudent_club",
    "1313": "\nSELECT COUNT(DISTINCT member_id) AS number_of_students\nFROM member\nWHERE member_id IN (\n    SELECT link_to_member\n    FROM attendance\n    WHERE event_id = (SELECT event_id FROM event WHERE name = 'Student_Club')\n);\n\n\t----- bird -----\tstudent_club",
    "1314": "\nSELECT T1.first_name, T1.last_name \nFROM member AS T1 \nJOIN major AS T2 ON T1.zip = T2.zip_code \nJOIN attendance AS T3 ON T1.member_id = T3.link_to_member \nWHERE T2.department = 'Art and Design Department';\n\n\t----- bird -----\tstudent_club",
    "1315": "\nSELECT COUNT(DISTINCT link_to_member) AS number_of_students\nFROM attendance\nWHERE event_id = (SELECT event_id FROM event WHERE event_name = 'Women's Soccer');\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1316": "\nSELECT T1.phone FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member WHERE T2.event_name = 'Women\\'s Soccer' AND T2.status = 'attended';\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1317": "\nSELECT COUNT(DISTINCT T1.member_id) AS count\nFROM member AS T1\nJOIN attendance AS T2 ON T1.member_id = T2.link_to_member\nWHERE T2.event_name = 'Women\\'s Soccer'\n  AND T1.zip = (SELECT zip FROM zip_code WHERE city = 'New York' AND county = 'Manhattan')\n  AND T1.first_name = 'Jane' AND T1.last_name = 'Doe';\n\n\t----- bird -----\tstudent_club",
    "1318": "\nSELECT event.event_name\nFROM event\nJOIN attendance ON event.event_id = attendance.link_to_event\nWHERE attendance.link_to_member = 'Student_Club'\nGROUP BY event.event_name\nORDER BY COUNT(*) DESC\nLIMIT 1;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1319": "\n\t----- bird -----\tstudent_club",
    "1320": "\nSELECT event_name FROM event WHERE member_id = (SELECT member_id FROM member WHERE first_name = 'Maya' AND last_name = 'Mclean') GROUP BY event_name \n\t----- bird -----\tstudent_club",
    "1321": "\nSELECT COUNT(event_id) AS number_of_events\nFROM event\nWHERE member_id = (SELECT member_id FROM member WHERE first_name = 'Sacha' AND last_name = 'Harrison' AND YEAR(event_date) = 2019);\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1322": "\nSELECT COUNT(event_id) AS count\nFROM event\nWHERE event_id IN (\n  SELECT link_to_event\n  FROM attendance\n  GROUP BY link_to_event\n  HAVING COUNT(link_to_member) > 10\n);\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1323": "\nSELECT event_name\nFROM event\nWHERE event_id IN (\n  SELECT link_to_event\n  FROM attendance\n  WHERE count(*) > 20\n)\n\n\t----- bird -----\tstudent_club",
    "1324": "\nSELECT AVG(event_date) AS average_attendance\nFROM event\nWHERE YEAR(event_date) = 2020;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1325": "\nSELECT e.event_name, e.event_date, e.type, e.notes, e.location, e.status\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE b.category = 'club' AND b.spent > (SELECT MAX(spent) FROM expense WHERE link_to_member = e.member_id);\n\n\t----- bird -----\tstudent_club",
    "1326": "\nSELECT COUNT(DISTINCT member_id) FROM member WHERE member_id IN (SELECT link_to_member FROM attendance WHERE event_id = (SELECT event_id FROM event WHERE major_name = 'Environmental Engineering')) \n\t----- bird -----\tstudent_club",
    "1327": "\nSELECT T1.first_name, T1.last_name \nFROM member AS T1 \nJOIN attendance AS T2 ON T1.member_id = T2.link_to_member \nWHERE T2.event_id = (SELECT event_id FROM event WHERE event_name = 'Laugh Out Loud');\n\n\t----- bird -----\tstudent_club",
    "1328": "\nSELECT T2.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.zip = T2.zip_code WHERE T2.majors = 'Law' AND T2.department = 'Constitutional Studies' \n\t----- bird -----\tstudent_club",
    "1329": "\nSELECT county FROM member WHERE first_name = 'Sherri' AND last_name = 'Ramsey';\n\t----- bird -----\tstudent_club",
    "1330": "\nSELECT T1.college FROM member AS T1 INNER JOIN major AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt' GROUP BY T1.college ORDER BY COUNT(*) DESC LIMIT 1 SQL_END\n\t----- bird -----\tstudent_club",
    "1331": "\nSELECT SUM(amount) FROM income WHERE source = 'funds' AND link_to_member = (SELECT member_id FROM member WHERE first_name = 'Vice' AND last_name = 'President') GROUP BY link_to_member \n\t----- bird -----\tstudent_club",
    "1332": "\nSELECT SUM(expense.cost) AS total_spent\nFROM expense\nJOIN member ON expense.link_to_member = member.member_id\nWHERE member.zip = (SELECT zip FROM event WHERE event_name = 'September Meeting')\nAND expense.date_received LIKE '%food%'\nGROUP BY expense.event_id;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1333": "\n\t----- bird -----\tstudent_club",
    "1334": "\nSELECT T1.first_name, T1.last_name \nFROM member AS T1 \nJOIN zip_code AS T2 ON T1.zip = T2.zip \nJOIN major AS T3 ON T2.zip_code = T3.zip_code \nWHERE T3.college = 'Illinois' AND T2.state = 'IL';\n\n\t----- bird -----\tstudent_club",
    "1335": "\nSELECT SUM(expense.cost) AS total_spent FROM expense WHERE expense_date = '2023-09-01' AND link_to_member = (SELECT member_id FROM member WHERE first_name = 'Student_Club' AND last_name = 'Members') GROUP BY expense_date SQL_END\n\t----- bird -----\tstudent_club",
    "1336": "\nSELECT T1.department, T2.major_name\nFROM member AS T1\nJOIN major AS T2 ON T1.zip = T2.zip\nWHERE T1.first_name = 'Pierce' AND T1.last_name = 'Guidi';\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1337": "\nSELECT SUM(b.spent) AS total_budgeted_amount\nFROM budget b\nJOIN event e ON b.link_to_event = e.event_id\nWHERE e.event_name = 'October Speaker'\nAND e.status = 'pending';\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1338": "\nSELECT e.event_id, e.event_name, e.event_date, e.type, e.notes, e.location, e.status, COUNT(*) AS approved_count\nFROM event e\nJOIN attendance a ON e.event_id = a.link_to_event\nWHERE strftime('%Y-%m', a.date) = '2019-10' AND a.link_to_member = '2019-10-08'\nGROUP BY e.event_id, e.event_name, e.event_date, e.type, e.notes, e.location, e.status;\n\n\t----- bird -----\tstudent_club",
    "1339": "\nSELECT AVG(cost) AS average_cost\nFROM expense\nWHERE member_id = (SELECT member_id FROM member WHERE first_name = 'Elijah' AND last_name = 'Allen')\nAND date_received BETWEEN '2023-09-01' AND '2023-10-31';\n\n\t----- bird -----\tstudent_club",
    "1340": "\nSELECT SUM(T1.spent) AS total_spent\nFROM expense AS T1\nJOIN event AS T2 ON T1.link_to_event = T2.event_id\nWHERE T2.type = 'Student_Club' AND T1.date_received >= '2019-01-01' AND T1.date_received < '2020-01-01'\nGROUP BY T1.link_to_member;\n\n\t----- bird -----\tstudent_club",
    "1341": "\n\t----- bird -----\tstudent_club",
    "1342": "\nSELECT SUM(expense.cost) AS total_cost\nFROM expense\nJOIN member ON expense.link_to_member = member.member_id\nWHERE expense.expense_description = 'Posters'\nAND expense.date_received = '2019-09-04'\nGROUP BY expense.expense_date\n\n\t----- bird -----\tstudent_club",
    "1343": "\nSELECT T1.budget_id, T2.category, T2.spent - T2.remaining AS remaining\nFROM budget AS T1\nJOIN expense AS T2 ON T1.budget_id = T2.budget_id;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1344": "\nSELECT event.event_name, event.event_date, event.notes FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE event.event_date = '2019-09-14' AND event.status = '\u5b8c\u6210' \n\t----- bird -----\tstudent_club",
    "1345": "\nSELECT COUNT(DISTINCT major_id) FROM major WHERE major_name = 'College of Humanities and Social Sciences';\n\n\t----- bird -----\tstudent_club",
    "1346": "\n\t----- bird -----\tstudent_club",
    "1347": "\n\t----- bird -----\tstudent_club",
    "1348": "\nSELECT COUNT(*) AS count\nFROM budget\nWHERE event_id IN (\n  SELECT event_id\n  FROM event\n  WHERE event_name = 'November Meeting'\n)\nGROUP BY budget_id;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1349": "\nSELECT SUM(b.spent) AS total_budget FROM budget b WHERE b.event_id = (SELECT event_id FROM event WHERE event_name = 'September Speaker') GROUP BY b.budget_id;\n\n\t----- bird -----\tstudent_club",
    "1350": "\nSELECT e.event_id, e.event_name, e.event_date, e.type, e.notes, e.location, e.status\nFROM event e\nWHERE e.event_name = 'Post Cards, Posters' AND e.date = '2019/8/20';\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1351": "\n\t----- bird -----\tstudent_club",
    "1352": "\nSELECT COUNT(DISTINCT member_id) AS total_members\nFROM member\nWHERE member_id IN (\n  SELECT link_to_member\n  FROM attendance\n  WHERE major_name = 'Human Development and Family Studies'\n)\nGROUP BY member_id;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1353": "\n\t----- bird -----\tstudent_club",
    "1354": "\n\t----- bird -----\tstudent_club",
    "1355": "\n\t----- bird -----\tstudent_club",
    "1356": "\n\t----- bird -----\tstudent_club",
    "1357": "\n\t----- bird -----\tstudent_club",
    "1358": "\nSELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member WHERE attendance.link_to_event = 'event_name' AND attendance.event_status = 'paid_dues' \n\t----- bird -----\tstudent_club",
    "1359": "\nSELECT COUNT(*) AS budget_count\nFROM expense\nWHERE event_id = (SELECT event_id FROM event WHERE event_name = 'Yearly Kickoff' AND type = 'Advertisement')\n  AND category = 'Monthly'\n  AND spent > (SELECT spent FROM expense WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'John' AND last_name = 'Doe') AND budget_id = (SELECT budget_id FROM budget WHERE category = 'Yearly Kickoff'))\n  AND date_received >= '2023-10-01'\n  AND date_received < '2023-11-01';\n\n\t----- bird -----\tstudent_club",
    "1360": "\nSELECT \n    SUM(b.spent) / SUM(e.amount) * 100 AS budget_percentage\nFROM \n    expense e\nJOIN \n    budget b ON e.link_to_budget = b.budget_id\nWHERE \n    e.expense_description = 'Parking' AND \n    e.link_to_member = 'November Speaker';\n\n\t----- bird -----\tstudent_club",
    "1361": "\nSELECT SUM(expense.cost) AS total_cost\nFROM expense\nJOIN event ON expense.event_id = event.event_id;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1362": "\n\t----- bird -----\tstudent_club",
    "1363": "\nSELECT major_name FROM major WHERE department = 'College of Humanities and Social Sciences';\n\n\t----- bird -----\tstudent_club",
    "1364": "\n\t----- bird -----\tstudent_club",
    "1365": "\nSELECT e.expense_description, e.expense_date, e.cost, b.remaining\nFROM expense e\nJOIN budget b ON e.link_to_budget = b.budget_id\nWHERE b.remaining = (SELECT MIN(remaining) FROM budget);\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1366": "\nSELECT member_id FROM attendance WHERE event_id = (SELECT event_id FROM event WHERE name = \"October Meeting\") GROUP BY member_id;\n\n\t----- bird -----\tstudent_club",
    "1367": "\nSELECT T1.zip, T1.city, T1.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip WHERE T1.link_to_major = 'college' GROUP BY T1.zip, T1.city, T1.state ORDER BY COUNT(*) DESC \n\t----- bird -----\tstudent_club",
    "1368": "\n\t----- bird -----\tstudent_club",
    "1369": "\nSELECT event.event_name, MAX(event.budget.amount) AS max_budget_amount\nFROM event\nJOIN budget ON event.event_id = budget.link_to_event;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1370": "\nSELECT expense_id, expense_description, cost FROM expense WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Vice' AND last_name = 'President') GROUP BY expense_id HAVING SUM(cost) > 0 \n\t----- bird -----\tstudent_club",
    "1371": "\nSELECT COUNT(DISTINCT link_to_member) FROM attendance WHERE event_name = 'Women\\'s Soccer' GROUP BY link_to_member \n\t----- bird -----\tstudent_club",
    "1372": "\nSELECT T1.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Casey' AND T1.last_name = 'Mason' GROUP BY T1.date_received \n\t----- bird -----\tstudent_club",
    "1373": "\n\t----- bird -----\tstudent_club",
    "1374": "\nSELECT COUNT(event_id) \nFROM attendance \nWHERE member_id = (SELECT member_id FROM member WHERE phone = '954-555-6240');\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1375": "\nSELECT member_id, first_name, last_name FROM member WHERE zip IN (SELECT zip FROM major WHERE department = 'School of Applied Sciences, Technology and Education') GROUP BY member_id;\n\n\t----- bird -----\tstudent_club",
    "1376": "\nSELECT e.event_id, e.event_name, e.event_date, e.type, e.notes, e.location, e.status, \n       (e.spent / e.remaining) AS spend_to_budget_ratio\nFROM event e\nWHERE e.status = 'closed'\nORDER BY e.spent / e.remaining DESC;\n\n\t----- bird -----\tstudent_club",
    "1377": "\nSELECT COUNT(DISTINCT member_id) FROM member WHERE position = 'president';\n\n\t----- bird -----\tstudent_club",
    "1378": "\nSELECT MAX(b.spent) AS highest_budget_spend\nFROM budget b\nJOIN event e ON b.link_to_event = e.event_id;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1379": "\nSELECT COUNT(event_id) FROM event WHERE YEAR(event_date) = 2020;\n\n\t----- bird -----\tstudent_club",
    "1380": "\nSELECT SUM(expense.cost) AS total_amount_spent\nFROM expense\nJOIN member ON expense.link_to_member = member.member_id;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1381": "\nSELECT T1.first_name, T1.last_name\nFROM member AS T1\nJOIN attendance AS T2 ON T1.member_id = T2.link_to_member\nWHERE T2.event_status = 'attended' AND T2.event_id IN (\n  SELECT event_id\n  FROM event\n  GROUP BY event_id\n  HAVING COUNT(event_id) > 7\n)\n\n\t----- bird -----\tstudent_club",
    "1382": "\nSELECT e.event_id, e.event_name, e.event_date, e.type, e.notes, e.location, e.status\nFROM event e\nJOIN attendance a ON e.event_id = a.link_to_event\nWHERE e.member_id IN (\n  SELECT m.member_id\n  FROM member m\n  WHERE m.zip = (SELECT zip FROM zip_code WHERE city = 'Community Theater')\n)\n\n\t----- bird -----\tstudent_club",
    "1383": "\nSELECT member.first_name, member.last_name FROM member \nJOIN attendance ON member.member_id = attendance.link_to_member \nWHERE attendance.link_to_event = 'event' AND attendance.link_to_member LIKE '%Georgetown%' AND attendance.link_to_member LIKE '%South% Carolina%'\n\n\t----- bird -----\tstudent_club",
    "1384": "\nSELECT COUNT(*) FROM member AS M INNER JOIN income AS I ON M.member_id = I.link_to_member WHERE M.first_name = 'Grant' AND M.last_name = 'Gilmour' \n\t----- bird -----\tstudent_club",
    "1385": "\nSELECT m.first_name, m.last_name\nFROM member m\nWHERE m.zip IS NOT NULL\n  AND m.zip = (\n    SELECT t2.zip\n    FROM budget b\n    JOIN expense e ON b.budget_id = e.budget_id\n    WHERE e.expense_description = 'Income'\n      AND e.link_to_member = m.member_id\n  )\n  AND m.zip = (\n    SELECT t3.zip\n    FROM income i\n    JOIN member m2 ON i.link_to_member = m2.member_id\n    WHERE i.date_received >= '2023-10-01' AND i.date_received < '2024-01-01'\n  );\n\n\t----- bird -----\tstudent_club",
    "1386": "\nSELECT SUM(expense.cost) AS total_expense FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.zip = (SELECT zip FROM major WHERE major_name = 'Yearly Kickoff') AND YEAR(expense.expense_date) = YEAR(CURDATE()) - 1 \n\t----- bird -----\tstudent_club",
    "1387": "\nSELECT T1.member_id FROM member AS T1 INNER JOIN budget AS T2 ON T1.zip = T2.link_to_zip WHERE T1.position = 'Yearly Kickoff' GROUP BY T1.member_id HAVING COUNT(T1.member_id) > 1 SQL_END\n\t----- bird -----\tstudent_club",
    "1388": "\nSELECT m.first_name, e.expense_description\nFROM member m\nJOIN attendance a ON m.member_id = a.link_to_member\nJOIN expense e ON a.link_to_event = e.event_id\nWHERE e.expense_source = 'income'\nORDER BY SUM(e.amount) DESC;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1389": "\nSELECT e.event_name, e.event_date, e.type, e.notes\nFROM event e\nWHERE e.status = 'pending'\nORDER BY e.cost ASC\nLIMIT 1;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1390": "\nSELECT SUM(cost) / 100 * 100 AS yearly_kickoff_percentage\nFROM expense\nWHERE event_id = (SELECT event_id FROM event WHERE name = 'Yearly Kickoff');\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1391": "\nSELECT \n    COUNT(DISTINCT T1.member_id) AS ratio_students_majored_in_finance_and_physics,\n    SUM(T2.cost) / SUM(T3.amount) AS ratio_students_majored_in_finance_and_physics\nFROM \n    member AS T1\nJOIN \n    attendance AS T2 ON T1.zip = T2.link_to_zip\nJOIN \n    budget AS T3 ON T3.budget_id = T1.budget_id\nWHERE \n    T1.position = 'Finance' AND T1.position = 'Physics';\n\n\t----- bird -----\tstudent_club",
    "1392": "\nSELECT T1.source, SUM(T2.amount) AS total_amount\nFROM member AS T1\nJOIN expense AS T2 ON T1.member_id = T2.link_to_member\nWHERE T1.zip = '900016' AND T2.date_received LIKE '2019-09%'\nGROUP BY T1.source;\n\n\t----- bird -----\tstudent_club",
    "1393": "\nSELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member WHERE T2.event_id = (SELECT event_id FROM event WHERE event_name = 'Student_Club' AND status = 'active') \n\t----- bird -----\tstudent_club",
    "1394": "\nSELECT COUNT(DISTINCT member_id) AS number_of_members\nFROM member\nWHERE member_id IN (\n  SELECT link_to_member\n  FROM attendance\n  WHERE event_id = (SELECT event_id FROM event WHERE type = 'Physics Teaching')\n);\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1395": "\nSELECT COUNT(DISTINCT link_to_member) FROM attendance WHERE event_id = (SELECT event_id FROM event WHERE name = 'Community Theater' AND YEAR(event_date) = 2019) \n\t----- bird -----\tstudent_club",
    "1396": "\nSELECT COUNT(event_id) AS number_of_events_attended, major_name\nFROM attendance\nWHERE member_id = (SELECT member_id FROM member WHERE first_name = 'Luisa' AND last_name = 'Guidi')\nGROUP BY major_name;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1397": "\nSELECT AVG(expense_cost) AS average_food_spending\nFROM expense\nWHERE event_id IN (\n  SELECT event_id\n  FROM attendance\n  GROUP BY event_id\n  HAVING SUM(cost) > (SELECT SUM(cost) FROM budget)\n);\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1398": "\nSELECT event_id, event_name, SUM(cost) AS total_spent\nFROM expense\nWHERE category = 'advertisement'\nGROUP BY event_id\nORDER BY total_spent DESC\nLIMIT 1;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1399": "\nSELECT COUNT(*) FROM attendance WHERE link_to_member = 'Maya Mclean' AND event_id IN (SELECT event_id FROM event WHERE event_name = 'Women\\'s Soccer') \n\t----- bird -----\tstudent_club",
    "1400": "\nSELECT SUM(CASE WHEN event_type = 'Community Service' THEN 1 ELSE 0 END) / COUNT(*) * 100 AS community_service_percentage\nFROM event\nWHERE YEAR(event_date) = 2019 AND major_name = 'Student_Club';\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1401": "\nSELECT SUM(expense.cost) AS cost FROM expense WHERE expense.link_to_member = (SELECT event.event_id FROM event WHERE event.event_name = 'September Speaker') AND expense.expense_description = 'posters' \n\t----- bird -----\tstudent_club",
    "1402": "\nSELECT T1.t_shirt_size, COUNT(*) AS total_orders\nFROM member AS T1\nJOIN expense AS T2 ON T1.member_id = T2.link_to_member\nGROUP BY T1.t_shirt_size\nORDER BY total_orders DESC;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1403": "\nSELECT e.event_name, e.event_date, e.type, e.notes\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE e.cost > (SELECT SUM(cost) FROM expense WHERE link_to_member = e.member_id)\nORDER BY e.cost DESC;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1404": "\nSELECT e.event_name, SUM(e.expense_cost) AS total_value\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE e.event_name = 'October Meeting'\nGROUP BY e.event_name;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1405": "\nSELECT \n    b.category,\n    SUM(e.cost) AS budgeted_amount\nFROM \n    event e\nJOIN \n    major m ON e.link_to_major = m.major_id\nJOIN \n    zip_code z ON e.zip = z.zip_code\nJOIN \n    attendance a ON e.event_id = a.link_to_event\nWHERE \n    e.event_name = 'April Speaker'\nGROUP BY \n    b.category\nORDER BY \n    budgeted_amount ASC;\n\n\t----- bird -----\tstudent_club",
    "1406": "\n\t----- bird -----\tstudent_club",
    "1407": "\nSELECT b.category, SUM(e.cost) AS total_budgeted\nFROM budget b\nJOIN expense e ON b.budget_id = e.budget_id\nGROUP BY b.category\nORDER BY total_budgeted DESC\nLIMIT 3;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1408": "\nSELECT SUM(expense.cost) AS total_cost_spent FROM expense WHERE expense.expense_description = 'Parking' GROUP BY expense.expense_description;\n\n\t----- bird -----\tstudent_club",
    "1409": "\nSELECT SUM(expense.cost) AS total_expense FROM expense WHERE expense_date = '2019-08-20' AND link_to_member = (SELECT member_id FROM member WHERE zip = 8) \n\t----- bird -----\tstudent_club",
    "1410": "\nSELECT m.first_name, m.last_name, SUM(e.cost) AS total_cost\nFROM member m\nJOIN expense e ON m.member_id = e.link_to_member\nWHERE m.zip = 'rec4BLdZHS2Blfp4v'\nGROUP BY m.member_id;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1411": "\nSELECT expense_description, cost FROM expense WHERE member_id = (SELECT member_id FROM member WHERE first_name = 'Sacha' AND last_name = 'Harrison') GROUP BY expense_description HAVING SUM(cost) > 0 END \n\t----- bird -----\tstudent_club",
    "1412": "\nSELECT e.event_id, e.event_name, e.event_date, e.type, e.notes, e.location, e.status\nFROM event e\nJOIN member m ON e.link_to_member = m.member_id AND m.t_shirt_size = 'X-Large'\nWHERE e.status = 'pending' OR e.status = 'confirmed';\n\n\t----- bird -----\tstudent_club",
    "1413": "\nSELECT z.zip_code, m.first_name, m.last_name FROM member AS m JOIN zip_code AS z ON m.zip = z.zip WHERE m.zip IS NOT NULL AND SUM(e.amount) < 50 ;\n\n\t----- bird -----\tstudent_club",
    "1414": "\n\t----- bird -----\tstudent_club",
    "1415": "\nSELECT member_id, position FROM member WHERE zip = (SELECT zip FROM major WHERE major_name = 'Business') GROUP BY member_id HAVING COUNT(*) > 1 \n\t----- bird -----\tstudent_club",
    "1416": "\nSELECT COUNT(member_id) FROM member WHERE zip = (SELECT zip FROM zip_code WHERE type = 'Medium') GROUP BY member_id HAVING COUNT(member_id) > 1 \n\t----- bird -----\tstudent_club",
    "1417": "\nSELECT e.event_name, b.category, b.spent, b.remaining\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE b.remaining > 30;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1418": "\nSELECT event_name FROM event WHERE event_id = (SELECT event_id FROM attendance WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'MU' AND last_name = '215') GROUP BY event_id) \n\t----- bird -----\tstudent_club",
    "1419": "\nSELECT T1.category FROM event AS T1 INNER JOIN member AS T2 ON T1.member_id = T2.member_id WHERE T1.event_date LIKE '2020-03-24T12:00:00';\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1420": "\n\t----- bird -----\tstudent_club",
    "1421": "\nSELECT SUM(CASE WHEN T1.member_id = T2.member_id THEN 1 ELSE 0 END) / COUNT(T1.member_id) * 100 AS percentage\nFROM member AS T1\nJOIN attendance AS T2 ON T1.member_id = T2.link_to_member;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1422": "\nSELECT event_name FROM event WHERE location = 'MU 215' AND status = 'completed' GROUP BY event_name ORDER BY count(*) DESC \n\t----- bird -----\tstudent_club",
    "1423": "\nSELECT COUNT(*) FROM income WHERE amount = 50 SQL_END\n\t----- bird -----\tstudent_club",
    "1424": "\nSELECT COUNT(DISTINCT member_id) AS extra_large_tshirt_size FROM member WHERE t_shirt_size = 'extra large';\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1425": "\nSELECT COUNT(DISTINCT T1.major_id) AS majors_under_School_of_Applied_Science_and_Technology_and_Education\nFROM member AS T1\nJOIN major AS T2 ON T1.zip = T2.zip\nWHERE T2.department = 'School of Applied Sciences, Technology and Education';\n\n\t----- bird -----\tstudent_club",
    "1426": "\nSELECT T1.last_name, T1.department, T1.college\nFROM member AS T1\nJOIN major AS T2 ON T1.zip = T2.zip_code\nWHERE T2.major_name = 'Environmental Engineering';\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1427": "\nSELECT T1.category, T2.spent AS budget_spent\nFROM event AS T1\nJOIN member AS T2 ON T1.link_to_member = T2.member_id\nWHERE T1.location = 'MU 215' AND T1.type = 'guest speaker'\nGROUP BY T1.event_id;\n\n\t----- bird -----\tstudent_club",
    "1428": "\nSELECT T1.zip, T1.city, T1.state \nFROM member AS T1 \nJOIN major AS T2 ON T1.link_to_major = T2.major_id \nWHERE T2.department = 'Electrical and Computer Engineering' AND T1.zip IS NOT NULL;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1429": "\nSELECT event_name FROM event WHERE event_id = (SELECT link_to_event FROM attendance WHERE member_id = (SELECT member_id FROM member WHERE first_name = 'Vice' AND last_name = 'President' AND zip = 900 E. Washington St.) LIMIT 1) \n\t----- bird -----\tstudent_club",
    "1430": "\nSELECT T3.last_name, T3.position \nFROM member AS T1 \nJOIN attendance AS T2 ON T1.member_id = T2.link_to_member \nJOIN expense AS T3 ON T2.link_to_event = T3.event_id \nWHERE T3.date_received = '09/10/2019' AND T1.zip = (SELECT zip FROM zip_code WHERE type = 'pizza');\n\n\t----- bird -----\tstudent_club",
    "1431": "\nSELECT T2.last_name\nFROM member AS T1\nJOIN attendance AS T3 ON T1.member_id = T3.link_to_member\nJOIN event AS T4 ON T3.link_to_event = T4.event_id\nWHERE T4.type = 'women_soccer'\nGROUP BY T2.last_name\nORDER BY T2.last_name;\n\n\t----- bird -----\tstudent_club",
    "1432": "\nSELECT SUM(amount) AS total_amount, COUNT(*) AS count\nFROM expense\nWHERE member_id = (SELECT member_id FROM member WHERE t_shirt_size = 'medium')\nGROUP BY SUM(amount)\nHAVING AVG(date_received) = 50;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1433": "\n\t----- bird -----\tstudent_club",
    "1434": "\nSELECT T1.zip_code\nFROM zip_code AS T1\nJOIN member AS T2 ON T1.zip = T2.zip\nWHERE T2.zip = (SELECT T3.zip FROM zip_code AS T3 WHERE T3.state = 'Puerto Rico' AND T3.city = 'San Juan Municipio')\n\n\t----- bird -----\tstudent_club",
    "1435": "\nSELECT event_name FROM event WHERE event_date BETWEEN '2019-03-15' AND '2019-03-20' AND status = 'closed';\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1436": "\nSELECT e.event_id, e.event_name, e.event_date, e.type, e.notes, e.location, e.status\nFROM event e\nJOIN attendance a ON e.event_id = a.link_to_event\nWHERE e.status = 'paid' AND e.amount > 50;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1437": "\nSELECT m.first_name, m.last_name, e.event_id\nFROM member m\nJOIN attendance a ON m.member_id = a.link_to_member\nJOIN event e ON a.link_to_event = e.event_id\nWHERE STRFTIME('%Y-%m', a.date_received) BETWEEN '2019-01-10' AND '2019-11-19'\n\n\t----- bird -----\tstudent_club",
    "1438": "\nSELECT T1.zip, T1.major_name\nFROM member AS T1\nJOIN major AS T2 ON T1.zip = T2.zip\nWHERE T1.first_name = 'Katy' AND T2.major_name = 'rec1N0upiVLy5esTO';\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1439": "\nSELECT member_id, phone FROM member WHERE zip = (SELECT zip FROM major WHERE major_name = 'College of Agriculture and Applied Sciences') AND position = 'business' \n\t----- bird -----\tstudent_club",
    "1440": "\nSELECT T3.email\nFROM member AS T1\nJOIN expense AS T2 ON T1.member_id = T2.link_to_member\nJOIN budget AS T3 ON T2.link_to_budget = T3.budget_id\nWHERE T2.expense_date BETWEEN '2019-09-10' AND '2019-11-19'\nAND T2.cost > 20;\n\n\t----- bird -----\tstudent_club",
    "1441": "\nSELECT COUNT(DISTINCT member_id) FROM member WHERE member_id IN (SELECT link_to_major FROM major WHERE major_name = 'College of Education & Human Services') SQL_END\n\t----- bird -----\tstudent_club",
    "1442": "\nSELECT SUM(CASE WHEN event.status = 'OVER' THEN 1 ELSE 0 END) / COUNT(event.event_id) AS percentage\nFROM event\nJOIN budget ON event.event_id = budget.link_to_event;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1443": "\nSELECT event.event_id, event.location, event.status\nFROM event\nWHERE event.event_date BETWEEN '2019-11-01' AND '2020-03-31';\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1444": "\nSELECT e.expense_description, SUM(e.cost) AS total_spent\nFROM expense e\nJOIN event e_event ON e.event_id = e_event.event_id\nGROUP BY e.expense_description\nHAVING AVG(e.cost) > 50;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1445": "\nSELECT T1.first_name, T1.last_name \nFROM member AS T1 \nJOIN zip_code AS T2 ON T1.zip = T2.zip \nWHERE T2.t_shirt_size = 'extra large';\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1446": "\nSELECT COUNT(*) AS count, SUM(CASE WHEN type = 'PO' THEN 1 ELSE 0 END) / COUNT(*) * 100 AS percentage\nFROM zip_code;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1447": "\nSELECT e.event_name, e.location\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1448": "\nSELECT e.event_name, e.event_date\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE b.category = 'pizza' AND b.spent > 50 AND b.spent < 100;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1449": "\nSELECT m.first_name, m.last_name, m.zip, e.expense_description\nFROM member m\nJOIN expense e ON m.member_id = e.link_to_member;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1450": "\nSELECT T1.city, T1.state \nFROM event AS T1 \nJOIN income AS T2 ON T1.event_id = T2.link_to_member \nWHERE T2.amount > 40;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1451": "\nSELECT m.first_name, m.last_name, SUM(e.amount) AS total_amount\nFROM member m\nJOIN attendance a ON m.member_id = a.link_to_member\nWHERE a.link_to_event IN (\n  SELECT event.event_id\n  FROM event\n  WHERE event.status = 'paid'\n)\nGROUP BY m.member_id\nHAVING COUNT(DISTINCT event.event_id) > 1;\n\n\t----- bird -----\tstudent_club",
    "1452": "\nSELECT AVG(cost) AS average_amount_paid\nFROM expense\nWHERE link_to_member = (SELECT member_id FROM member WHERE position NOT IN ('member'))\nGROUP BY link_to_member;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1453": "\nSELECT event_name\nFROM event\nWHERE (parking_cost - average_parking_cost) < 0;\n\n\t----- bird -----\tstudent_club",
    "1454": "\nSELECT SUM(cost) / SUM(amount) * 100 AS percentage\nFROM expense;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1455": "\nSELECT b.category, SUM(e.cost) as total_cost\nFROM budget b\nJOIN expense e ON b.budget_id = e.budget_id\nWHERE e.expense_description IN ('water', 'chips', 'cookies')\nGROUP BY b.category\nORDER BY total_cost DESC\nLIMIT 1\n\n\t----- bird -----\tstudent_club",
    "1456": "\nSELECT T1.first_name, T1.last_name \nFROM member AS T1 \nJOIN expense AS T2 ON T1.member_id = T2.link_to_member \nWHERE T2.expense_description LIKE '%spending%' \nORDER BY T2.spent DESC \nLIMIT 5;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1457": "\nSELECT m.first_name, m.last_name, e.expense_description, e.cost, e.approved, e.link_to_member\nFROM member m\nJOIN expense e ON m.member_id = e.link_to_member;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1458": "SQL_END\nSELECT (SUM(CASE WHEN T1.zip = 'ME' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.zip = 'VT' THEN 1 ELSE 0 END)) / COUNT(T1.zip) * 100 AS percentage FROM member AS T1 INNER JOIN major AS T2 ON T1.zip = T2.zip_code WHERE T2.major_name = 'Maine' AND T1.zip IS NOT NULL GROUP BY T1.zip;\n\t----- bird -----\tstudent_club",
    "1459": "\nSELECT major_name, department FROM member WHERE member_id = (SELECT member_id FROM attendance WHERE link_to_member = 'Garrett Gerke') \n\t----- bird -----\tstudent_club",
    "1460": "\nSELECT T1.first_name, T1.last_name, SUM(T2.cost) AS total_cost\nFROM member AS T1\nJOIN expense AS T2 ON T1.member_id = T2.link_to_member\nWHERE T2.expense_description IN ('water', 'veggie tray', 'supplies')\nGROUP BY T1.member_id;\n\n\t----- bird -----\tstudent_club",
    "1461": "\nSELECT T1.last_name, T2.phone\nFROM member AS T1\nJOIN major AS T2 ON T1.zip = T2.zip_code\nWHERE T1.link_to_major = 'Elementary Education';\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1462": "\nSELECT T1.category, SUM(T2.cost) AS budgeted_amount\nFROM event AS T1\nJOIN budget AS T2 ON T1.event_id = T2.link_to_event\nWHERE T1.event_name = 'January Speaker'\nGROUP BY T1.event_name;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1463": "\nSELECT event_name\nFROM event\nWHERE event_id IN (\n  SELECT event_id\n  FROM budget\n  WHERE category = 'Food'\n)\n\n\t----- bird -----\tstudent_club",
    "1464": "\nSELECT T1.first_name, T1.last_name, SUM(T2.amount) AS total_amount\nFROM member AS T1\nJOIN attendance AS T2 ON T1.member_id = T2.link_to_member\nWHERE T2.date_received = '9/09/2019'\nGROUP BY T1.member_id;\n\n\t----- bird -----\tstudent_club",
    "1465": "\n\t----- bird -----\tstudent_club",
    "1466": "\nSELECT T1.first_name, T1.last_name, T2.department\nFROM member AS T1\nJOIN major AS T2 ON T1.zip = T2.zip_code\nWHERE T1.position = 'Secretary';\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1467": "\nSELECT e.event_name, SUM(e.cost) AS total_spent\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE b.category = 'Speaker Gifts'\nGROUP BY e.event_name;\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1468": "\n\t----- bird -----\tstudent_club",
    "1469": "\nSELECT m.first_name, m.last_name, m.position\nFROM member AS m\nJOIN zip_code AS z ON m.zip = z.zip\nWHERE z.city = 'Lincolnnton' AND z.state = 'North Carolina' AND z.short_state = '28092';\nSQL_END\n\n\t----- bird -----\tstudent_club",
    "1470": "\nSELECT COUNT(DISTINCT GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium' \n\t----- bird -----\tdebit_card_specializing",
    "1471": "\nSELECT SUM(CASE WHEN T1.CustomerID = 0 THEN 1 ELSE 0 END) / COUNT(T1.CustomerID) AS ratio FROM customers AS T1 INNER JOIN gasstations AS T2 ON T1.CustomerID = T2.GasStationID WHERE T1.Currency = 'EUR' GROUP BY T1.CustomerID HAVING SUM(CASE WHEN T1.CustomerID = 0 THEN 1 ELSE 0 END) / COUNT(T1.CustomerID) > 0.5 \n\t----- bird -----\tdebit_card_specializing",
    "1472": "\nSELECT c.CustomerID, c.CustomerName\nFROM customers c\nWHERE c.Date BETWEEN '2012-01-01' AND '2012-12-31'\nGROUP BY c.CustomerID\nHAVING MIN(c.Amount)\n\n\t----- bird -----\tdebit_card_specializing",
    "1473": "\nSELECT AVG(Consumption) FROM yearmonth WHERE Date LIKE '2013-01%' GROUP BY CustomerID;\n\n\t----- bird -----\tdebit_card_specializing",
    "1474": "\nSELECT c.CustomerID, c.Currency\nFROM customers c\nJOIN gasstations g ON c.CustomerID = g.CustomerID\nWHERE c.Currency = 'CZK'\nGROUP BY c.CustomerID, c.Currency\nORDER BY SUM(T1.Amount) DESC\nLIMIT 1;\nSQL_END\n\n\t----- bird -----\tdebit_card_specializing",
    "1475": "\nSELECT COUNT(DISTINCT t1.CustomerID)\nFROM customers c\nJOIN transactions_1k t ON c.CustomerID = t.CustomerID\nWHERE YEAR(t.Date) = 2012 AND t.TransactionID IN (\n    SELECT T2.TransactionID\n    FROM yearmonth ym\n    JOIN gasstations g ON ym.CustomerID = g.CustomerID\n    WHERE ym.Date LIKE '2012%'\n)\nAND t.Amount < 30000;\n\n\t----- bird -----\tdebit_card_specializing",
    "1476": "\nSELECT \n    SUM(CASE WHEN T1.CustomerID = 2012 THEN T3.Amount ELSE 0 END) AS CZK_Paying_Gas_Consumption,\n    SUM(CASE WHEN T1.CustomerID = 2012 THEN T4.Amount ELSE 0 END) AS EUR_Paying_Gas_Consumption\nFROM \n    customers AS T1\nJOIN \n    gasstations AS T2 ON T1.CustomerID = T2.GasStationID\nJOIN \n    transactions_1k AS T3 ON T1.CustomerID = T3.CustomerID AND T3.Date = '2012-01-01'\nJOIN \n    yearmonth AS T4 ON T3.Date = T4.Date\nWHERE \n    T1.Segment = 'CZK' AND T1.Currency = 'CZK'\nGROUP BY \n    T1.CustomerID, T1.Segment;\n\n\t----- bird -----\tdebit_card_specializing",
    "1477": "\n\t----- bird -----\tdebit_card_specializing",
    "1478": "\n\t----- bird -----\tdebit_card_specializing",
    "1479": "\n\t----- bird -----\tdebit_card_specializing",
    "1480": "\nSELECT Date, SUM(Consumption) AS Total_Consumption\nFROM transactions_1k\nWHERE CustomerID IN (\n  SELECT CustomerID\n  FROM customers\n  WHERE Segment = 'SME'\n)\nAND YEAR(Date) = 2013\nGROUP BY Date\nORDER BY Total_Consumption DESC\n\n\t----- bird -----\tdebit_card_specializing",
    "1481": "\nSELECT \n    (CASE \n        WHEN MIN(Consumption) = 0 THEN NULL\n        ELSE AVG(Cast(Consumption AS REAL)) / 12\n    END) - \n    (SELECT SUM(Amount) FROM transactions_1k WHERE Date LIKE '2013-01%' AND CustomerID IN (\n        SELECT CustomerID FROM customers WHERE Segment = 'SME' GROUP BY CustomerID HAVING COUNT(*) > 1\n    )) AS difference,\n    (CASE \n        WHEN MIN(Consumption) = 0 THEN NULL\n        ELSE AVG(Cast(Consumption AS REAL)) / 12\n    END) - \n    (SELECT SUM(Amount) FROM transactions_1k WHERE Date LIKE '2013-01%' AND CustomerID IN (\n        SELECT CustomerID FROM customers WHERE Segment = 'LAM' GROUP BY CustomerID HAVING COUNT(*) > 1\n    )) AS difference,\n    (CASE \n        WHEN MIN(Consumption) = 0 THEN NULL\n        ELSE AVG(Cast(Consumption AS REAL)) / 12\n    END) - \n    (SELECT SUM(Amount) FROM transactions_1k WHERE Date LIKE '2013-01%' AND CustomerID IN (\n        SELECT CustomerID FROM customers WHERE Segment = 'KAM' GROUP BY CustomerID HAVING COUNT(*) > 1\n    )) AS difference,\n    (CASE \n        WHEN MIN(Consumption) = 0 THEN NULL\n        ELSE AVG(Cast(Consumption AS REAL)) / 12\n    END) - \n    (SELECT SUM(Amount) FROM transactions_1k WHERE Date LIKE '2013-01%' AND CustomerID IN (\n        SELECT CustomerID FROM customers WHERE Segment = 'SME' GROUP BY CustomerID HAVING COUNT(*) > 1\n    )) AS difference\nFROM yearmonth;\n\n\t----- bird -----\tdebit_card_specializing",
    "1482": "\nSELECT \n    Segment,\n    MAX(CASE WHEN YearMonth.Date >= '2012-01-01' AND YearMonth.Date < '2013-01-01' THEN Amount ELSE 0 END) AS MaxPercentageIncreaseEUR,\n    MIN(CASE WHEN YearMonth.Date >= '2012-01-01' AND YearMonth.Date < '2013-01-01' THEN Amount ELSE 0 END) AS MinPercentageIncreaseEUR\nFROM \n    customers c\nJOIN \n    gasstations gs ON c.CustomerID = gs.CustomerID\nJOIN \n    transactions_1k t ON c.CustomerID = t.CustomerID AND YearMonth.Date >= '2012-01-01' AND YearMonth.Date < '2013-01-01'\nJOIN \n    yearmonth ym ON c.CustomerID = ym.CustomerID\nWHERE \n    gs.ChainID = 1\nGROUP BY \n    Segment\nORDER BY \n    MaxPercentageIncreaseEUR DESC, MinPercentageIncreaseEUR ASC;\n\n\t----- bird -----\tdebit_card_specializing",
    "1483": "\nSELECT SUM(transactions_1k.Amount) AS TotalConsumption FROM transactions_1k INNER JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE DATE(transactions_1k.Date) BETWEEN '2013-08-01' AND '2013-11-30' GROUP BY DATE(transactions_1k.Date) \n\t----- bird -----\tdebit_card_specializing",
    "1484": "\nSELECT COUNT(DISTINCT GasStationID) - COUNT(DISTINCT GasStationID) AS difference FROM gasstations WHERE Country = 'Czech Republic' AND Segment = 'discount' UNION ALL SELECT COUNT(DISTINCT GasStationID) - COUNT(DISTINCT GasStationID) AS difference FROM gasstations WHERE Country = 'Slovakia' AND Segment = 'discount' \n\t----- bird -----\tdebit_card_specializing",
    "1485": "\nSELECT T1.Amount - T2.Amount AS difference\nFROM transactions_1k AS T1\nJOIN customers AS T2 ON T1.CustomerID = T2.CustomerID\nWHERE T1.Date = '2013-04' AND T2.CustomerID = 7\nAND T1.Date = '2013-05'\n\n\t----- bird -----\tdebit_card_specializing",
    "1486": "\nSELECT \n    SUM(CASE WHEN T1.Country = 'CZ' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.Country = 'EUR' THEN 1 ELSE 0 END)\nFROM \n    customers AS T1\nJOIN \n    gasstations AS T2 ON T1.CustomerID = T2.GasStationID\nJOIN \n    transactions_1k AS T3 ON T3.Date = T2.Date AND T3.TransactionID = T3.ProductID;\n\n\t----- bird -----\tdebit_card_specializing",
    "1487": "\nSELECT c.CustomerID, c.CustomerName\nFROM customers c\nWHERE c.CustomerID = (\n    SELECT t1.CustomerID\n    FROM transactions_1k t1\n    JOIN gasstations g ON t1.GasStationID = g.GasStationID\n    WHERE g.Country = 'Europe' AND t1.Date LIKE '2013-10%'\n)\nAND c.Currency = 'EUR'\nORDER BY t1.Date DESC, t1.Amount DESC;\n\n\t----- bird -----\tdebit_card_specializing",
    "1488": "\nSELECT c.CustomerID, SUM(t.Amount) AS TotalConsumption\nFROM customers c\nJOIN transactions_1k t ON c.CustomerID = t.CustomerID\nWHERE c.CustomerID IN (\n  SELECT GasStationID\n  FROM yearmonth\n  WHERE Date >= '2023-01-01' AND Date < '2023-12-31'\n)\nGROUP BY c.CustomerID\nORDER BY TotalConsumption DESC;\n\n\t----- bird -----\tdebit_card_specializing",
    "1489": "\nSELECT SUM(transactions_1k.Amount) AS TotalConsumption FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE DATE(transactions_1k.Date) = '2013-05' GROUP BY customers.CustomerID ORDER BY Date DESC \n\t----- bird -----\tdebit_card_specializing",
    "1490": "\nSELECT SUM(CASE WHEN T1.Amount > 46.73 THEN 1 ELSE 0 END) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.CustomerID IN (SELECT CustomerID FROM yearmonth WHERE Date >= '2023-01-01' AND Date < '2023-12-31') GROUP BY T1.CustomerID SQL_END\n\t----- bird -----\tdebit_card_specializing",
    "1491": "\nSELECT T2.Country, COUNT(*) AS TotalValueForMoneyGasStations\nFROM customers AS T1\nJOIN gasstations AS T2 ON T1.CustomerID = T2.GasStationID\nJOIN transactions_1k AS T3 ON T3.TransactionID = T1.TransactionID\nGROUP BY T2.Country;\n\n\t----- bird -----\tdebit_card_specializing",
    "1492": "\nSELECT SUM(CASE WHEN T1.CustomerID = 20 THEN 1 ELSE 0 END) * 100 / COUNT(T1.CustomerID) AS percentage FROM customers AS T1 INNER JOIN gasstations AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' GROUP BY T1.CustomerID HAVING SUM(CASE WHEN T1.CustomerID = 20 THEN 1 ELSE 0 END) * 100 / COUNT(T1.CustomerID) > 50 \n\t----- bird -----\tdebit_card_specializing",
    "1493": "\nSELECT SUM(CASE WHEN T1.Date LIKE '2012-02%' THEN 1 ELSE 0 END) / COUNT(T1.CustomerID) * 100 AS percentage FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date LIKE '2012-02%' GROUP BY T1.CustomerID ORDER BY percentage DESC \n\t----- bird -----\tdebit_card_specializing",
    "1494": "\n\t----- bird -----\tdebit_card_specializing",
    "1495": "\nSELECT c.CustomerID, SUM(t.Amount) AS TotalConsumption\nFROM customers c\nJOIN transactions_1k t ON c.CustomerID = t.CustomerID\nWHERE strftime('%Y-%m', t.Date) = '2013-09'\nGROUP BY c.CustomerID\nORDER BY TotalConsumption DESC\nLIMIT 1;\n\n\t----- bird -----\tdebit_card_specializing",
    "1496": "\nSELECT c.CustomerID, c.Segment\nFROM customers c\nWHERE c.Date BETWEEN '2013-09-01' AND '2013-09-30'\nGROUP BY c.CustomerID, c.Segment\nORDER BY SUM(c.Amount) / COUNT(c.TransactionID) ASC\nLIMIT 1;\n\n\t----- bird -----\tdebit_card_specializing",
    "1497": "\nSELECT c.CustomerID, c.Segment, c.Currency\nFROM customers c\nWHERE c.CustomerID = (\n  SELECT t1.CustomerID\n  FROM transactions_1k t1\n  WHERE t1.Date = '2012-06' AND t1.Time LIKE '%-%'\n)\nAND c.CustomerID NOT IN (\n  SELECT t2.CustomerID\n  FROM yearmonth t2\n  WHERE t2.Date BETWEEN '2012-01' AND '2012-05'\n)\nGROUP BY c.CustomerID, c.Segment, c.Currency\nHAVING SUM(t3.Amount) = (\n  SELECT MAX(t4.Amount)\n  FROM transactions_1k t4\n  WHERE t4.Date = '2012-06' AND t4.Time LIKE '%-%'\n)\nORDER BY SUM(t3.Amount) DESC\n\n\t----- bird -----\tdebit_card_specializing",
    "1498": "\nSELECT MAX(Consumption) AS HighestMonthlyConsumption FROM yearmonth WHERE Date LIKE '2012%' GROUP BY Date \n\t----- bird -----\tdebit_card_specializing",
    "1499": "\nSELECT t1.Date, SUM(t2.Amount) AS TotalConsumption\nFROM transactions_1k AS t1\nJOIN customers AS t2 ON t1.CustomerID = t2.CustomerID\nWHERE t1.GasStationID IN (\n  SELECT GasStationID\n  FROM gasstations\n  WHERE Segment = 'Euro'\n)\nGROUP BY t1.Date\nORDER BY TotalConsumption DESC\nLIMIT 1;\n\n\t----- bird -----\tdebit_card_specializing",
    "1500": "\nSELECT DISTINCT T2.Description\nFROM transactions_1k AS T1\nJOIN gasstations AS G ON T1.GasStationID = G.GasStationID\nJOIN yearmonth AS YM ON T1.Date = YM.Date AND YM.CustomerID = T1.CustomerID\nWHERE YM.Date LIKE '2013-09%'\n\n\t----- bird -----\tdebit_card_specializing",
    "1501": "\nSELECT DISTINCT GasStationID, Country\nFROM gasstations\nWHERE Date LIKE '%2013-06';\nSQL_END\n\n\t----- bird -----\tdebit_card_specializing",
    "1502": "\nSELECT DISTINCT g.ChainID\nFROM gasstations g\nJOIN transactions_1k t ON g.GasStationID = t.GasStationID\nWHERE t.Date LIKE '%EUR%'\nGROUP BY g.ChainID;\nSQL_END\n\n\t----- bird -----\tdebit_card_specializing",
    "1503": "\nSELECT T1.Description \nFROM transactions_1k AS T1 \nJOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID \nJOIN customers AS T3 ON T1.CustomerID = T3.CustomerID \nWHERE T2.Country = 'EURO' AND T1.Date LIKE '%%-%%'\n\n\t----- bird -----\tdebit_card_specializing",
    "1504": "\nSELECT AVG(Price) AS Average_Price\nFROM transactions_1k\nWHERE Date = '2012-01-01';\nSQL_END\n\n\t----- bird -----\tdebit_card_specializing",
    "1505": " \n\t----- bird -----\tdebit_card_specializing",
    "1506": "\nSELECT DISTINCT T1.Description\nFROM transactions_1k AS T1\nJOIN gasstations AS G ON T1.GasStationID = G.GasStationID\nWHERE G.Country = 'Czech Republic';\nSQL_END\n\n\t----- bird -----\tdebit_card_specializing",
    "1507": "\nSELECT T2.Date, T2.Time\nFROM transactions_1k AS T1\nJOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID\nWHERE T2.ChainID = 11;\nSQL_END\n\n\t----- bird -----\tdebit_card_specializing",
    "1508": "\nSELECT COUNT(DISTINCT GasStationID) AS TransactionsCount\nFROM transactions_1k\nWHERE Country = 'Czech Republic'\n  AND GasStationID IN (\n    SELECT GasStationID\n    FROM gasstations\n    WHERE Segment = 'gas' -- Assuming the segment is 'gas' for this example\n  )\n  AND Price > 1000;\n\n\t----- bird -----\tdebit_card_specializing",
    "1509": "\nSELECT COUNT(*) AS TransactionsCount\nFROM transactions_1k\nWHERE Date >= '2012-01-01';\nSQL_END\n\n\t----- bird -----\tdebit_card_specializing",
    "1510": "\nSELECT AVG(Price) AS Average_Price\nFROM transactions_1k\nWHERE GasStationID IN (\n  SELECT GasStationID\n  FROM gasstations\n  WHERE Country = 'Czech Republic'\n)\nORDER BY Date;\nSQL_END\n\n\t----- bird -----\tdebit_card_specializing",
    "1511": "\nSELECT \n    c.CustomerID,\n    AVG(t.Amount) AS AverageTotalPrice\nFROM \n    customers c\nJOIN \n    gasstations g ON c.CustomerID = g.CustomerID\nWHERE \n    c.Segment = 'euro'\nGROUP BY \n    c.CustomerID;\n\nSQL_END\n\t----- bird -----\tdebit_card_specializing",
    "1512": "\nSELECT c.CustomerID, c.CustomerName\nFROM customers c\nWHERE c.CustomerID = (\n  SELECT t1.CustomerID\n  FROM transactions_1k t1\n  WHERE t1.Date = '2012-08-25'\n)\nAND c.CustomerID IN (\n  SELECT t2.CustomerID\n  FROM yearmonth t2\n  WHERE t2.Date BETWEEN '2012-08-24' AND '2012-09-23'\n)\nGROUP BY c.CustomerID, c.CustomerName\nHAVING SUM(t3.Amount) = (\n  SELECT MAX(t3.Amount)\n  FROM transactions_1k t3\n  WHERE t3.Date = '2012-08-25'\n)\nORDER BY SUM(t3.Amount) DESC\n\n\t----- bird -----\tdebit_card_specializing",
    "1513": "\nSELECT T1.Country\nFROM customers AS T1\nJOIN gasstations AS T2 ON T1.CustomerID = T2.GasStationID\nWHERE T2.Date BETWEEN '2012-08-25' AND '2012-09-24'\nGROUP BY T1.Country\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n\t----- bird -----\tdebit_card_specializing",
    "1514": "\nSELECT T1.Currency\nFROM transactions_1k AS T1\nJOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID\nWHERE T1.Date = '2012-08-24' AND T1.Time LIKE '%:00:00:00'\n\n\t----- bird -----\tdebit_card_specializing",
    "1515": "\nSELECT DISTINCT Segment\nFROM customers\nWHERE Date = '2012-08-23 21:20:00';\n\n\t----- bird -----\tdebit_card_specializing",
    "1516": "\nSELECT COUNT(*) AS Transactions_Paid\nFROM transactions_1k\nWHERE Date = '2012-08-26'\n  AND Time >= '07:00:00' -- Morning of 2012/8/26\n  AND Time < '19:00:00';  -- Afternoon of 2012/8/26\n\n\t----- bird -----\tdebit_card_specializing",
    "1517": "\nSELECT Segment FROM customers WHERE CustomerID = ( SELECT CustomerID FROM transactions_1k ORDER BY Date ASC LIMIT 1 ) \n\t----- bird -----\tdebit_card_specializing",
    "1518": "\n\t----- bird -----\tdebit_card_specializing",
    "1519": "\nSELECT DISTINCT T2.ProductID FROM transactions_1k AS T1 INNER JOIN gasstations AS G ON T1.GasStationID = G.GasStationID WHERE T1.Date = '2012-08-23 21:20:00' AND T1.Time LIKE '%23%';\n\n\t----- bird -----\tdebit_card_specializing",
    "1520": "\nSELECT T1.Date, T1.Amount * 0.0124 AS Expenses\nFROM transactions_1k AS T1\nJOIN customers AS C ON T1.CustomerID = C.CustomerID\nWHERE T1.Date BETWEEN '2012-08-24' AND '2012-09-23'\nAND C.CustomerID = (SELECT CustomerID FROM yearmonth WHERE Date = '2012-08-24');\n\n\t----- bird -----\tdebit_card_specializing",
    "1521": "\nSELECT COUNT(*) AS Transactions\nFROM transactions_1k\nWHERE Date BETWEEN '2012-08-26 08:00:00' AND '2012-08-26 09:00:00'\nAND CustomerID IN (\n    SELECT CustomerID\n    FROM customers\n    WHERE Segment = 'CZE'\n)\n\n\t----- bird -----\tdebit_card_specializing",
    "1522": "\nSELECT T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2013-06' AND T2.Amount = 214582.17;\nSQL_END\n\n\t----- bird -----\tdebit_card_specializing",
    "1523": "\nSELECT T1.Country FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.GasStationID = 667467 AND T2.Date LIKE '2023-01-%' \n\t----- bird -----\tdebit_card_specializing",
    "1524": "\nSELECT DISTINCT T1.Country\nFROM customers AS T1\nJOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID\nWHERE T2.Date BETWEEN '2012-08-24' AND '2012-09-30'\nAND T2.Amount = 548.4;\n\n\t----- bird -----\tdebit_card_specializing",
    "1525": "\nSELECT \n    SUM(CASE WHEN T1.Date >= '2012-08-25' THEN 1 ELSE 0 END) / COUNT(T1.CustomerID) * 100 AS percentage\nFROM \n    customers C\nJOIN \n    gasstations G ON C.CustomerID = G.CustomerID\nJOIN \n    transactions_1k T1 ON C.CustomerID = T1.CustomerID AND T1.Date >= '2012-08-25'\nGROUP BY \n    C.CustomerID;\n\n\t----- bird -----\tdebit_card_specializing",
    "1526": "\nSELECT\n  (2013 - 2012) * 100 / 2012 AS consumption_decrease_rate\nFROM\n  yearmonth\nWHERE\n  Date = '2012-08-25' AND TransactionID IN (\n    SELECT\n      t.TransactionID\n    FROM\n      transactions_1k t\n    WHERE\n      t.Date = '2013-01-01'\n  )\n\n\t----- bird -----\tdebit_card_specializing",
    "1527": "\nSELECT g.Segment, g.Currency\nFROM gasstations g\nJOIN transactions_1k t ON g.GasStationID = t.GasStationID\nWHERE t.Date >= '2023-01-01' AND t.Date < '2023-12-31'\nGROUP BY g.Segment, g.Currency\nORDER BY SUM(t.Amount) DESC\nLIMIT 1;\n\n\t----- bird -----\tdebit_card_specializing",
    "1528": "\nSELECT \n    SUM(CASE WHEN Segment = 'premium' THEN 1 ELSE 0 END) / COUNT(*) * 100 AS percentage\nFROM \n    gasstations\nWHERE \n    Country = 'SVK'\nGROUP BY \n    Segment;\n\n\t----- bird -----\tdebit_card_specializing",
    "1529": "\nSELECT T3.Amount FROM transactions_1k AS T1K INNER JOIN gasstations AS G ON T1K.GasStationID = G.GasStationID WHERE T1K.CustomerID = 38508 AND T1K.Date LIKE '2012-01';\nSQL_END\n\n\t----- bird -----\tdebit_card_specializing",
    "1530": "SQL_END\n\nSELECT p.Description FROM products p INNER JOIN transactions_1k t ON p.ProductID = t.ProductID WHERE t.Date >= '2023-01-01' AND t.Date < '2023-12-31' GROUP BY p.ProductID ORDER BY SUM(t.Amount) DESC LIMIT 5 \n\t----- bird -----\tdebit_card_specializing",
    "1531": "\nSELECT c.CustomerID, SUM(t.Amount) AS TotalAmount, AVG(t.Price) AS AveragePricePerItem\nFROM customers c\nJOIN transactions_1k t ON c.CustomerID = t.CustomerID\nGROUP BY c.CustomerID;\nSQL_END\n\n\t----- bird -----\tdebit_card_specializing",
    "1532": "\nSELECT T1.Country\nFROM customers AS T1\nJOIN gasstations AS T2 ON T1.CustomerID = T2.GasStationID\nWHERE T2.ProductID = 2\nGROUP BY T1.Country\nORDER BY COUNT(*) DESC\nLIMIT 1;\nSQL_END\n\n\t----- bird -----\tdebit_card_specializing",
    "1533": "\nSELECT T3.Date, T3.Consumption\nFROM transactions_1k AS T1\nJOIN yearmonth AS T2 ON T1.Date = T2.Date\nJOIN customers AS T3 ON T1.CustomerID = T3.CustomerID\nWHERE T1.ProductID = 5 AND T1.Amount > 29.00;\n\n\t----- bird -----\tdebit_card_specializing"
}