db_id,train_example
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Name movie titles released in year 1945. Sort the listing by the descending order of movie popularity. released in the year 1945 refers to movie_release_year = 1945;
CREATED SQL: SELECT movie_title FROM movies WHERE movie_release_year = 1945 ORDER BY movie_popularity DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: State the most popular movie? When was it released and who is the director for the movie? most popular movie refers to MAX(movie_popularity); when it was released refers to movie_release_year; director for the movie refers to director_name;
CREATED SQL: SELECT movie_title, movie_release_year, director_name FROM movies ORDER BY movie_popularity DESC LIMIT 1 
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What is the name of the longest movie title? When was it released? longest movie title refers to MAX(LENGTH(movie_title)); when it was released refers to movie_release_year;
CREATED SQL: SELECT movie_title, movie_release_year FROM movies ORDER BY LENGTH(movie_popularity) DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Name the movie with the most ratings. movie with the most rating refers to MAX(SUM(rating_score));
CREATED SQL: SELECT movie_title FROM movies GROUP BY movie_title ORDER BY COUNT(movie_title) DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What is the average number of Mubi users who love movies directed by Stanley Kubrick? average = AVG(movie_popularity); number of Mubi users who loves the movie refers to movie_popularity;
CREATED SQL: SELECT AVG(movie_popularity) FROM movies WHERE director_name = 'Stanley Kubrick'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What is the average rating for movie titled 'When Will I Be Loved'? average rating = DIVIDE((SUM(rating_score where movie_title = 'When Will I Be Loved')), COUNT(rating_score));
CREATED SQL: SELECT AVG(T2.rating_score) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'When Will I Be Loved'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What is the user avatar url for user 41579158? What is the latest movie rated by him / her? user avatar url refers to user_avatar_image_url; latest movie rated refers to latest rating_date;
CREATED SQL: SELECT T3.user_avatar_image_url, T3.rating_date_utc FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id INNER JOIN ratings_users AS T3 ON T3.user_id = T2.user_id WHERE T3.user_id = 41579158 ORDER BY T3.rating_date_utc DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What is the percentage of the ratings were rated by user who was a subcriber? user is a subscriber refers to user_subscriber = 1; percentage of ratings = DIVIDE(SUM(user_subscriber = 1), SUM(rating_score)) as percent;
CREATED SQL: SELECT CAST(SUM(CASE WHEN user_subscriber = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM ratings
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: List all movie title rated in April 2020 from user who was a trialist. movie title rated in April 2020 refers to rating_timestamp_utc LIKE '%2020-04-%'; user is a trial list refers to user_trialist = 1;
CREATED SQL: SELECT T1.movie_title FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_trialist = 1 AND T2.rating_timestamp_utc LIKE '2020-04%'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: List ther users who gave the worst rating for movie 'Love Will Tear Us Apart'. worst rating refers to rating_score = 1;
CREATED SQL: SELECT T1.user_id FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'Love Will Tear Us Apart' AND T1.rating_score = 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: List all movies with the best rating score. State the movie title and number of Mubi user who loves the movie. best rating score refers to rating_score = 5; number of Mubi user who loves the movie refers to movie_popularity;
CREATED SQL: SELECT DISTINCT T2.movie_title, T2.movie_popularity FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score = 5
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: For all ratings which are rated in year 2020, name the movies which has the rating scored 4 and above. ratings in year 2020 refers to rating_timestamp_utc like '%2020%'; rating_score > = 4;
CREATED SQL: SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE CAST(SUBSTR(T1.rating_timestamp_utc, 1, 4) AS INTEGER) = 2020 AND CAST(SUBSTR(T1.rating_timestamp_utc, 6, 2) AS INTEGER) > 4
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: For all movies where users left a critic, find the movie name, user, rating and critics comments from the user. movies where users left a critic refers to critic IS NOT NULL; critic comments refers to critic;
CREATED SQL: SELECT T2.movie_title, T1.user_id, T1.rating_score, T1.critic FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.critic IS NOT NULL
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: For movie titled 'Welcome to the Dollhouse', how many percentage of the ratings were rated with highest score. rated with highest score refers to rating_score = 5; percentage = MULTIPLY(DIVIDE(SUM(rating_score = 5), COUNT(rating_score)), 100)
CREATED SQL: SELECT CAST(SUM(CASE WHEN T2.rating_score = 5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'Welcome to the Dollhouse'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What is the percentage of rated movies were released in year 2021? percentage = DIVIDE(SUM(movie_release_year = 2021), COUNT(rating_id)) as percent; movies released in year 2021 refers to movie_release_year = 2021;
CREATED SQL: SELECT CAST(SUM(CASE WHEN T1.movie_release_year = 2021 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Who is the director of the movie Sex, Drink and Bloodshed? Sex, Drink and Bloodshed refers to movie title = 'Sex, Drink and Bloodshed';
CREATED SQL: SELECT director_name FROM movies WHERE movie_title = 'Sex, Drink and Bloodshed'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What is the name of the most followed list? most followed list refers to MAX(list_followers);
CREATED SQL: SELECT list_title FROM lists ORDER BY list_followers DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What are the URL to the list page on Mubi of the lists with followers between 1-2 and whose last update timestamp was on 2012? URL to the list page on Mubi refers to list_url; list_followers = 1 OR list_followers = 2; last update timestamp was on 2012 refers to list_update_timestamp_utc BETWEEN '2012-1-1' AND '2012-12-31';
CREATED SQL: SELECT list_url FROM lists WHERE list_update_timestamp_utc LIKE '2012%' AND list_followers BETWEEN 1 AND 2 ORDER BY list_update_timestamp_utc DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What is the list ID that was first created by user 85981819? first created list refers to oldest list_creation_date_utc;
CREATED SQL: SELECT list_id FROM lists_users WHERE user_id = 85981819 ORDER BY list_creation_date_utc ASC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: For movie id 1269, how many users, who was a paying subscriber and was eligible for trial when he rated the movie, gave the movie a rating score of less than or equal to 2? paying subscriber refers to user_has_payment_method = 1; eligible for trial refers to user_eligible_for_trial = 1; rating_score< = 2;
CREATED SQL: SELECT COUNT(*) FROM ratings WHERE movie_id = 1269 AND rating_score <= 2 AND user_eligible_for_trial = 1 AND user_has_payment_method = 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What are the movie popularity of the movies released in 2021 that were directed by Steven Spielberg? List the names of the movies and their corresponding popularity. movie released in 2021 refers to movie_release_year = 2021; popularity refers to movie_popularity;
CREATED SQL: SELECT movie_title, movie_popularity FROM movies WHERE movie_release_year = 2021 AND director_name = 'Steven Spielberg'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: When was the first movie released and who directed it? first movie refers to oldest movie_release_year;
CREATED SQL: SELECT movie_release_year, director_name FROM movies WHERE movie_release_year IS NOT NULL ORDER BY movie_release_year ASC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What is the user ID of the user, who was a subscriber when he created the list, who created a list for 10 consecutive years? If there are multiple users, indicate each of their user IDs. user was a subscriber when he created the list refers to user_subscriber = 1; user who created a list for 10 consecutive years refers to user_id with list_creation_date_utc for 10 succeeding years;
CREATED SQL: SELECT user_id FROM lists_users WHERE user_subscriber = 1 GROUP BY user_id HAVING MAX(SUBSTR(list_creation_date_utc, 1, 4)) - MIN(SUBSTR(list_creation_date_utc, 1, 4)) >= 10
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How many users gave ""Pavee Lackeen: The Traveller Girl"" movie a rating score of 4? FALSE;
CREATED SQL: SELECT COUNT(T2.user_id) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'Pavee Lackeen: The Traveller Girl' AND T2.rating_score = 4
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Was the user who created the ""World War 2 and Kids"" list eligible for trial when he created the list? Indicate how many followers does the said list has. user was eligible for trial when he created the list refers to user_eligible_for_trial = 1; number of followers a list have refers to list_followers;
CREATED SQL: SELECT T2.user_eligible_for_trial, T1.list_followers FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T1.user_id AND T1.list_id = T2.list_id WHERE T1.list_title = 'World War 2 and Kids'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Which year was the third movie directed by Quentin Tarantino released? Indicate the user ids of the user who gave it a rating score of 4. third movie refers to third movie that has oldest movie_release_year;
CREATED SQL: SELECT T2.movie_release_year, T1.user_id FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_id = ( SELECT movie_id FROM movies WHERE director_name = 'Quentin Tarantino' ORDER BY movie_release_year ASC LIMIT 2, 1 ) AND T1.rating_score = 4
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What is the URL to the movie director page on Mubi of the director whose movie was critic by user 2452551 and was given 39 likes? URL to the movie director page on Mubi refers to director_url; likes refers to critic_likes; critic_likes = 39;
CREATED SQL: SELECT T2.director_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 2452551 AND T1.critic_likes = 39
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What is the average rating score of the movie ""When Will I Be Loved"" and who was its director? average rating score = AVG(rating_score);
CREATED SQL: SELECT AVG(T1.rating_score), T2.director_name FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'When Will I Be Loved'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How many movies were added to the list with the most number of movies? Indicate whether the user was a paying subscriber or not when he created the list. list with the most number of movies refers to MAX(list_movie_number); user_has_payment_method = 1 means the user was a paying subscriber when he created the list; user_has_payment_method = 0 means the user was not a paying subscriber when he created the list;
CREATED SQL: SELECT T1.list_movie_number, T2.user_has_payment_method FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id ORDER BY T1.list_movie_number DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What is the name of the movie whose critic received the highest number of likes related to the critic made by the user rating the movie? number of likes received refers to critic likes; received the highest number of likes refers to MAX(critic_likes);
CREATED SQL: SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.critic_likes DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How much is the popularity of the movie that has the highest popularity between 1920 to 1929 and when did the movie received its first rating score of 1 from the users who were a paying subscriber when they rated the movie ? movie with highest popularity refers to MAX(movie_popularity); movie_release_year BETWEEN 1920 AND 1929; when the movie received its first rating score of 1 refers to oldest date in rating_timestamp_utc where rating score = 1; user was a paying subscriber when they rated the movie refers to user_has_payment_method = 1;
CREATED SQL: SELECT MAX(T2.movie_popularity), MIN(T1.rating_timestamp_utc) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year BETWEEN 1920 AND 1929 AND T1.rating_score = 1 AND T1.user_has_payment_method = 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How many movies directed by Francis Ford Coppola have a popularity of more than 1,000? Indicate what is the highest amount of likes that each critic per movie has received, if there's any. Francis Ford Coppola refers to director_name; popularity of more than 1,000 refers to movie_popularity >1000;highest amount of likes that each critic per movie has received refers to MAX(critic_likes)
CREATED SQL: SELECT COUNT(T2.movie_title), T1.critic FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.director_name = 'Francis Ford Coppola' AND T2.movie_popularity > 1000
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What is the URL to the user profile image on Mubi of the user who gave the movie id of 1103 a 5 ratinng score on 4/19/2020? URL to the user profile image on Mubi  refers to user_avatar_image_url;  4/19/2020 refers to rating_date_utc
CREATED SQL: SELECT T2.user_avatar_image_url FROM ratings AS T1 INNER JOIN ratings_users AS T2 ON T1.user_id = T2.user_id WHERE T2.user_id = 1103 AND rating_score = 5 AND T2.rating_date_utc = '2020-04-19'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Among the lists created by user 4208563, which one has the highest number of followers? Indicate how many followers it has and whether the user was a subscriber or not when he created the list. User 4208563 refers to user_id;highest number of followers refers to MAX(list_followers); user_subscriber = 1 means that the user was a subscriber when he created the list; user_subscriber = 0 means the user was not a subscriber when he created the list (to replace)
CREATED SQL: SELECT T1.list_followers, T2.user_subscriber = 1 FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id AND T2.list_id = T2.list_id WHERE T2.user_id = 4208563 ORDER BY T1.list_followers DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Which year has the least number of movies that was released and what is the title of the movie in that year that has the highest number of rating score of 1? least number of movies refers to MIN(movie_release_year); highest rating score refers to MAX(SUM(movie_id) where rating_score = '1')
CREATED SQL: SELECT DISTINCT T1.movie_release_year, T1.movie_title FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_release_year = ( SELECT movie_release_year FROM movies GROUP BY movie_release_year ORDER BY COUNT(movie_id) DESC LIMIT 1 ) AND T2.rating_score = 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How many users, who were a paying subscriber when they rated the movie, gave the movie that was released in 1924 and directed by Erich von Stroheim a rating score of 5? Directed by Buster Keaton refers to director_name; released in 1924 refers to movie_release_year = 1924; paying subscriber refers to user_has_payment_method = 1
CREATED SQL: SELECT COUNT(T2.user_id) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_release_year = 1924 AND T1.director_name = 'Erich von Stroheim' AND T2.rating_score = 5 AND T2.user_has_payment_method = 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What is the average number of movies added to the lists of user 8516503? Give the user profile image URL on Mubi. user profile image URL refers to user_avatar_image_url; user 8516503 refers to user_id; Average refers to AVG(list_movie_number where user_id = 8516503)
CREATED SQL: SELECT AVG(T1.list_movie_number), T2.user_avatar_image_url FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T2.user_id = 8516503
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How many users rated the movie ""The Magnificent Ambersons"" gave a rating score of no more than 2? List all the URL to the rating on Mubi. The Magnificent Ambersons refers to movie_title; rating score of no more than 2 refers to rating_score<2; URL to rating refers to rating_url
CREATED SQL: SELECT COUNT(T2.user_id), T2.rating_url FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'The Magnificent Ambersons' AND T2.rating_score <= 2
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How many users who created a list in the February of 2016 were eligible for trial when they created the list? Indicate the user id of the user who has the most number of followers in his list in February of 2016. created a list in the February of 2016 refer to list_creation_date_utc BETWEEN 2/1/2016 and 2/29/2016; eligible for trial refers to user_eligible_for_trial = 1;
CREATED SQL: SELECT T1.list_followers FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id AND T1.list_id = T2.list_id WHERE T2.list_creation_date_utc BETWEEN '2016-02-01' AND '2016-02-29' AND T2.user_eligible_for_trial = 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What is the URL to the rating on Mubi of the Riff-Raff movie that was given the highest rating score by user 22030372? URL refer to rating_url; user 22030372 refer to user_id
CREATED SQL: SELECT T2.rating_url FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_id = 22030372 AND T2.rating_score = 5 AND T1.movie_title = 'Riff-Raff'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How many directors have directed atleast 10 movies between 1960 to 1985? Indicate the name of the movie in those years of each director that received the highest amount of 5 rating score. directed at least 10 movies refers to count(direct_name)>10; 1960 to 1985 refer to movie_release_year
CREATED SQL: SELECT T2.director_name FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year BETWEEN 1960 AND 1985 GROUP BY T2.director_name HAVING COUNT(T2.movie_id) > 10
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How many users, who were not a a trialist when they rated the movie, gave the movie ""The South"" a rating score of not more than 2? not a trialist refer to user_trialist = 0; rating score of not more than 2 refer to rating_score <2; The South refers to movie_title
CREATED SQL: SELECT COUNT(T2.user_id) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_trialist = 0 AND T2.rating_score <= 2 AND T1.movie_title = 'The South'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How many likes did the critic of the movie ""Apocalypse Now"" received after giving the movie a rating score of 5? Apocalypse Now refer to movie_title; rating score refer to rating_score = '5';likes received refers to critic_likes
CREATED SQL: SELECT T2.critic_likes FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_trialist = 0 AND T2.rating_score = 5 AND T1.movie_title = 'Apocalypse Now'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What is the average rating score of the movie ""The Crowd"" and who was its director? director refer to director_name; The Crowd refer to movie_title; Average refer to AVG(rating_score)
CREATED SQL: SELECT AVG(T2.rating_score), T1.director_name FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'The Crowd'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: When was the first movie of the director who directed the highest number of movies released and what is the user id of the user who received the highest number of comments related to the critic made by the user rating the movie? comments refer to critic_comments
CREATED SQL: SELECT MIN(movie_release_year) FROM movies WHERE director_name = ( SELECT T2.director_name FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year BETWEEN 1960 AND 1985 GROUP BY T2.director_name ORDER BY COUNT(T2.director_name) DESC LIMIT 1 )
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How many movies have a popularity of more than 400 but less than 500? Indicate the name of the movies and the highest rating score each movie has received. popularity of more than 400 but less than 500 refers to movie_popularity BETWEEN 400 AND 500; highest rating score refer to MAX(rating_score)
CREATED SQL: SELECT T1.movie_title, MAX(T2.rating_score) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_popularity BETWEEN 400 AND 500 GROUP BY T1.movie_title
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What is the URL to the rating on Mubi made by user 45579900 for the movie ""The Vertical Ray of the Sun"" that received 20 likes? URL refer to rating_url; 20 likes refer to critic_likes = ’20’; user 45579900 refer to user_id
CREATED SQL: SELECT T2.rating_url FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_id = 45579900 AND T1.movie_title = 'The Vertical Ray of the Sun' AND T2.critic_likes = 20
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What is the average popularity of each movie that was directed by Christopher Nolan? Indicate which movie directed by him has received the highest number of 5 rating scores. 5 rating scores refer to rating_score; Christopher Nolan refer to director_name; average popularity of each movie refer to AVG(movie_popularity where director_name = 'Christopher Nolan')
CREATED SQL: SELECT AVG(T2.movie_popularity) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.director_name = 'Christopher Nolan'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What are the names of the movie that was rated by the user between 1/1/2013 to 12/31/2013 by the user who created the list ""100 Greatest Living American Filmmakers""? Calculate for the average rating score of those movies in 2013. Between 1/1/2013 to 12/31/2013 refer to rating_timestamp_utc; 100 Greatest Living American Filmmakers refer to list_title; average rating score refer to DIVIDE( ADD(rating_score where rating_timestamp_utc = '1/1/2013-12/31/2013'), COUNT(rating_timestamp_utc = '1/1/2013-12/31/2013'))
CREATED SQL: SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id INNER JOIN lists AS T3 ON T3.user_id = T1.user_id WHERE T1.rating_timestamp_utc BETWEEN '2013-01-01' AND '2013-12-31' AND T3.list_title = '100 Greatest Living American Filmmakers'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What is the average rating score of the 'Pavee Lackeen: The Traveller Girl' movie and what year was it released? year it was released refers to movie_release_year; average rating score refers to AVG(rating_score where movie_title = 'Final Destination 6'); Final Destination 6 refers to movie_title
CREATED SQL: SELECT AVG(T1.rating_score), T2.movie_release_year FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'Pavee Lackeen: The Traveller Girl'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How many movie lists were still updated 10 years after it was created? updated 10 years after it was created refers to list_update_timestamp_utc > (list_creation_timestamp_utc+10);
CREATED SQL: SELECT COUNT(*) FROM lists WHERE SUBSTR(list_update_timestamp_utc, 1, 4) - SUBSTR(list_creation_timestamp_utc, 1, 4) > 10
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What's the description for the movie list ""Short and pretty damn sweet""? Short and pretty damn sweet is list_title; description refers to list_description;
CREATED SQL: SELECT list_description FROM lists WHERE list_title = 'Short and pretty damn sweet'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Where can I find the movie list ""Short and pretty damn sweet""? Short and pretty damn sweet is list_title; location of the movie refers to list_url;
CREATED SQL: SELECT list_url FROM lists WHERE list_title = 'Short and pretty damn sweet'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Among the movie lists created after 2010/1/1, how many of them have over 200 followers? created after 2010/1/1 refers to list_update_timestamp_utc>'2010/1/1'; over 200 followers refers to list_followers>200;
CREATED SQL: SELECT COUNT(*) FROM lists WHERE list_followers > 200 AND list_update_timestamp_utc > '2010-01-01'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How many movie lists were created by user 83373278 when he or she was a subscriber? the user was a subscriber when he created the list refers to user_subscriber = 1; user 83373278 refers to user_id = 83373278;
CREATED SQL: SELECT COUNT(*) FROM lists_users WHERE user_id = 83373278 AND user_subscriber = 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: In which year was the movie ""La Antena"" released? movie La Antena refers to movie_title = 'La Antena'; which year refers to movie_release_year;
CREATED SQL: SELECT movie_release_year FROM movies WHERE movie_title = 'La Antena'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Please give me the url of the movie ""La Antena"". movie La Antena refers to movie_title = 'La Antena'; url refers to movie_url;
CREATED SQL: SELECT movie_url FROM movies WHERE movie_title = 'La Antena'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Which movie is more popular, ""The General"" or ""Il grido""? The General and Il grido are movie_title; more popular movie refers to higher (movie_popularity);
CREATED SQL: SELECT movie_title FROM movies WHERE movie_title = 'The General' OR movie_title = 'Il grido' ORDER BY movie_popularity DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How many movies registered on Mubi are directed by Hong Sang-soo? Hong Sang-soo is the name of director;
CREATED SQL: SELECT COUNT(movie_id) FROM movies WHERE director_name = 'Hong Sang-soo'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Was the user who created the list ""250 Favourite Films"" a trialist when he or she created the list? the user was a trialist when he created the list refers to user_trailist = 1; 250 Favourite Films is list_title;
CREATED SQL: SELECT T2.user_trialist FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T1.list_title = '250 Favourite Films'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Please list the titles of the movie lists user 32172230 created when he or she was eligible for trial. the user was eligible for trail when he created the list refers to user_eligile_for_trail = 1; user 32172230 refers to user_id = 32172230;
CREATED SQL: SELECT T1.list_title FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T1.user_id = 32172230 AND T2.user_eligible_for_trial = 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How many movie lists with over 100 movies had user 85981819 created when he or she was a paying subscriber? the user was a paying subscriber when he created the list refers to user_has_payment_method = 1;  movie lists with over 100 refers to list_movie_number >100;  user 85981819 refers to user_id = 85981819;
CREATED SQL: SELECT COUNT(*) FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T1.user_id = 85981819 AND T1.list_movie_number > 100 AND T2.user_has_payment_method = 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What's the description of user 85981819's movie list with the most followers? user 85981819 refers to user_id = 85981819; most followers refers to Max(list_followers); description refers to list_descriptions;
CREATED SQL: SELECT T1.list_description FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T1.user_id = 85981819 ORDER BY T1.list_followers DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: When did the creator of the list ""250 Favourite Films"" last updated a movie list? 250 Favourite Films refers to list_title; last update refers to list_update_date_utc;
CREATED SQL: SELECT T2.list_update_date_utc FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T1.list_title = '250 Favourite Films' ORDER BY T2.list_update_date_utc DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What's the avatar image of the user who created the movie list ""250 Favourite Films""? 250 Favourite Films refers to list_title; avatar image refers to user_avatar_image_url;
CREATED SQL: SELECT T2.user_avatar_image_url FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T1.list_title = '250 Favourite Films'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How many more movie lists were created by the user who created the movie list ""250 Favourite Films""? 250 Favourite Films refers to list_title;
CREATED SQL: SELECT COUNT(list_id) FROM lists_users WHERE user_id = ( SELECT user_id FROM lists WHERE list_title = '250 Favourite Films' )
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How many users liked the movie ""A Way of Life"" to the highest extent? like the movie highest to the extent refers to rating_score = 5; A Way of Life refers to movie_title;
CREATED SQL: SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.rating_score = 5
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Please list all the critics made by the user rating the movie ""A Way of Life"". A Way of Life refers to movie_title;
CREATED SQL: SELECT T1.critic FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How many critics of the movie ""Imitation of Life"" got more than 1 like? Imitation of Life refers to movie_title; critics got more than 1 like refers to critic_likes >1;
CREATED SQL: SELECT COUNT(*) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'Imitation of Life' AND T1.critic_likes > 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Which user made a critic for the film ""When Will I Be Loved"" and got 2 comments for the critic? When Will I Be Loved refers to movie_title;  2 comments for the critic refers to critic_comments = 2;
CREATED SQL: SELECT T1.user_id FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'When Will I Be Loved' AND T1.critic_comments = 2
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: When did user 39115684 rate the movie ""A Way of Life""? A Way of Life' refers to movie_title; user 39115684 refers to userid = 39115684;  when the user rate refers to rating_timestamp_utc;
CREATED SQL: SELECT T1.rating_score FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.user_id = 39115684
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What's the url of user 39115684's rating on the movie 'When Will I Be Loved'? A Way of Life refers to movie_title; user 39115684 refers to userid = 39115684;  url refers to rating_url;
CREATED SQL: SELECT T1.rating_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.user_id = 39115684
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Was user 39115684 a trialist when he or she rated the movie ""A Way of Life""? A Way of Life' refers to movie_title; user 39115684 refers to userid = 39115684;  the user was a trialist when he rated the movie refers to user_trialist = 1;
CREATED SQL: SELECT T1.user_trialist FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.user_id = 39115684
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How many users were trialists when they rated the movie ""A Way of Life""? A Way of Life' refers to movie_title; the user was a trialist when he rated the movie refers to user_trialist = 1;
CREATED SQL: SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'When Will I Be Loved' AND T1.user_trialist = 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Please list all the links to the ratings on the movie ""A Way of Life"" with a critic. A Way of Life' refers to movie_title; with a critic refers to critic is not null, links to the ratings refers to rating_url;
CREATED SQL: SELECT T1.rating_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.critic IS NOT NULL
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How many users have rated the most popular movie? most popular refers to Max(movie_popularity);
CREATED SQL: SELECT COUNT(rating_id) FROM ratings WHERE movie_id = ( SELECT movie_id FROM movies ORDER BY movie_popularity DESC LIMIT 1 )
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: User 58149469's critic on which film got 1 like and 2 comments? user 58149469 refers to user_id = 58149469; critic with 1 like refers to critic_likes = 1; critic with 2 comments refers to critic_comments = 2;
CREATED SQL: SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 58149469 AND T1.critic_likes = 1 AND T1.critic_comments = 2
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Among the users who are trailists when rating the movie ""When Will I Be Loved"", how many of them have rated ""1"" on the movie? When Will I Be Loved refers to movie_title; the user was a trialist when he rated the movie refers to user_trialist = 1;rated 1 on the movie refers to rating_score = 1;
CREATED SQL: SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'When Will I Be Loved' AND T1.rating_score = 1 AND T1.user_trialist = 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How many ratings on the movie ""A Way of Life"" are made after the year 2011? A Way of Life' is movie_title; rating after the year 2011 refers to rating_timestamp_utc > '2011';
CREATED SQL: SELECT COUNT(T1.rating_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.rating_timestamp_utc >= '2012-01-01'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What's of rating on the movie ""Innocence Unprotected"" by the user who created the movie list ""250 Favourite Films""? Innocence Unprotected' is movie_title; '250 Favourite Films' is list_title; rating refers to rating_score;
CREATED SQL: SELECT T1.rating_score FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id INNER JOIN lists AS T3 ON T3.user_id = T1.user_id WHERE T2.movie_title = 'Innocence Unprotected' AND T3.list_title = '250 Favourite Films'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Please list the movies rated by the user who created the movie list ""250 Favourite Films"". 250 Favourite Films' is list_title; movies refers to movie_title;
CREATED SQL: SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id INNER JOIN lists AS T3 ON T3.user_id = T1.user_id WHERE T3.list_title = '250 Favourite Films'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What's the average rating score of the movie ""A Way of Life""? A Way of Life' is movie_title; average rating score = Divide (Sum(rating_score), Count(rating_id));
CREATED SQL: SELECT AVG(T1.rating_score) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What's the percentage of the users who have rated ""1"" on the movie ""When Will I Be Loved""? When Will I Be Loved' is movie_title; rated 1 refers to rating_score = 1; percentage = Divide(Count(rating_id where rating_score = 1),Count(rating_id)) *100;
CREATED SQL: SELECT CAST(SUM(CASE WHEN T1.rating_score = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'When Will I Be Loved'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How much higher is the average rating score of the movie ""Innocence Unprotected"" than the movie ""When Will I Be Loved""? Innocence Unprotected' and 'When Will I Be Loved' are movie_title; Average rating score = Divide(Sum(rating_score), Count(rating_id));
CREATED SQL: SELECT SUM(CASE WHEN T2.movie_title = 'Innocence Unprotected' THEN T1.rating_score ELSE 0 END) / SUM(CASE WHEN T2.movie_title = 'Innocence Unprotected' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.movie_title = 'When Will I Be Loved' THEN T1.rating_score ELSE 0 END) / SUM(CASE WHEN T2.movie_title = 'When Will I Be Loved' THEN 1 ELSE 0 END) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Who was the director of the movie ""Tokyo Eyes""？ Tokyo Eyes' is movie_title, director refers to director_name;
CREATED SQL: SELECT director_name FROM movies WHERE movie_title = 'Tokyo Eyes'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How many films were released in 2007? film released in 2007 refers to movie_release_year = 2007; film refers to movie
CREATED SQL: SELECT COUNT(*) FROM movies WHERE movie_release_year = 2007
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Which of the films released in 2006 was the most popular among Mubi users? released in 2006 refers to movie_release_year = 2006; most popular refers to Max(movie_popularity); film refers to movie;
CREATED SQL: SELECT movie_title FROM movies WHERE movie_release_year = 2006 ORDER BY movie_popularity DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How many films did Åke Sandgren direct? Ake Sandgren is the director name;  film refers to movie
CREATED SQL: SELECT COUNT(movie_title) FROM movies WHERE director_name = 'Åke Sandgren'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Which of the films directed by Álex de la Iclesia is the most popular among Mubi users? Alex de la Iclesia is the director name; the most popular refers to Max(movie_popularity); films refers to movies;
CREATED SQL: SELECT movie_title FROM movies WHERE director_name = 'Åke Sandgren' ORDER BY movie_popularity DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: When was the movie Cops released? Cops' is movie_title; released refers to movie_release_year;
CREATED SQL: SELECT movie_release_year FROM movies WHERE movie_title = 'Cops'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Please list the id of the director of the movie ""It's Winter"". It's Winter' is movie_title;
CREATED SQL: SELECT director_id FROM movies WHERE movie_title = 'It''s Winter'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Please provide the ID of the user with the most followers on the list. most followers refers to Max(list_followers);
CREATED SQL: SELECT user_id FROM lists ORDER BY list_followers DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Please provide the title of the list with the most comments on the list. the most comments refers to Max(list_comments);
CREATED SQL: SELECT list_title FROM lists GROUP BY list_title ORDER BY COUNT(list_comments) DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Which of the film released in 2008 scored the highest? film released in 2008 refers to movie_release_year = 2008; scored the highest refers to Max(rating_score); film refers to movie;
CREATED SQL: SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year = 2008 ORDER BY T1.rating_score DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Please list the names of the top three movies in the number of likes related to the critic made by the user rating the movie. likes related to the critic made by the user rating the movie refers to critic_likes; top refers to Max(critic_likes);
CREATED SQL: SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.critic_likes DESC LIMIT 3
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How many users have more than 100 followers in the list created by users in 2009? more than 100 followers refers to list_followers >100;  list created by the user in 2009 refers to list_creation_date_utc = '2009';
CREATED SQL: SELECT COUNT(T1.user_id) FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_followers > 100 AND T1.list_creation_date_utc LIKE '2009%'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How many users in Mubi give the movie ""White Night Wedding for 5""? White Night Wedding' is movie_title; for 5 refers to rating_score = 5;
CREATED SQL: SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score = 5 AND T2.movie_title = 'White Night Wedding'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What's the cover image of the user who created the movie list 'Georgia related films'? Play it cool' is list_title; cover image of user refers to user_cover_image_url;
CREATED SQL: SELECT T1.user_cover_image_url FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_title LIKE 'Georgia related films'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How many followers does the list created by the user whose user_avatar_image_url is https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214 have? followers refers to list_followers;
CREATED SQL: SELECT SUM(T2.list_followers) FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T1.user_avatar_image_url = 'https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Please list the names of the movies that user 94978 scored as 5. user 94978 refers to user_id = 94978; scored as 5 refers to rating_score = 5;
CREATED SQL: SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score = 5 AND T1.user_id = 94978
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Please list the names of the films released in 2003 among the films scored by user 2941 . released in 2003 refers to movie_release_year = 2003; user 2941 refers to user_id = 2941; film refers to movie;
CREATED SQL: SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year = 2003 AND T1.user_id = 2941
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How many users were not trialists when they rated the movie ""Patti Smith: Dream of Life""? Patti Smith: Dream of Life' is movie_title; the user was not a trialist when he created the list refers to user_trialist = 0;
CREATED SQL: SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'Patti Smith: Dream of Life' AND T1.user_trialist = 0
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Which movie has the highest average score in Mubi? Highest average score refers to Max(Avg(rating_score));
CREATED SQL: SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id GROUP BY T2.movie_title ORDER BY SUM(T1.rating_score) / COUNT(T1.rating_id) DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Please list the names of the top three movies in the number comments related to the critic made by the user rating the movie. number of comments related to the critic made by the user rating the movie refers to critic_comments; top movie refers to Max(critic_comments);
CREATED SQL: SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.critic_comments DESC LIMIT 3
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What was the title of the first list created by a user 85981819? And please provide the user_avatar_image_url. user 85981819 refers to user_id = 85981819;  first list created refers to Min (list_creation_date_utc);
CREATED SQL: SELECT T2.list_title, T1.user_avatar_image_url FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T1.user_id = 85981819 ORDER BY T2.list_creation_timestamp_utc LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Please list the names of the movies that have been rated the most times in 2020. in 2020 refers to rating_timestamp_utc = '2020%'; rated the most times refers to Max(Count(movie_title));
CREATED SQL: SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_timestamp_utc LIKE '2020%' GROUP BY T2.movie_title ORDER BY COUNT(T2.movie_title) DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What is the average score for the movie Versailles Rive-Gauche? Versailles Rive-Gauche' is movie_title; average score refers to Avg(rating_score);
CREATED SQL: SELECT AVG(T1.rating_score) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title LIKE 'Versailles Rive-Gauche'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Which film rated by user 59988436 that received 21 comments? user 59988436 refers to user_id = 59988436; received 21 comments refers to critic_comments = 21; film refers to movie;
CREATED SQL: SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 59988436 AND T1.critic_comments = 21
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Please list the names of the movies that received more than 20 likes? received more than 20 likes refers to critic_likes>20;
CREATED SQL: SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.critic_likes > 20
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What is the average score of the movie ""The Fall of Berlin"" in 2019? The Fall of Berlin' is movie_title; in 2019 refers to rating_timestamp_utc = 2019; Average score refers to Avg(rating_score);
CREATED SQL: SELECT SUM(T1.rating_score) / COUNT(T1.rating_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_timestamp_utc LIKE '2019%' AND T2.movie_title LIKE 'The Fall of Berlin'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What percentage of users rated the movie ""Patti Smith: Dream of Life"" by more than 3? Patti Smith: Dream of Life' is movie_title; more than 3 refers to rating_score >3; percentage = Divide(Count(rating_score where rating_score >3), Count(rating_score))*100
CREATED SQL: SELECT CAST(SUM(CASE WHEN T1.rating_score > 3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.rating_score) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title LIKE 'Patti Smith: Dream of Life'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Which of the film directed by director Abbas Kiarostami has the highest average score? Abbas Kiarostami' is director_name; the highest Average score refers to Max(Avg(rating_score));
CREATED SQL: SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.director_name = 'Abbas Kiarostami' GROUP BY T2.movie_title ORDER BY SUM(T1.rating_score) / COUNT(T1.rating_id) DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Which year had the most released films? year refers to movie_release_year; most release films refers to MAX(COUNT(movie_id))
CREATED SQL: SELECT movie_release_year FROM movies GROUP BY movie_release_year ORDER BY COUNT(movie_id) DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Who is the director that made the most movies? Give the director's id. director that made the most movies refers to MAX(COUNT(movie_id))
CREATED SQL: SELECT director_id FROM movies GROUP BY director_id ORDER BY COUNT(movie_id) DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How many movies did the director of the highest movie popularity make? highest movie popularity refers to MAX(movie_popularity)
CREATED SQL: SELECT COUNT(movie_id) FROM movies WHERE director_id = ( SELECT director_id FROM movies ORDER BY movie_popularity DESC LIMIT 1 )
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What's the number of the paying subscribers when rating a movie after the year 2014? paying subscribers refers to user_has_payment_method = 1; rating a movie after the year 2014 refers to rating_date_utc>'2014%'
CREATED SQL: SELECT COUNT(user_subscriber) FROM ratings_users WHERE user_has_payment_method = 1 AND rating_date_utc > '2014%'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Who was the earliest user created a list but didn't get any followers? Give the user ID. earliest user created a list refers to MIN(list_creation_date_utc); didn't get any followers refers to user_subscriber = 0
CREATED SQL: SELECT user_id FROM lists_users WHERE user_subscriber = 0 ORDER BY list_creation_date_utc LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Give the number of followers for the user who posted the most lists. number of followers refers to user_subscriber; posted the most lists refers to MAX(COUNT(list_id))
CREATED SQL: SELECT SUM(T1.list_followers) FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id GROUP BY T1.user_id ORDER BY COUNT(T1.list_id) DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How many followers did the user who posted the list ""Non-American Films about World War II"" have? the list ""Non-American Films about World War II"" refers to list_title = 'Non-American Films about World War II'
CREATED SQL: SELECT SUM(T2.list_followers) FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_title LIKE 'Non-American Films about World War II'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What's the number of users gave the movie ""Downfall"" a rating of ""4""? movie ""Downfall"" refers to movie_title = 'Downfall'; rating of ""4"" refers to rating_score = 4
CREATED SQL: SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'Downfall' AND T1.rating_score = 4
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Give the name of the movie that got the most ""5"" ratings. 5 ratings refers to rating_score = 5; name of the movie refers to movie_title
CREATED SQL: SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score = 5
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Which movie got the most critic comments? Give the name of the movie. name of the movie refers to movie_title; most critic comments refers to MAX(critic_comments)
CREATED SQL: SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id GROUP BY T2.movie_title ORDER BY COUNT(T1.critic_comments) DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Show the avatar of the user who gave the rating at 2019/10/17 1:36:36. at 2019/10/17 1:36:36 refers to rating_timestamp_utc = '2019/10/17 1:36:36'; avatar of the user refers to user_avatar_image_url
CREATED SQL: SELECT T2.user_avatar_image_url FROM ratings AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id WHERE T1.rating_timestamp_utc LIKE '2019-10-17 01:36:36'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Show the portrait picture of the user who created the list ""Vladimir Vladimirovich Nabokov"". the list ""Vladimir Vladimirovich Nabokov"" refers to list_title = 'Vladimir Vladimirovich Nabokov'; portrait picture refers to user_avatar_image_url
CREATED SQL: SELECT T1.user_avatar_image_url FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_title LIKE 'Vladimir Vladimirovich Nabokov'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: For the user who post the list that contained the most number of the movies, is he/she a paying subscriber when creating that list? the list that contained the most number of the movies refers to MAX(list_movie_number); user_has_payment_method = 1 means the user was a paying subscriber when he created the list ; 
user_has_payment_method = 0 means the user was not a paying subscriber when he created the list
CREATED SQL: SELECT T1.user_has_payment_method FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_movie_number = ( SELECT MAX(list_movie_number) FROM lists )
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Show the head portrait of the user who gave the most ""5"" ratings. head portrait refers to user_avatar_image_url; ""5"" ratings refers to rating_score = 5
CREATED SQL: SELECT T2.user_avatar_image_url FROM ratings AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id WHERE T1.rating_score = 5
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How many critics were given to the movie that got the most movie popularity number. most movie popularity number refers to MAX(movie_popularity)
CREATED SQL: SELECT COUNT(T1.critic) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_popularity = ( SELECT MAX(movie_popularity) FROM movies )
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Who gave a ""4"" rating to the movie ""Freaks"" at 2013/5/4 6:33:32? Give his/her user id. 4 rating refers to rating_score = 4; the movie ""Freaks"" refers to movie_title = 'Freaks' ; at 2013/5/4 6:33:32 refers to rating_timestamp_utc = '2013-05-04 06:33:32'
CREATED SQL: SELECT T1.user_id FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE rating_score = 4 AND rating_timestamp_utc LIKE '2013-05-04 06:33:32' AND T2.movie_title LIKE 'Freaks'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Give the url of movie which was rated 5 on 2013/5/3 5:11:17. rated 5 refers to rating_score = 5; on 2013/5/3 5:11:17 refers to rating_timestamp_utc = '2013-05-03 05:11:17'
CREATED SQL: SELECT T2.movie_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE rating_score = 5 AND rating_timestamp_utc LIKE '2013-05-03 05:11:17'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: For the 1998 movie which got the highest popularity, how many ""4"" rating did the movie get? 1998 movie refers to movie_release_year = '1998'; the highest popularity refers to MAX(movie_popularity) ; ""4"" rating refers to rating_score = 4
CREATED SQL: SELECT COUNT(T2.movie_title) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score = 4 AND T2.movie_release_year = 1998 ORDER BY T2.movie_popularity DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: From all the movies that got more than 13000 popularity number, which one had the least ratings. more than 13000 popularity number refers to movie_popularity > 13000; least ratings refers to MIN(rating_score)
CREATED SQL: SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_popularity > 13000 ORDER BY T1.rating_score LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How many paying subscribers gave a rating to the movie ""One Flew Over the Cuckoo's Nest""? paying subscribers refer to user_has_payment_method = 1; movie ""One Flew Over the Cuckoo's Nest"" refers to movie_id = 'One Flew Over the Cuckoo''s Nest'
CREATED SQL: SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id INNER JOIN ratings_users AS T3 ON T1.user_id = T3.user_id WHERE T2.movie_title = 'One Flew Over the Cuckoo''s Nest' AND T3.user_has_payment_method = 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: For the lists that got more than 3000 followers, how many did the users who created those lists are paying subscribers? got more than 3000 followers refers to list_followers > 3000; paying subscribers refer to user_has_payment_method = 1
CREATED SQL: SELECT COUNT(T1.user_id) FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_followers > 3000 AND T1.user_has_payment_method = 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Which 1988 movie got the most ratings? 1988 movie refers to movie_release_year = '1998'; most ratings refers to MAX(rating_score)
CREATED SQL: SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year = 1988 ORDER BY T1.rating_score DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: For all the movies that were released in 1995, how many lower than 3 ratings did the most popularity movie had? released in 1995 refers to movie_release_year = '1995'; lower than 3 ratings refers to rating_score <3; most popularity movie refers to MAX(movie_popularity)
CREATED SQL: SELECT COUNT(T1.rating_score) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score < 3 AND T2.movie_release_year = 1995 AND T2.movie_popularity = ( SELECT MAX(movie_popularity) FROM movies WHERE movie_release_year = 1995 )
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What is the percentage of users gave ""5"" to the movie ""Go Go Tales""? movie ""Go Go Tales"" refers to movie_title = 'Go Go Tales'; gave ""5"" refers to rating_score = 5; percentage refers to DIVIDE(COUNT(rating_score = 5),COUNT(rating_score))*100
CREATED SQL: SELECT CAST(SUM(CASE WHEN T1.rating_score = 5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'Go Go Tales'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Give the percentage of subscribers who rated who rated the movie ""G.I. Jane"". movie ""G.I. Jane"" refers to movie_title = 'G.I. Jane'; subscribers refers to user_subscriber = 1; percentage refers to DIVIDE(COUNT(user_subscriber = 1),COUNT(user_subscriber))*100
CREATED SQL: SELECT CAST(SUM(CASE WHEN T3.user_subscriber = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id INNER JOIN lists_users AS T3 ON T1.user_id = T3.user_id WHERE T2.movie_title = 'G.I. Jane'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: For all the users who gave ""A Shot in the Dark"" a rating, how many percent of them is a paying subscriber? ""A Shot in the Dark"" refers to movie_title = 'A Shot in the Dark'; paying subscriber refers to user_has_payment_method = 1; percentage refers to DIVIDE(COUNT(user_has_payment_method = 1),COUNT(user_has_payment_method))*100
CREATED SQL: SELECT CAST(SUM(CASE WHEN T1.user_has_payment_method = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id INNER JOIN lists_users AS T3 ON T1.user_id = T3.user_id WHERE T2.movie_title = 'A Shot in the Dark'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Name all the list titles created by user 4208563. user 4208563 refers to user_id = 4208563
CREATED SQL: SELECT list_title FROM lists WHERE user_id LIKE 4208563
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Among the lists created in 2016, which is the list that was updated most recently. created in 2016 refers to list_creation_timestamp_utc like '2016%'; updated most recently refers to MAX(list_update_timestamp_utc)
CREATED SQL: SELECT list_title FROM lists WHERE strftime('%Y', list_update_timestamp_utc) = '2016' ORDER BY list_update_timestamp_utc DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What is the percentage of list created by user who was a subscriber when he created the list? was a subscriber refers to user_subscriber = 1; percentage refers to DIVIDE(COUNT(user_subscriber = 1),COUNT(list_id))
CREATED SQL: SELECT CAST(SUM(CASE WHEN user_subscriber = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(list_id) FROM lists_users
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Name all lists created by a user who was a subcriber when created the list. was a subscriber refers to user_subscriber = 1
CREATED SQL: SELECT DISTINCT T2.list_id FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T1.user_subscriber = 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Provide list titles created by user who are eligible for trial when he created the list. eligible for trial refers to user_eligible_for_trial = 1
CREATED SQL: SELECT DISTINCT T2.list_title FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T1.user_eligible_for_trial = 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Among the lists with at least one follower, how many were created by user who was subscriber when created the list? lists with at least one follower refers to list_followers > = 1; was a subscriber refers to user_subscriber = 1
CREATED SQL: SELECT COUNT(T1.list_id) FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_followers >= 1 AND T1.user_subscriber = 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: For all list titles with at least 200 movies in the list, what is their average number of followers? at least 200 movies in the list refers to list_movie_number > 200; average number of followers refers to avg(list_followers)
CREATED SQL: SELECT AVG(list_followers) FROM lists WHERE list_movie_number > 200
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: List all the titles created by user who was a subsriber when he created the list and have less than 50 movies in the list. have less than 50 movies in the list refers to list_movie_number <50; was a subscriber refers to user_subscriber = 1
CREATED SQL: SELECT DISTINCT T2.list_title FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_movie_number < 50 AND T1.user_subscriber = 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Which title list has not been updated for the longest period of time? State how long it has not been updated? not been updated for the longest period of time refers to MIN(list_update_timestamp_utc); how long it has not been updated refers to SUBTRACT(CURRENT_TIMESTAMP, list_update_timestamp_utc)
CREATED SQL: SELECT list_title , datetime(CURRENT_TIMESTAMP, 'localtime') - datetime(list_update_timestamp_utc) FROM lists ORDER BY list_update_timestamp_utc LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Who is the user who created the list titled 'Sound and Vision'? Was he a subcriber when he created the list? list titled 'Sound and Vision' refers to list_title = 'Sound and Vision'; user_subscriber = 1 means the user was a subscriber when he rated the movie; user_subscriber = 0 means the user was not a subscriber when he rated the movie
CREATED SQL: SELECT T1.user_id, T1.user_subscriber FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_title LIKE 'Sound and Vision'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: For the list with more than 200 followers, state the title and how long the list has been created? more than 200 followers refers to list_followers >200; how long the list has been created refers to SUBTRACT(CURRENT_TIMESTAMP,list_creation_timestamp_utc)
CREATED SQL: SELECT list_title , 365 * (strftime('%Y', 'now') - strftime('%Y', list_creation_timestamp_utc)) + 30 * (strftime('%m', 'now') - strftime('%m', list_creation_timestamp_utc)) + strftime('%d', 'now') - strftime('%d', list_creation_timestamp_utc) FROM lists WHERE list_followers > 200
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Among all movies in the list, calculate the percentage of movies that were never been rated? percentage of movies that were never been rated refers to DIVIDE(COUNT(main_movies.movie_id ! = main_ratings.movie_id),COUNT(movie_id))
CREATED SQL: SELECT CAST(SUM(CASE WHEN T2.movie_id IS NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.movie_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: List all movies rated by user 39115684. State the title, rating date and rating score. user 39115684 refers to user_id = 39115684; title refers to movie_title; rating date refers to rating_timestamp_utc
CREATED SQL: SELECT T2.movie_title, T1.rating_timestamp_utc, T1.rating_score FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 39115684
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Between 1970 to 1980, how many movies with a popularity of more than 11,000 were released? Between 1970 to 1980 refers to movie_release_year between 1970 and 1980; popularity of more than 11,000 refers movie_popularity >11000
CREATED SQL: SELECT COUNT(movie_id) FROM movies WHERE movie_release_year BETWEEN '1970' AND '1980' AND movie_popularity > 11000
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: How many movies directed by Felipe Cazals was realeased on 1976? directed by Felipe Cazals refers to director_name = 'Felipe Cazals' ; realeased on 1976 refers to movie_release_year = 1976
CREATED SQL: SELECT COUNT(movie_id) FROM movies WHERE movie_release_year = 1976 AND director_name LIKE 'Felipe Cazals'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What is the URL to the movie director page on Mubi of the movie titled ""Red Blooded American Girl"" movie titled ""Red Blooded American Girl"" refers to movie_title = 'Red Blooded American Girl'
CREATED SQL: SELECT director_url FROM movies WHERE movie_title LIKE 'Red Blooded American Girl'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What is the name of the list that was updated most recently? updated most recently refers to MAX(list_update_date_utc)
CREATED SQL: SELECT list_title FROM lists WHERE list_update_timestamp_utc = ( SELECT list_update_timestamp_utc FROM lists ORDER BY list_update_timestamp_utc DESC LIMIT 1 )
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Who created the list that has 142 comments? Indicate the user id of the user, if there are multiple lists with 142 comments, list the user id of the person who created the list list that has 142 comments refers to list_comments = 142
CREATED SQL: SELECT user_id FROM lists WHERE list_comments = 142
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What is Jeannot Szwarc's most popular movie and what is its average rating score? Jeannot Szwarc's refers to director_name = 'Jeannot Szwarc'; most popular movie refers to MAX(movie_popularity); average rating score refers to avg(rating_score)
CREATED SQL: SELECT T2.movie_title, AVG(T1.rating_score) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.director_name = 'Jeannot Szwarc' ORDER BY T2.movie_popularity DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Who is the director that directed the highest number of movies in the 70s? If there are multiple directors with the same amount of movies, list all of their names and indicate the highest rating score that those movies got from the users. highest number of movies COUNT(T1.movie_id); in the 70s refers to movie_release_year between 1970 and 1979
CREATED SQL: SELECT T2.director_name, T1.rating_score FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year BETWEEN 1970 AND 1979 GROUP BY T2.director_id ORDER BY COUNT(T2.movie_id) DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Between 1/1/2010 to 12/31/2020, how many users, who were a trialist when they created the list, gave the movie ""The Secret Life of Words"" a rating score of 3? Between 1/1/2010 to 12/31/2020 refers to rating_timestamp_utc between '2010-01-01%' and '2020-12-31%'; a trialist refers to user_trialist = 1; movie ""The Secret Life of Words"" refers to movie_title = 'The Secret Life of Words'; rating score of 3 refers to rating_score = 3
CREATED SQL: SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'The Secret Life of Words' AND T1.rating_score = 3 AND T1.user_trialist = 0 AND T1.rating_timestamp_utc BETWEEN '2010%' AND '2020%'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What is the name of the movie whose critic received the highest amount of likes? Indicate the URL to the rating on Mubi. critic received the highest amount of likes refers to MAX(critic_likes);
CREATED SQL: SELECT T2.movie_title, T1.rating_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.critic_likes DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What are the top 5 most popular movies of the 21st century? Indicate how many users gave it a rating score of 5. most popular movies refers to MAX(movie_popularity); rating score of 5 refers to rating_score = 5; movies of the 21st century refers to movie_release_year> = 2000
CREATED SQL: SELECT DISTINCT T2.movie_id, SUM(T1.rating_score = 5) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T2.movie_popularity DESC LIMIT 5
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What is the average number of followers of the lists created by the user who rated the movie ""Pavee Lackeen: The Traveller Girl"" on 3/27/2011 at 2:06:34 AM? average number of followers refers to AVG(list_followers); movie ""Pavee Lackeen: The Traveller Girl"" refers to movie_title = 'Pavee Lackeen: The Traveller Girl'; on 3/27/2011 at 2:06:34 AM refers to rating_timestamp_utc = '2011-03-27 02:06:34'
CREATED SQL: SELECT CAST(SUM(T4.list_followers) AS REAL) / COUNT(T2.list_id) FROM ratings AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id INNER JOIN movies AS T3 ON T1.movie_id = T3.movie_id INNER JOIN lists AS T4 ON T2.list_id = T4.list_id WHERE T3.movie_title LIKE 'Pavee Lackeen: The Traveller Girl' AND T1.rating_timestamp_utc LIKE '2011-03-27 02:06:34'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Between 1/1/2017 to 12/31/2017, how many users who were eligible for trial when they rated the movie ""Patti Smith: Dream of Life""and what is the image URL to the movie on Mubi? Between 1/1/2017 to 12/31/2017 refers to rating_timestamp_utc between '2017-01-01 00:00:00' and '2017-12-31 00:00:00'; eligible for trial refers to user_eligible_for_trial = 1; movie ""Patti Smith: Dream of Life"" refers to movie_title = 'Patti Smith: Dream of Life'
CREATED SQL: SELECT COUNT(T1.user_id), T2.movie_image_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE datetime(T1.rating_timestamp_utc) BETWEEN '2017-01-01 00:00:00' AND '2017-12-31 00:00:00'
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What is the average number of number of movies added to the lists of user 8516503? Indicate how many movies did he/she give a rating score of 5. average number of number of movies refers to AVG(list_movie_number); user 8516503 refers to user_id = 8516503; rating score of 5 refers to rating_score = 5
CREATED SQL: SELECT AVG(T3.list_movie_number) , SUM(CASE WHEN T1.rating_score = 5 THEN 1 ELSE 0 END) FROM ratings AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id INNER JOIN lists AS T3 ON T2.user_id = T3.user_id WHERE T1.user_id = 8516503
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: Who is the director of the most popular movie of all time and when was it released? Indicate the average rating score of the users who were on a trialist when they rated the movie. most popular movie of all time refers to MAX(movie_popularity); a trialist refers to user_trialist = 1; average rating score = AVG(rating_score)
CREATED SQL: SELECT T1.director_name, T1.movie_release_year , SUM(T2.rating_score) / COUNT(T2.user_id) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_trialist = 1 ORDER BY T1.movie_popularity DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What is the name of the movie that was rated recently by user 57756708? user 57756708 refers to user_id = 57756708; rated recently refers to MAX(rating_timestamp_utc)
CREATED SQL: SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 57756708 ORDER BY T1.rating_timestamp_utc DESC LIMIT 1
END OF QUESTION"
movie_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE lists (
user_id integer,
list_id integer,
list_title text,
list_movie_number integer,
list_update_timestamp_utc text,
list_creation_timestamp_utc text,
list_followers integer,
list_url text,
list_comments integer,
list_description text,
list_cover_image_url text,
list_first_image_url text,
list_second_image_url text,
list_third_image_url text,
PRIMARY KEY (list_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE movies (
movie_id integer,
movie_title text,
movie_release_year integer,
movie_url text,
movie_title_language text,
movie_popularity integer,
movie_image_url text,
director_id text,
director_name text,
director_url text,
PRIMARY KEY (movie_id),
);
CREATE TABLE ratings_users (
user_id integer,
rating_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
CREATE TABLE lists_users (
user_id integer,
list_id integer,
list_update_date_utc text,
list_creation_date_utc text,
user_trialist integer,
user_subscriber integer,
user_avatar_image_url text,
user_cover_image_url text,
user_eligible_for_trial text,
user_has_payment_method text,
FOREIGN KEY (user_id) REFERENCES lists(user_id),
FOREIGN KEY (list_id) REFERENCES lists(list_id),
);
CREATE TABLE ratings (
movie_id integer,
rating_id integer,
rating_url text,
rating_score integer,
rating_timestamp_utc text,
critic text,
critic_likes integer,
critic_comments integer,
user_id integer,
user_trialist integer,
user_subscriber integer,
user_eligible_for_trial integer,
user_has_payment_method integer,
FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
FOREIGN KEY (user_id) REFERENCES lists_users(user_id),
);
---------------------
QUESTION: What are the top 10 oldest movies and what are the average rating score for each movie? Indicate the name of the director and when the movies were released. the average rating score refers to AVG(T2.rating_score); oldest movies refers to MIN(rating_timestamp_utc)
CREATED SQL: SELECT T2.movie_id, AVG(T1.rating_score), T2.director_name, T2.movie_release_year FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.rating_timestamp_utc ASC LIMIT 10
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Which date has the most ordered quantity? What is the total order quantity on that day? total quantity refers to qty; most ordered quantity refers to order with the highest quantity where MAX(sum(qty))
CREATED SQL: SELECT ord_date, SUM(qty) FROM sales GROUP BY ord_date ORDER BY SUM(qty) DESC LIMIT 1
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: What is the title with the most ordered quantity in year 1992? total quantity refers to qty; most ordered quantity refers to order with the highest quantity where MAX(count(qty)); date refers to ord_date; year 1992 refers to YEAR(ord_date) = 1992
CREATED SQL: SELECT T2.title FROM sales AS T1 INNER JOIN titles AS T2 ON T1.title_id = T2.title_id WHERE STRFTIME('%Y', T1.ord_date) = '1992' ORDER BY T1.qty DESC LIMIT 1
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: List the title, price and publication date for all sales with 'ON invoice' payment terms. publication date refers to pubdate; payment terms refers to payterms; payterms = 'ON invoice'
CREATED SQL: SELECT T2.title, T2.price, T2.pubdate FROM sales AS T1 INNER JOIN titles AS T2 ON T1.title_id = T2.title_id WHERE T1.payterms = 'ON invoice'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: What is the title that have at least 10% royalty without minimum range amount. at least 10% royalty refers to royalty > = 10; minimum range is synonym for low range which refers to lorange; without minimum range amount refers to lorange <> 0
CREATED SQL: SELECT T1.title FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id WHERE T2.lorange = 0 AND T2.royalty >= 10
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: State the title and royalty percentage for title ID BU2075 between 10000 to 50000 range. lorange mean low range; hirange mean high range; range refers to between the low and high range; lorange>10000; hirange<12000
CREATED SQL: SELECT T1.title, T2.royalty FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id WHERE T2.lorange > 10000 AND T2.hirange < 50000 AND T1.title_ID = 'BU2075'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Among the titles with royalty percentage, which title has the greatest royalty percentage. State it's minimum range to enjoy this royalty percentage. minimum range is synonym for low range which refers to lorange
CREATED SQL: SELECT T1.title, T2.lorange FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id ORDER BY T2.royalty DESC LIMIT 1
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Provide a list of titles together with its publisher name for all publishers located in the USA. publisher name refers to pub_name;
CREATED SQL: SELECT T1.title, T2.pub_name FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.country = 'USA'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: State the royalty percentage for the most year to date sale title within the 20000 range. most year to date sales refers to MAX(ytd_sales); range limit means high range which refers to hirange; the 20000 range refers to hirange<20000
CREATED SQL: SELECT MAX(T1.ytd_sales) FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id WHERE T2.lorange > 20000 AND T2.hirange < 20000
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: List all titles published in year 1991. Also provide notes details of the title and the publisher's name. publisher name refers to pub_name; publication date refers to pubdate; published in year 1991 refers to YEAR(pubdate) = 1991
CREATED SQL: SELECT T1.title, T1.notes, T2.pub_name FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE STRFTIME('%Y', T1.pubdate) = '1991'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: List all titles with sales of quantity more than 20 and store located in the CA state. qty is abbreviation for quantity; sales of quantity more than 20 refers to qty>20; store refers to stor_name
CREATED SQL: SELECT T1.title, T2.qty FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id INNER JOIN stores AS T3 ON T2.stor_id = T3.stor_id WHERE T2.qty > 20 AND T3.state = 'CA'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Name the store with the highest quantity in sales? What is the least quantity title from the store's sale? qty is abbreviation for quantity; highest quantity refers to MAX(qty); least quantity refers to MIN(qty)
CREATED SQL: SELECT T3.stor_id, T2.title FROM sales AS T1 INNER JOIN titles AS T2 ON T1.title_id = T2.title_id INNER JOIN stores AS T3 ON T3.stor_id = T1.stor_id WHERE T3.stor_id = ( SELECT stor_id FROM sales GROUP BY stor_id ORDER BY SUM(qty) DESC LIMIT 1 ) GROUP BY T3.stor_id, T2.title ORDER BY SUM(T1.qty) ASC LIMIT 1
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Name the title and publisher for title ID BU 2075. Provide all the royalty percentage for all ranges. name the publisher refers to pub_name
CREATED SQL: SELECT T1.title, T3.pub_name, T2.lorange, T2.hirange, T2.royalty FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id INNER JOIN publishers AS T3 ON T1.pub_id = T3.pub_id WHERE T1.title_id = 'BU2075'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Name the store with ID 7066 and calculate the percentage of the the quantity ordered that were on 'Net 30' payment terms. store with ID 7066 refers to stor_ID = '7066'; 'Net 60' payment terms refers to payterm = 'Net 60'; qty is abbreviation for quantity; percentage = DIVIDE(payterms = 'Net 60', sum(qty))*100
CREATED SQL: SELECT T2.stor_name , CAST(SUM(CASE WHEN payterms = 'Net 30' THEN qty ELSE 0 END) AS REAL) * 100 / SUM(qty) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id WHERE T1.stor_id = '7066' GROUP BY T2.stor_name
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: State the publisher name for publisher ID 877? Calculate its average year to date sales. publisher id refers to pub_id; publisher name refers to pub_name; average year to date sales = AVG(ytd_sales)
CREATED SQL: SELECT T2.pub_name, AVG(T1.ytd_sales) FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.pub_id = '0877' GROUP BY T2.pub_name
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Name all employees who were hired before year 1990. hired before year 1990 refers to YEAR(hire_date)<1990
CREATED SQL: SELECT fname, lname FROM employee WHERE STRFTIME('%Y', hire_date) < '1990'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Which employee has the lowest job level. State the first name, last name and when he /she was hired. lowest job level refers to MIN(job_lvl)
CREATED SQL: SELECT fname, lname, hire_date FROM employee ORDER BY job_lvl LIMIT 1
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: In which year has the most hired employees? most hired employees refers to MAX(count(emp_id))
CREATED SQL: SELECT STRFTIME('%Y', hire_date) FROM employee GROUP BY STRFTIME('%Y', hire_date) ORDER BY COUNT(emp_id) DESC LIMIT 1
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: List all employees who are at the maximum level in their job designation. maximum level in their job designation refers to job_lvl = MAX(max_lvl)
CREATED SQL: SELECT T1.fname, T1.lname FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.job_lvl = T2.max_lvl
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Name the Chief Executive Officer and when he/she was hired. Chief Financial Offer is a job description which refers to job_desc
CREATED SQL: SELECT T1.fname, T1.lname, T1.hire_date FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T2.job_desc = 'Chief Financial Officier'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Who are the employees working for publisher not located in USA? State the employee's name and publisher name. not located at USA refers to country! = 'USA'
CREATED SQL: SELECT T1.fname, T1.lname, T2.pub_name FROM employee AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.country != 'USA'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: List all employees working for publisher 'GGG&G'. State their name and job description. name = fname, lname; job description refers to job_desc; publisher refers pub_name
CREATED SQL: SELECT T1.fname, T1.lname, T3.job_desc FROM employee AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id INNER JOIN jobs AS T3 ON T1.job_id = T3.job_id WHERE T2.pub_name = 'GGG&G'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: For each publisher, state the type of titles they published order by the publisher name. publisher name refers to pub_name
CREATED SQL: SELECT DISTINCT T2.pub_name, T1.type FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id ORDER BY T2.pub_name
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Name the publisher which has the most titles published in 1991. most title published refers to MAX(count(title_id); published in 1991 refers to YEAR(pubdate) = 1991
CREATED SQL: SELECT T2.pub_name FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE STRFTIME('%Y', T1.pubdate) = '1991' GROUP BY T1.pub_id, T2.pub_name ORDER BY COUNT(T1.title_id) DESC LIMIT 1
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Name the title with the highest price published by 'Binnet & Hardley'. published by refers to pub_name
CREATED SQL: SELECT T1.title FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.pub_name = 'Binnet & Hardley' ORDER BY T1.price DESC LIMIT 1
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Among all employees, who have job level greater than 200. State the employee name and job description. job level greater than 200 refers to job_lvl>200; job description refers to job_desc
CREATED SQL: SELECT T1.fname, T1.lname, T2.job_desc FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.job_lvl > 200
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Name all the authors for all business titles. business title refers to title under business where type = 'business'
CREATED SQL: SELECT T3.au_fname, T3.au_lname FROM titles AS T1 INNER JOIN titleauthor AS T2 ON T1.title_id = T2.title_id INNER JOIN authors AS T3 ON T2.au_id = T3.au_id WHERE T1.type = 'business'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: List all the titles and year to date sales by author who are not on contract. year to date sales refers to ytd_sales; not on contract refers to contract = 0
CREATED SQL: SELECT T1.title_id, T1.ytd_sales FROM titles AS T1 INNER JOIN titleauthor AS T2 ON T1.title_id = T2.title_id INNER JOIN authors AS T3 ON T2.au_id = T3.au_id WHERE T3.contract = 0
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: For all authors from CA who are not on contract, which title of his/hers has the most year to date sales. year to date sales refers to ytd_sales; on contract refers to contract = 1
CREATED SQL: SELECT T1.title FROM titles AS T1 INNER JOIN titleauthor AS T2 ON T1.title_id = T2.title_id INNER JOIN authors AS T3 ON T2.au_id = T3.au_id WHERE T3.contract = 0 AND T3.state = 'CA' ORDER BY T1.ytd_sales DESC LIMIT 1
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Name all the authors for 'Sushi, Anyone?'. most year to date sales refers to MAX(ytd_sales); on contract refers to contract = 1; name of author = au_fname, au_lname
CREATED SQL: SELECT T3.au_fname, T3.au_lname FROM titles AS T1 INNER JOIN titleauthor AS T2 ON T1.title_id = T2.title_id INNER JOIN authors AS T3 ON T2.au_id = T3.au_id WHERE T1.title = 'Sushi, Anyone?'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Calculate the percentage of the employees who are Editor or Designer? Editor or Auditor are job description which refers to job_desc; percentage = DIVIDE(count(job_desc = 'Editor' or job_desc = 'Auditor'), count(emp_id))*100
CREATED SQL: SELECT CAST(SUM(CASE WHEN T2.job_desc IN ('Editor', 'Designer') THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.job_id) FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: List all titles which have year to date sales higher than the average order by pubisher name. year to date sales refers to ytd_sales; average order = AVG(ytd_sales)
CREATED SQL: SELECT T1.title FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.ytd_sales > ( SELECT AVG(ytd_sales) FROM titles )
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: How many publishers are in the USA?
CREATED SQL: SELECT COUNT(pub_id) FROM publishers WHERE country = 'USA'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: What is the publisher's information of New Moon Books? publisher name refers to pub_name; New Moon Books is a publisher name
CREATED SQL: SELECT T1.pr_info FROM pub_info AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.pub_name = 'New Moon Books'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Please list the first names of the employees who work as Managing Editor. Managing Editor is a job description which refers to job_desc
CREATED SQL: SELECT T1.fname FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T2.job_desc = 'Managing Editor'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: What is the highest level of job to get to for the employee who got hired the earliest? highest job level refers to MAX(job_lvl); hired the earliest refers to MIN(hire_date)
CREATED SQL: SELECT T2.max_lvl FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id ORDER BY T1.hire_date LIMIT 1
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: In which city is the store with the highest total sales quantity located? qty is abbreviation for quantity; highest sales quantity refers to MAX(qty)
CREATED SQL: SELECT T2.city FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id GROUP BY T2.city ORDER BY SUM(T1.qty) DESC LIMIT 1
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: What is the price of the book that sells the best? qty is abbreviation for quantity; sells the best mean with the most sales quantity; MAX(qty)
CREATED SQL: SELECT T2.price FROM sales AS T1 INNER JOIN titles AS T2 ON T1.title_id = T2.title_id ORDER BY T1.qty DESC LIMIT 1
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Please list the stores that ordered the book ""Life Without Fear"". store name refers to stor_name
CREATED SQL: SELECT T2.stor_name FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id INNER JOIN titles AS T3 ON T1.title_id = T3.title_id WHERE T3.title = 'Life Without Fear'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Among the stores that have ordered the book ""Life Without Fear"", how many of them are located in Massachusetts? Massachusetts is a state
CREATED SQL: SELECT COUNT(T1.stor_id) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id INNER JOIN titles AS T3 ON T1.title_id = T3.title_id WHERE T2.state = 'Massachusetts'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: In which country is the publisher of the book ""Life Without Fear"" located? Life Without Fear is book title
CREATED SQL: SELECT T2.country FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.title = 'Life Without Fear'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: What is the publisher that has published the most expensive book? most expensive book refers to MAX(price)
CREATED SQL: SELECT T2.pub_name FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id ORDER BY T1.price DESC LIMIT 1
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Among the publishers in the USA, how many of them have published books that are over $15? are over $15 refers to price>15
CREATED SQL: SELECT COUNT(DISTINCT T1.pub_id) FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.country = 'USA' AND T1.price > 15
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Please give more detailed information about the first three books that sell the best. qty is abbreviation for quantity; sells the best mean with the most sales quantity; MAX(qty)
CREATED SQL: SELECT T1.notes FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id ORDER BY T2.qty DESC LIMIT 3
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: How many books on business have the bookstores in Massachusetts ordered? Massachusetts is a state; business books refers to type = 'business'
CREATED SQL: SELECT SUM(T1.qty) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id INNER JOIN titles AS T3 ON T1.title_id = T3.title_id WHERE T2.state = 'Massachusetts' AND T3.type = 'business'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: What is the average quantity of each order for the book ""Life Without Fear""? qty is abbreviation for quantity; average quantity order = AVG(qty)
CREATED SQL: SELECT CAST(SUM(T2.qty) AS REAL) / COUNT(T1.title_id) FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id WHERE T1.title = 'Life Without Fear'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: What is the average level employees working as Managing Editor are at? How many levels are there between the average level and the highest level? Managing Editor is a job description which refers to job_desc; job level refers to job_lvl; highest level job refers to max_lvl; levels between the average level and the highest level = SUBTRACT(max_lvl; AVG(job_lvl))
CREATED SQL: SELECT AVG(T2.job_lvl), T1.max_lvl - AVG(T2.job_lvl) FROM jobs AS T1 INNER JOIN employee AS T2 ON T1.job_id = T2.job_id WHERE T1.job_desc = 'Managing Editor' GROUP BY T2.job_id, T1.max_lvl
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Which one is the cheapest business book? business books refers to type = 'business'; cheapest book refers to MIN(price)
CREATED SQL: SELECT title FROM titles WHERE type = 'business' ORDER BY price LIMIT 1
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Which type of book had the most pre-paid amount? most pre-paid amount refers to MAX(advance)
CREATED SQL: SELECT type FROM titles ORDER BY advance DESC LIMIT 1
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: What's the royalty for the bestseller book? qty is abbreviation for quantity; bestseller means with the most sales quantity; MAX(qty)
CREATED SQL: SELECT royalty FROM titles ORDER BY ytd_sales DESC LIMIT 1
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Which job level is O'Rourke at? job level refers to job_lvl
CREATED SQL: SELECT job_lvl FROM employee WHERE lname = 'O''Rourke'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Show me the employ id of the highest employee who doesn't have a middle name. highest employee refers to employee with the highest job level; MAX(job_lvl)
CREATED SQL: SELECT emp_id FROM employee WHERE minit = '' ORDER BY job_lvl DESC LIMIT 1
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Is the author of ""Sushi, Anyone?"" on the contract? contract = 1 means on contract; contract = 0 means not on contract
CREATED SQL: SELECT T1.contract FROM authors AS T1 INNER JOIN titleauthor AS T2 ON T1.au_id = T2.au_id INNER JOIN titles AS T3 ON T2.title_id = T3.title_id WHERE T3.title = 'Sushi, Anyone?'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Which publisher had the highest job level? Give his/her full name. highest job level refers to MAX(job_lvl)
CREATED SQL: SELECT T1.fname, T1.minit, T1.lname FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id ORDER BY T1.job_lvl DESC LIMIT 1
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: What's Pedro S Afonso's job title? job title means job description which refers to job_desc
CREATED SQL: SELECT T2.job_desc FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.fname = 'Pedro' AND T1.minit = 'S' AND T1.lname = 'Afonso'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: How many levels are there left for Diego W Roel to reach if he/she could go to the max level for his/her position? max level for his position refers to max_lvl; job level refers to job_lvl; level left to reach the max = SUBTRACT(max_lvl, job_lvl)
CREATED SQL: SELECT T2.max_lvl - T1.job_lvl FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.fname = 'Diego' AND T1.minit = 'W' AND T1.lname = 'Roel'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: What's on the notes for the order happened on 1994/9/14? order happened on refers to ord_date
CREATED SQL: SELECT T1.notes FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id WHERE STRFTIME('%Y-%m-%d', T2.ord_date) = '1994-09-14'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: List the type of the book for the order which was sold on 1993/5/29. sold on refers to ord_date
CREATED SQL: SELECT DISTINCT T1.type FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id WHERE STRFTIME('%Y-%m-%d', T2.ord_date) = '1993-05-29'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Tell me about the information of the French publisher. French publisher means publisher in France where country = 'France'
CREATED SQL: SELECT T1.pr_info FROM pub_info AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.country = 'France'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: What's the publisher of the book ""Silicon Valley Gastronomic Treats""? Give the publisher's name. publisher name refers to pub_name; Silicon Valley Gastronomic Treats is the title of a book
CREATED SQL: SELECT T2.pub_name FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.title = 'Silicon Valley Gastronomic Treats'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Which city did Victoria P Ashworth work in?
CREATED SQL: SELECT T2.city FROM employee AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.fname = 'Victoria' AND T1.minit = 'P' AND T1.lname = 'Ashworth'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: How many sales did the store in Remulade make? Remulade is a city; sales in the store refers to ord_num
CREATED SQL: SELECT COUNT(T1.ord_num) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id WHERE T2.city = 'Remulade'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: For the quantities, what percent more did the store in Fremont sell than the store in Portland in 1993? qty is abbreviation for quantity; Fremont and Portland are name of city; sell in 1993 refers to YEAR(ord_date) = 1993; percentage = DIVIDE(
SUBTRACT(SUM(qty where city = ‘Fremont’ and year(ord_date = 1993)), 
SUM(qty where city = ‘Portland’ and year(ord_date = 1993))), SUM(qty where city = ‘Fremont’ and year(ord_date = 1993)) *100
CREATED SQL: SELECT CAST(SUM(CASE WHEN T2.city = 'Fremont' THEN qty END) - SUM(CASE WHEN T2.city = 'Portland' THEN qty END) AS REAL) * 100 / SUM(CASE WHEN T2.city = 'Fremont' THEN qty END) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id WHERE STRFTIME('%Y', T1.ord_date) = '1993'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Among all the employees, how many percent more for the publishers than designers? publisher and designer are job descriptions which refers to job_desc; percentage more = 100*(SUBTRACT(SUM(CASE WHERE job_desc = 'publisher), SUM(CASE WHERE job_desc = 'designer'))
CREATED SQL: SELECT CAST(SUM(CASE WHEN T2.job_desc = 'publisher' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.job_desc = 'designer' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.job_id) FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Find and list the full name of employees who were hired between 1990 and 1995. Also, arrange them in the descending order of job level. job level refers to job_lvl; YEAR(hire_date) between 1990 and 1995
CREATED SQL: SELECT fname, minit, lname FROM employee WHERE STRFTIME('%Y', hire_date) BETWEEN '1990' AND '1995' ORDER BY job_lvl DESC
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Which titles has above average royalty rate? Give those title's name, type and price? average royalty rate = DIVIDE(SUM(royalty), COUNT(title_id))
CREATED SQL: SELECT DISTINCT T1.title, T1.type, T1.price FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id WHERE T2.royalty > ( SELECT CAST(SUM(royalty) AS REAL) / COUNT(title_id) FROM roysched )
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: In 1994 which title had less order quanty than the average order quantity? Find the title name, type and price. orders in 1994 refers to YEAR(ord_date) = 1994; order quantity refers to number of order expressed by ord_num; average order quantity = DIVIDE(SUM(ord_num), COUNT(title_id))
CREATED SQL: SELECT DISTINCT T1.title, T1.type, T1.price FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id WHERE T2.ord_date LIKE '1994%' AND T2.Qty < ( SELECT CAST(SUM(T4.qty) AS REAL) / COUNT(T3.title_id) FROM titles AS T3 INNER JOIN sales AS T4 ON T3.title_id = T4.title_id )
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: List the title name, type, and price of the titles published by New Moon Books. Arrange the list in ascending order of price. Eric the Read Books is a publisher which refers to pub_name;
CREATED SQL: SELECT T1.title, T1.type, T1.price FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.pub_name = 'New Moon Books' ORDER BY T1.price
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: In the books published by US publishers, which book has the highest royalty? List these books in the descending order of royalty. US publisher refers publisher in the US where country = 'USA';
CREATED SQL: SELECT T1.title FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id INNER JOIN roysched AS T3 ON T1.title_id = T3.title_id WHERE T2.country = 'USA' ORDER BY T1.royalty DESC
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Find the difference between the average royalty of titles published by US and non US publishers? US publisher refers publisher in the US where country = 'USA'; non-US publishers refers publisher not in the US where country! = 'USA'; difference = SUBTRACT(AVG(royalty) where country = 'USA', AVG(royalty) where country! = 'USA'))
CREATED SQL: SELECT (CAST(SUM(CASE WHEN T2.country = 'USA' THEN T1.royalty ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.country = 'USA' THEN 1 ELSE 0 END)) - (CAST(SUM(CASE WHEN T2.country != 'USA' THEN T1.royalty ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.country != 'USA' THEN 1 ELSE 0 END)) FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id INNER JOIN roysched AS T3 ON T1.title_id = T3.title_id
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Calculate the average level difference between the Marketing editors hired by the US and non-US publishers? Marketing manager is a job description which refers to job_desc; US publisher refers publisher in the US where country = 'USA'; non-US publishers refers publisher not in the US where country! = 'USA'; job level refers to job_lvl; average level = AVG(job_lvl)
CREATED SQL: SELECT (CAST(SUM(CASE WHEN T1.country = 'USA' THEN job_lvl ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.country = 'USA' THEN 1 ELSE 0 END)) - (CAST(SUM(CASE WHEN T1.country != 'USA' THEN job_lvl ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.country != 'USA' THEN 1 ELSE 0 END)) FROM publishers AS T1 INNER JOIN employee AS T2 ON T1.pub_id = T2.pub_id INNER JOIN jobs AS T3 ON T2.job_id = T3.job_id WHERE T3.job_desc = 'Managing Editor'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Which title is about helpful hints on how to use your electronic resources, which publisher published it and what is the price of this book? publisher refers to pub_name; about the title refers to notes
CREATED SQL: SELECT T1.title, T2.pub_name, T1.price FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.notes = 'Helpful hints on how to use your electronic resources to the best advantage.'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Of the titles, which title is about the Carefully researched study of the effects of strong emotions on the body, which state-based publisher published this book, and what is the year-to-date sale? year to date sales refers to ytd_sales; about the title refers to notes
CREATED SQL: SELECT T1.title, T2.pub_name, T1.ytd_sales FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.notes = 'Carefully researched study of the effects of strong emotions on the body. Metabolic charts included.'
END OF QUESTION"
book_publishing_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE authors (
au_id text,
au_lname text,
au_fname text,
phone text,
address text,
city text,
state text,
zip text,
contract text,
PRIMARY KEY (au_id),
);
CREATE TABLE jobs (
job_id integer,
job_desc text,
min_lvl integer,
max_lvl integer,
PRIMARY KEY (job_id),
);
CREATE TABLE publishers (
pub_id text,
pub_name text,
city text,
state text,
country text,
PRIMARY KEY (pub_id),
);
CREATE TABLE employee (
emp_id text,
fname text,
minit text,
lname text,
job_id integer,
job_lvl integer,
pub_id text,
hire_date datetime,
PRIMARY KEY (emp_id),
FOREIGN KEY (job_id) REFERENCES jobs(job_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE pub_info (
pub_id text,
logo blob,
pr_info text,
PRIMARY KEY (pub_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE stores (
stor_id text,
stor_name text,
stor_address text,
city text,
state text,
zip text,
PRIMARY KEY (stor_id),
);
CREATE TABLE discounts (
discounttype text,
stor_id text,
lowqty integer,
highqty integer,
discount real,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
);
CREATE TABLE titles (
title_id text,
title text,
type text,
pub_id text,
price real,
advance real,
royalty integer,
ytd_sales integer,
notes text,
pubdate datetime,
PRIMARY KEY (title_id),
FOREIGN KEY (pub_id) REFERENCES publishers(pub_id),
);
CREATE TABLE roysched (
title_id text,
lorange integer,
hirange integer,
royalty integer,
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE sales (
stor_id text,
ord_num text,
ord_date datetime,
qty integer,
payterms text,
title_id text,
FOREIGN KEY (stor_id) REFERENCES stores(stor_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
CREATE TABLE titleauthor (
au_id text,
title_id text,
au_ord integer,
royaltyper integer,
FOREIGN KEY (au_id) REFERENCES authors(au_id),
FOREIGN KEY (title_id) REFERENCES titles(title_id),
);
---------------------
QUESTION: Name the top five titles that sold more than average and list them in descending order of the number of sales in California stores? qty is abbreviation for quantity; sold more than average refers to qty > AVG(qty); california refers to state = 'CA""
CREATED SQL: SELECT T1.title FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id INNER JOIN publishers AS T3 ON T1.pub_id = T3.pub_id WHERE T2.qty > ( SELECT CAST(SUM(qty) AS REAL) / COUNT(title_id) FROM sales ) AND T3.state = 'CA' ORDER BY T2.qty DESC LIMIT 5
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: On which day was the most verbose complaint received? day received refers to ""Date received""; most verbose complaint refers to MAX(ser_time);
CREATED SQL: SELECT `Date received` FROM callcenterlogs WHERE ser_time = ( SELECT MAX(ser_time) FROM callcenterlogs )
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: When did the earliest complaint start on 2017/3/22? earliest complaint refers to oldest ser_start; on 2017/3/22 refers to ""Date received"" = '2017-03-22';
CREATED SQL: SELECT MIN(ser_time) FROM callcenterlogs WHERE `Date received` = '2017-03-22'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Which complaint is more urgent, complaint ID CR2400594 or ID CR2405641? more urgent refers to MAX(priority);
CREATED SQL: SELECT CASE WHEN SUM(CASE WHEN `Complaint ID` = 'CR2400594' THEN priority END) > SUM(CASE WHEN `Complaint ID` = 'CR2405641' THEN priority END) THEN 'CR2400594' ELSE 'CR2405641' END FROM callcenterlogs
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Please list the full names of all the male clients born after the year 1990. full names = first, middle, last; male refers to sex = 'Male'; year > 1990;
CREATED SQL: SELECT first, middle, last FROM client WHERE year > 1990
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: How many complaints have the client Diesel Galloway filed?
CREATED SQL: SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Diesel' AND T1.last = 'Galloway'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What is the detailed product of the complaint filed by Diesel Galloway on 2014/7/3? detailed product refers to ""sub-product""; on 2014/7/3 refers to ""Date received"" = '2014-07-03';
CREATED SQL: SELECT T2.`Sub-product` FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Diesel' AND T1.last = 'Galloway' AND T2.`Date received` = '2014-07-03'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Was the tag in the complaint filed by Matthew Pierce on 2016/10/28 approved by himself? on 2016/10/28 refers to Date received = '2016-10-28'; ""Consumer consent provided?"" in (null, 'N/A', 'Empty') means that the company didn't get the permission of consent; ""Consumer consent provided?"" not in (null, 'N/A', 'Empty') means that customers provide the consent for this tag;
CREATED SQL: SELECT CASE WHEN T2.`Consumer consent provided?` IN (NULL, 'N/A', 'Empty') THEN 'No' ELSE 'Yes' END FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Matthew' AND T1.last = 'Pierce' AND T2.`Date received` = '2016-10-28'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: For how long was the complaint filed by Matthew Pierce on 2016/10/28 delayed? on 2016/10/28 refers to ""Date received"" = '2016-10-28'; delayed = SUBTRACT(""Date sent to company', 'Date received"");
CREATED SQL: SELECT 365 * (strftime('%Y', T2.`Date sent to company`) - strftime('%Y', T2.`Date received`)) + 30 * (strftime('%M', T2.`Date sent to company`) - strftime('%M', T2.`Date received`)) + (strftime('%d', T2.`Date sent to company`) - strftime('%d', T2.`Date received`)) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Matthew' AND T1.last = 'Pierce' AND T2.`Date received` = '2016-10-28'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What is the full name of the client whose complaint on 2017/3/27 was received by MICHAL? full names = first, middle, last; on 2017/3/27 refers to ""Date received"" = '2017-03-27'; MICHAL refers to server = 'MICHAL';
CREATED SQL: SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.`Date received` = '2017-03-27' AND T2.server = 'MICHAL'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: For how long did the complaint filed on 2017/3/27 by Rachel Hicks last? how long did the complaint filed last refers to ser_time; on 2017/3/27 refers to ""Date received"" = '2017-03-27';
CREATED SQL: SELECT T2.ser_time FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T1.first = 'Rachel' AND T1.last = 'Hicks' AND T2.`Date received` = '2017-03-27'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Among all the clients from the New York city, how many of them have filed a complaint on the issue of Deposits and withdrawals?
CREATED SQL: SELECT COUNT(T2.Issue) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Issue = 'Deposits and withdrawals' AND T1.city = 'New York City'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Please list the full names of all the clients whose complaints are still in progress. full name = first, middle, last; complaints are still in progress refers to ""Company response to consumer"" = 'In progress';
CREATED SQL: SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Company response to consumer` = 'In progress'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Among the clients who did receive a timely response for their complaint, how many of them are from New York? did not receive a timely response refers to ""Timely response?"" = 'No'; New York refers to city = 'New York';
CREATED SQL: SELECT COUNT(T1.city) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Timely response?` = 'No' AND T1.city = 'New York City'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: How many complaints on credit cards in the year 2016 were filed by male clients? credit cards refers to Product = 'Credit card'; 2016 refers to year(Date received) = 2016; male refers to sex = 'Male';
CREATED SQL: SELECT COUNT(T1.sex) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE strftime('%Y', T2.`Date received`) = '2016' AND T1.sex = 'Male' AND T2.Product = 'Credit card'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Which division is Diesel Galloway in?
CREATED SQL: SELECT T2.division FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.first = 'Diesel' AND T1.last = 'Galloway'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Please list the full names of all the male clients in the Pacific division. full names = first, middle, last; male refers to sex = 'Male';
CREATED SQL: SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'Pacific' AND T1.sex = 'Male'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What is the average number of complaints on credit cards filed by clients from New York in the 3 consecutive years starting from 2015? average = AVG(Complaint ID); credit cards refers to Product = 'Credit card'; New York refers to city = 'New York'; 3 consecutive years starting from 2015 refers to ""Date received"" BETWEEN 2015 AND 2017;
CREATED SQL: SELECT CAST(COUNT(T2.`Complaint ID`) AS REAL) / 3 AS average FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE strftime('%Y', T2.`Date received`) BETWEEN '2015' AND '2017' AND T1.city = 'New York City' AND T2.Product = 'Credit card'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What is the percentage of the increase of complaints filed by the clients from New York from the year 2016 to the year 2017? percentage of increase = MULTIPLY(DIVIDE(SUBTRACT(SUM(year(""Date received"") = 2017), SUM(year(""Date received"") = 2016)), SUM(year(""Date received"") = 2016)), 1.0); New York refers to city = 'New York'; year(""Date received"") BETWEEN 2016 AND 2017;
CREATED SQL: SELECT 100.0 * (SUM(CASE WHEN strftime('%Y', T2.`Date received`) = '2017' THEN 1 ELSE 0 END) - SUM(CASE WHEN strftime('%Y', T2.`Date received`) = '2016' THEN 1 ELSE 0 END)) / SUM(CASE WHEN strftime('%Y', T2.`Date received`) = '2016' THEN 1 ELSE 0 END) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.city = 'New York City'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What was the serve time for the complaint call from client ""C00007127"" on 2017/2/22? serve time refers to ser_time; longer ser_time means more verbose or longer complaint; on 2017/2/22 refers to ""Date received"" = '2017-02-22';
CREATED SQL: SELECT T1.ser_time FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE T2.Client_ID = 'C00007127' AND T1.`Date received` = '2017-02-22'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Which state does the owner of ""wyatt.collins@gmail.com"" live in? Give the full name of the state. full name of the state refers to state_name;
CREATED SQL: SELECT T1.state FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.email = 'wyatt.collins@gmail.com'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Which detailed product did Mr Lennox Oliver Drake complain about? detailed product refers to ""Sub-product""; Mr refers to sex = 'Male';
CREATED SQL: SELECT DISTINCT T2.`Sub-product` FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Lennox' AND T1.middle = 'Oliver' AND T1.last = 'Drake' AND T1.sex = 'Male'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What was the detailed issue did Mr Gunner Omer Fuller complain about? detailed issue refers to Sub-issue; Mr refers to sex = 'Male';
CREATED SQL: SELECT T2.`Sub-issue` FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Gunner' AND T1.middle = 'Omer' AND T1.last = 'Fuller' AND T1.sex = 'Male'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Did Ms. Lyric Emely Taylor provide the consent for result of the complaint call on 2016/5/20? Ms refers to sex = 'Female'; ""Consumer consent provided?"" in (null, 'N/A', 'Empty') means that the company didn't get the permission of consent; ""Consumer consent provided?"" not in (null, 'N/A', 'Empty') means the customers provide the consent; on 2016/5/20 refers to Date received = '2016-05-20';
CREATED SQL: SELECT CASE WHEN T2.`Consumer consent provided?` IN (NULL, 'N/A', '') THEN 'No' ELSE 'Yes' END FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Lyric' AND T1.middle = 'Emely' AND T1.last = 'Taylor' AND T1.sex = 'Female' AND T2.`Date received` = '2016-05-20'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: How many days delay for the complaint call from Mr. Brantley Julian Stanley on 2012/5/18? days delay for the complaint = SUBTRACT(""date sent to company"", ""Date received""); Mr refers to sex = 'Male'; on 2012/5/18 refers to ""Date received"" = '2012-05-18';
CREATED SQL: SELECT 365 * (strftime('%Y', T2.`Date sent to company`) - strftime('%Y', T2.`Date received`)) + 30 * (strftime('%M', T2.`Date sent to company`) - strftime('%M', T2.`Date received`)) + (strftime('%d', T2.`Date sent to company`) - strftime('%d', T2.`Date received`)) AS days FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Date received` = '2012-05-18' AND T1.sex = 'Male' AND T1.first = 'Brantley' AND T1.middle = 'Julian' AND T1.last = 'Stanley'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Which district did the review on 2018/9/11 come from? Give the name of the city. on 2018/9/11 refers to Date = '2017-07-22';
CREATED SQL: SELECT T2.district_id, T2.city FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.Date = '2018-09-11'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What was the review context from Jacksonville on 2017/7/22? Jacksonville refers to city = 'Jacksonville'; on 2017/7/22 refers to Date = '2017-07-22';
CREATED SQL: SELECT T1.Reviews FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.city = 'Jacksonville' AND T1.Date = '2017-07-22'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Which product received a review from Indianapolis on 2016/10/7? Indianapolis refers to state = 'Indianapolis'; on 2016/10/7 refers to Date = '2013-04-04';
CREATED SQL: SELECT T1.Product FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.city = 'Indianapolis' AND T1.Date = '2016-10-07'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: How many stars did ""Eagle Capital"" received from Little Rock on 2013/4/4? Eagle Capital refers to Product = 'Eagle Capital'; Little Rock is a city; on 2013/4/4 refers to Date = '2013-04-04';
CREATED SQL: SELECT COUNT(T1.Stars) FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.Product = 'Eagle Capital' AND T2.city = 'Little Rock' AND T1.Date = '2013-04-04'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: For the client who made the complaint call ""CR0217298"", what was his/her birthday？ complaint call refers to Complaint ID; birthday = year, month, day;
CREATED SQL: SELECT T1.month, T1.day FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Complaint ID` = 'CR0217298'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What was the phone of number of the client who made the complaint call ""CR0100432"" ？ complaint call refers to Complaint ID;
CREATED SQL: SELECT T1.phone FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Complaint ID` = 'CR0100432'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: For all the complaint callers on 2017/3/27, what percentage of the clients are females? on 2017/3/27 refers to ""Date received"" = '2017-03-27'; percentage = MULTIPLY(DIVIDE(SUM(sex = 'Female' ), COUNT(client_id)), 1.0); females refers to sex = 'Female';
CREATED SQL: SELECT CAST(SUM(CASE WHEN T1.sex = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.sex) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Date received` = '2017-03-27'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What is the percentage of the complaint calls from Mr Mason Javen Lopez has got the consent provided by the customer? percentage = MULTIPLY(DIVIDE(SUM(""Consumer consent provided?"" = 'Consent provided'), COUNT(client_id)), 1.0); Mr refers to sex = 'Male'; consent provided by the customer refers to ""Consumer consent provided?"" = 'Consent provided';
CREATED SQL: SELECT CAST(SUM(CASE WHEN T2.`Consumer consent provided?` = 'Consent provided' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.`Consumer consent provided?`) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.sex = 'Male' AND T1.first = 'Mason' AND T1.middle = 'Javen' AND T1.last = 'Lopez'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: How many priority urgent complaints were received in march of 2017? List the complaint ID of these complaints. urgent complaints refers to priority = 2; march of 2017 refers to ""Date received"" BETWEEN '2017-01-01' AND '2017-01-31';
CREATED SQL: SELECT COUNT(`Complaint ID`) FROM callcenterlogs WHERE `Date received` LIKE '2017-01%' AND priority = ( SELECT MAX(priority) FROM callcenterlogs )
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Please list the full name, date of birth, and email id of the elderly clients in descending order of age. full name = first, middle, last; date of birth = year, month, day; elderly clients refers to age > 65;
CREATED SQL: SELECT first, middle, last, year, month , day, email FROM client WHERE age > 65 ORDER BY age DESC
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Which product got the most five stars, and how many? most five stars refers to MAX(COUNT(stars = 5));
CREATED SQL: SELECT T.Product, MAX(T.num) FROM ( SELECT Product, COUNT(Stars) AS num FROM reviews WHERE Stars = 5 GROUP BY Product ) T
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: List all the states in the South region.
CREATED SQL: SELECT state FROM state WHERE Region = 'South'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What is the email id of clients whose calls were hung? email id refers to email; calls were hung refers to outcome = 'Hang';
CREATED SQL: SELECT T1.email FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.outcome = 'HANG'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Calculate the average age of clients from the Midwest region. average age = AVG(age);
CREATED SQL: SELECT CAST(SUM(T1.age) AS REAL) / COUNT(T3.Region) AS average FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T3.Region = 'Midwest'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: List the full name and phone number of clients who submitted the complaint via fax. full name = first, middle, last; submitted the complaint via fax refers to ""Submitted via"" = 'fax';
CREATED SQL: SELECT T1.first, T1.middle, T1.last, T1.phone FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Submitted via` = 'Fax'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Find and list the names of districts which has below-average stars for Eagle Capital. below average = AVG(stars) < Stars; Eagle Capital refers to Product = 'Eagle Capital';
CREATED SQL: SELECT T2.division FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.Product = 'Eagle Capital' AND T1.Stars > ( SELECT AVG(Stars) FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id )
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: In the calls from the mountain division, how many are from teenage clients? teenage refers to age BETWEEN 12 AND 20;
CREATED SQL: SELECT COUNT(T1.age) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.age BETWEEN 12 AND 20 AND T2.division = 'Mountain'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What is the number of complaints related to Credit cards came from female clients? Credit cards refers to Product = 'Credit card'; female refers to sex = 'female';
CREATED SQL: SELECT COUNT(T1.sex) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.sex = 'Female' AND T2.Product = 'Credit card'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Among the clients born between 1980 and 2000, list the name of male clients who complained through referral. born between 1980 and 2000 refers to year BETWEEN 1980 AND 2000; name = first, middle, last; male refers to sex = 'Male'; complained through refers to ""Submitted via"";
CREATED SQL: SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.year BETWEEN 1980 AND 2000 AND T1.sex = 'Male' AND T2.`Submitted via` = 'Referral'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What is the medium through which most complaints are registered in Florida? medium refers to ""Submitted via""; most complaints refers to MAX(Complaint ID); Florida refers to state = 'florida';
CREATED SQL: SELECT T3.`Submitted via` FROM callcenterlogs AS T1 INNER JOIN client AS T2 ON T1.`rand client` = T2.client_id INNER JOIN events AS T3 ON T1.`Complaint ID` = T3.`Complaint ID` WHERE T2.state = 'FL' GROUP BY T1.`Complaint ID` ORDER BY COUNT(T1.`Complaint ID`) DESC LIMIT 1
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Calculate the average number of complaints received from New Bedford each year which are closed with explanation. average = AVG(""Complaint ID""); New Bedford refers to city = 'New Bedford'; closed with explanation refers to Company response to consumer = 'Closed with explanation';
CREATED SQL: SELECT STRFTIME('%Y', T3.`Date received`) , CAST(SUM(CASE WHEN T3.`Company response to consumer` = 'Closed with explanation' THEN 1 ELSE 0 END) AS REAL) / COUNT(T3.`Complaint ID`) AS average FROM callcenterlogs AS T1 INNER JOIN client AS T2 ON T1.`rand client` = T2.client_id INNER JOIN events AS T3 ON T1.`Complaint ID` = T3.`Complaint ID` WHERE T2.city = 'New Bedford' GROUP BY strftime('%Y', T3.`Date received`)
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What percentage of consumers from Houston disputed complaints? percentage = MULTIPLY(DIVIDE(SUM(""Consumer disputed?"" = 'Yes' AND city = 'Houston'), COUNT(client_id)), 1.0); Houston refers to city = 'Houston';
CREATED SQL: SELECT CAST(SUM(CASE WHEN T2.`Consumer disputed?` = 'Yes' AND T1.city = 'Houston' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Find the number of service members who complained in Syracuse. service members refers to client.client_id; Syracuse refers to city = 'Syracuse';
CREATED SQL: SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Tags = 'Servicemember' AND T1.city = 'Syracuse'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Among the calls from California, what percentage are priority 1? California refers to state = 'California'; percentage = MULTIPLY(DIVIDE(SUM(priority = 1), COUNT(""Complaint ID""), 1.0));
CREATED SQL: SELECT CAST(SUM(CASE WHEN T1.priority = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.priority) FROM callcenterlogs AS T1 INNER JOIN client AS T2 ON T1.`rand client` = T2.client_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id INNER JOIN state AS T4 ON T3.state_abbrev = T4.StateCode WHERE T4.State = 'California'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Calculate the difference in the average age of elderly and middle-aged clients in the Northeast region. difference in the average = SUBTRACT(AVG(age BETWEEN 35 AND 55), AVG( age > 65)); elderly refers to age > 65; middle-aged refers to age BETWEEN 35 AND 55;
CREATED SQL: SELECT (CAST(SUM(CASE WHEN T1.age BETWEEN 35 AND 55 THEN T1.age ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.age BETWEEN 35 AND 55 THEN 1 ELSE 0 END)) - (CAST(SUM(CASE WHEN T1.age > 65 THEN T1.age ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.age > 65 THEN 1 ELSE 0 END)) AS difference FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T3.Region = 'Northeast'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: List by their ID number the 3 longest complaints. ID number refers to ""Complaint ID""; longest complaints refers to MAX(ser_time);
CREATED SQL: SELECT `Complaint ID` FROM callcenterlogs ORDER BY ser_time DESC LIMIT 3
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: How many clients have an email account other than gmail.com? email account other than gmail.com refers to email not like '%@gmail.com';
CREATED SQL: SELECT COUNT(email) FROM client WHERE email NOT LIKE '%@gmail.com'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Identify by their ID all clients who did not give their consent permission. did not give their consent permission refers to Consumer consent provided is null, 'N/A', or empty;
CREATED SQL: SELECT Client_ID FROM events WHERE `Consumer consent provided?` = 'N/A' OR 'Consumer consent provided?' IS NULL OR 'Consumer consent provided?' = ''
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: List by their ID the complaints received by the company on 25/09/2014 that took the longest. ID of the complaints refers to ""Complaint ID""; on 25/09/2014 refers to ""Date sent to company"" = '2014-09-25'; took the longest = MAX(SUBTRACT(""Date sent to company"", ""Date received""));
CREATED SQL: SELECT `Complaint ID` FROM events WHERE strftime('%J', `Date sent to company`) - strftime('%J', `Date received`) = ( SELECT MAX(strftime('%J', `Date sent to company`) - strftime('%J', `Date received`)) FROM events WHERE `Date sent to company` = '2014-09-25' ) AND `Date sent to company` = '2014-09-25'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: List priority 2 complaints by date received.
CREATED SQL: SELECT DISTINCT `Complaint ID` FROM callcenterlogs WHERE priority = 2 ORDER BY `Date received` DESC
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: How many complaints are not in process with an agent? not in process with an agent refers to outcome ! = 'AGENT';
CREATED SQL: SELECT COUNT(outcome) FROM callcenterlogs WHERE outcome != 'AGENT'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: How many Credit Card complaints did Sharon handle? Credit Card refers to Product = 'Credit Card'; Sharon refers to server = 'SHARON';
CREATED SQL: SELECT COUNT(T1.`Complaint ID`) FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE T2.Product = 'Credit card' AND T1.server = 'SHARON'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: In which region have the most 1-star reviews been done? most 1-star reviews refers to MAX(COUNT(stars = 1));
CREATED SQL: SELECT T3.Region FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T1.Stars = 1 GROUP BY T3.Region ORDER BY COUNT(T3.Region) DESC LIMIT 1
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: In what years were the clients who demanded more problems with Certificate of deposit born? more problems with Certificate refers to MAX(COUNT(""Sub-product"" = '(CD) Certificate of deposit'));
CREATED SQL: SELECT T1.year FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Sub-product` = '(CD) Certificate of deposit' GROUP BY T1.year ORDER BY COUNT(T1.year) DESC LIMIT 1
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: How many cases of billing dispute issues occurred in the Mountain division? billing dispute refers to issue = 'Billing disputes';
CREATED SQL: SELECT COUNT(T1.Issue) FROM events AS T1 INNER JOIN client AS T2 ON T1.Client_ID = T2.client_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.Issue = 'Billing disputes' AND T3.division = 'Mountain'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: How many male clients are from the state of Massachusetts? male refers to sex = 'Male';
CREATED SQL: SELECT COUNT(T3.sex) FROM state AS T1 INNER JOIN district AS T2 ON T1.StateCode = T2.state_abbrev INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T1.state = 'Massachusetts' AND T3.sex = 'Male'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Lists the last name of all clients who made a PS-type complaint and were served by TOVA. PS-type complaint refers to type = 'PS'; served by refers to server;
CREATED SQL: SELECT t1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.type = 'PS' AND T2.server = 'TOVA'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: How many clients under the age of 35 gave Eagle National Mortgage 1 star? age < 35; Eagle National Mortgage refers to Product = 'Eagle National Mortgage';
CREATED SQL: SELECT COUNT(T2.age) FROM reviews AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.Product = 'Eagle National Mortgage' AND T1.Stars = 1 AND T2.age < 35
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: How many male clients born in the year 1977 were given priority 0 in their complaints? male refers to sex = 'Male';
CREATED SQL: SELECT COUNT(T1.sex) FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T1.sex = 'Male' AND T2.priority = 0 AND T1.year = 1997
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: List by name all customers who provided consent for the tag Older American. name refers to first; provided consent refers to ""Consumer consent provided?"" not in ('N/A', null, 'empty');
CREATED SQL: SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Tags = 'Older American' AND T2.`Consumer consent provided?` != 'N/A' AND T2.`Consumer consent provided?` IS NOT NULL AND T2.`Consumer consent provided?` != ''
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What is the name of the state in which there have been the largest number of complaints with priority 0? largest number of complaints refers to MAX(COUNT(""Complaint ID"") WHERE priority = 0);
CREATED SQL: SELECT T2.state FROM callcenterlogs AS T1 INNER JOIN client AS T2 ON T1.`rand client` = T2.client_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id INNER JOIN state AS T4 ON T3.state_abbrev = T4.StateCode WHERE T1.priority = 0 GROUP BY T2.state ORDER BY COUNT(T2.state) DESC LIMIT 1
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: How many complaints made by women and served after 3 pm received a timely response from the company? women refers to sex = 'Female'; served after 3 pm refers to ser_time BETWEEN '15:00:01' AND '23:59:59'; received a timely response refers to ""Timely response?"" = 'Yes';
CREATED SQL: SELECT COUNT(T1.`Complaint ID`) FROM callcenterlogs AS T1 INNER JOIN client AS T2 ON T1.`rand client` = T2.client_id INNER JOIN events AS T3 ON T1.`Complaint ID` = T3.`Complaint ID` WHERE T2.sex = 'Female' AND T1.ser_start BETWEEN '15:00:01' AND '23:59:59' AND T3.`Timely response?` = 'Yes'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: How many complaints were served in 5 minutes or less by DORIT and responded to the customer with an explanation, were made by phone? served in 5 minutes or less refers to ser_time < '00:05:00'; DORIT refers to server = 'DORIT'; responded with an explanation refers to ""Company response to consumer"" = 'Closed with explanation'; made by refers to ""Submitted via"";
CREATED SQL: SELECT COUNT(T1.`Complaint ID`) FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE T1.ser_time < '00:05:00' AND T1.server = 'DORIT' AND T2.`Submitted via` = 'Phone' AND T2.`Company response to consumer` = 'Closed with explanation'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: How many clients with the last name Alvarado are from Maryland? The abbreviation of Maryland is 'MD';
CREATED SQL: SELECT COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T1.state_abbrev = T3.StateCode WHERE T2.last = 'Alvarado' AND T2.state = 'MD'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: How many reviews by people between 30 and 50 years include the word 'great'? between 30 and 50 years refers to age BETWEEN 30 AND 50; include the word great refers to Review like '%Great%';
CREATED SQL: SELECT COUNT(T1.Reviews) FROM reviews AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.age BETWEEN 30 AND 50 AND T1.Reviews LIKE '%great%'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What is the full address of the customers who, having received a timely response from the company, have dispute about that response? full address = address_1, address_2; received a timely response refers to Timely response? = 'Yes'; have dispute refers to ""Consumer disputed?"" = 'Yes';
CREATED SQL: SELECT T1.address_1, T1.address_2 FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Timely response?` = 'Yes' AND T2.`Consumer disputed?` = 'Yes'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: How many complaints from female clients born in the year 2000 were not sent through the web? female refers to sex = 'Female'; sent through refers to ""Submitted via""; not sent through web refers to ""Submitted via"" ! = 'Web';
CREATED SQL: SELECT COUNT(T2.`Submitted via`) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.sex = 'Female' AND T1.year = 2000 AND T2.`Submitted via` != 'Web'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: List all the complaints narratives made by the customer named Brenda and last name Mayer. complaints narratives refers to ""Consumer complaint narrative"";
CREATED SQL: SELECT T2.`Consumer complaint narrative` FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Brenda' AND T1.last = 'Mayer'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: How many complaints from customers with a gmail.com email were received by the company in February 2017? gmail.com email refers to email like '%gmail.com'; in February 2017 refers to ""Date received"" BETWEEN '2017-01-02' AND '2017-02-28';
CREATED SQL: SELECT COUNT(T1.email) FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE (T2.`Date received` LIKE '2017-02%' OR T2.`Date received` LIKE '2017-01%') AND T1.email LIKE '%@gmail.com'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What is the average number of stars given by Oregon clients in their reviews? average = DIVIDE(SUM(State = 'Oregon'), COUNT(district_id)); Oregon refers to state = 'Oregon';
CREATED SQL: SELECT CAST(SUM(T3.Stars) AS REAL) / COUNT(T3.Stars) AS average FROM state AS T1 INNER JOIN district AS T2 ON T1.StateCode = T2.state_abbrev INNER JOIN reviews AS T3 ON T2.district_id = T3.district_id WHERE T1.State = 'Oregon'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What percentage of clients who sent their complaints by postal mail are age 50 and older? percentage = MULTIPLY(DIVIDE(SUM(""Submitted via"" = 'Postal mail'), COUNT(client_id)), 1.0); sent their complaints by refers to ""Submitted via""; age > 50;
CREATED SQL: SELECT CAST(SUM(CASE WHEN T1.age > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.`Submitted via`) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Submitted via` = 'Postal mail'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What is the average age of Norwalk clients? average age = AVG(age); Norwalk refers to city = 'Norwalk';
CREATED SQL: SELECT CAST(SUM(T1.age) AS REAL) / COUNT(T1.age) AS average FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.city = 'Norwalk'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: How many clients who live in Kansas City provided a 1-star review? 1-star review refers stars = 1;
CREATED SQL: SELECT COUNT(T1.Stars) FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.city = 'Kansas City' AND T1.Stars = 1
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Which state has the highest number of clients who gave a 5-star review? highest number of clients refers to MAX(COUNT(client_id)); 5-star review refers to stars = 5;
CREATED SQL: SELECT T2.state_abbrev FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.Stars = 5 GROUP BY T2.state_abbrev ORDER BY COUNT(T2.state_abbrev) DESC LIMIT 1
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Which region does Noah Thompson live in?
CREATED SQL: SELECT T2.division FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.first = 'Noah' AND T1.last = 'Thompson'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: How did Kyran Muller submit his complaint? how it was submitted refers to ""Submitted via"";
CREATED SQL: SELECT DISTINCT T2.`Submitted via` FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Kyran' AND T1.last = 'Muller'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What are the products that people who were born after 2005 complain about? year > 2005;
CREATED SQL: SELECT DISTINCT T2.Product FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.year > 2005
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: How long was Kendall Allen's complaint about her credit card? how long refers to ser_time; credit card refers to Product = 'Credit Card';
CREATED SQL: SELECT T3.ser_time FROM events AS T1 INNER JOIN client AS T2 ON T1.Client_ID = T2.client_id INNER JOIN callcenterlogs AS T3 ON T1.`Complaint ID` = T3.`Complaint ID` WHERE T2.first = 'Kendall' AND T2.last = 'Allen' AND T2.sex = 'Female' AND T1.Product = 'Credit card'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What was the issue that the client with the longest server time faced? longest server time refers to MAX(ser_time);
CREATED SQL: SELECT T2.Issue FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE T1.ser_time = ( SELECT MAX(ser_time) FROM callcenterlogs )
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: How many clients who live in New York City submitted their complaints via fax? submitted complaints via fax refers to ""Submitted via"" = 'Fax';
CREATED SQL: SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.city = 'New York City' AND T2.`Submitted via` = 'Fax'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What is the percentage of male clients complaining about their credit cards? percentage = MULTIPLY(DIVIDE(SUM(sex = 'Male'), COUNT(client_id)), 1.0); male refers to sex = 'Male'; credit cards refers to Product = 'Credit card';
CREATED SQL: SELECT CAST(SUM(CASE WHEN T1.sex = 'Male' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.sex) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Product = 'Credit card'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Please list any two clients with their full names who have been tagged as ""Older American"" by the company without seeking their permission. full names = first, middle, last; without seeking their permission refers to ""Consumer consent provided?"" in (null, 'N/A' or 'empty');
CREATED SQL: SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Tags = 'Older American' AND T2.`Consumer consent provided?` IN (NULL, 'N/A', '') LIMIT 2
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What is the birth date of the youngest client? birth date refers to year, month, day; youngest client refers to max(year, month, day)
CREATED SQL: SELECT day, month, year FROM client ORDER BY year DESC, month DESC, day DESC LIMIT 1
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: How many times does the consumer have no dispute over a non-timely response from the company? no dispute refers to Consumer disputed? = 'No'; non-timely response refers to Timely response? = 'No'
CREATED SQL: SELECT COUNT(`Timely response?`) FROM events WHERE `Timely response?` = 'No' AND `Consumer disputed?` = 'No'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: How many of the complaints are longer than 15 minutes? longer than 15 minutes refers to ser_time > '00:15:00'
CREATED SQL: SELECT COUNT(ser_time) FROM callcenterlogs WHERE strftime('%M', ser_time) > '15'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What is the most common issue for the highest priority complaints? most common refers to max(count(issue)); highest priority refers to priority = 2
CREATED SQL: SELECT T1.Issue FROM events AS T1 INNER JOIN callcenterlogs AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE T2.priority = 2 GROUP BY T1.Issue ORDER BY COUNT(T1.Issue) DESC LIMIT 1
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: List the full names of all clients who live in the Pacific division. full name refers to first, last
CREATED SQL: SELECT T2.first, T2.middle, T2.last FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.division = 'Pacific'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What is the social number of the person who made the most complaints? social number refers to social; most complaints refers to max(count(event.Client_ID))
CREATED SQL: SELECT T1.social FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID GROUP BY T1.client_id ORDER BY COUNT(T1.client_id) DESC LIMIT 1
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Which is the city where most of the 1 star reviews come from? most refers to max(count(state_abbrev)); 1 star review refers to Stars = 1
CREATED SQL: SELECT T2.city FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.Stars = 1 GROUP BY T2.city ORDER BY COUNT(T2.city) DESC LIMIT 1
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What is the address of the client who made a complaint via postal mail on March 14, 2012? address refers to address_1, address_2; via postal mail refers to Submitted via = 'Postal mail'; March 14 2012 refers to Date received = '2012-03-14'
CREATED SQL: SELECT T1.address_1, T1.address_2 FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Date received` = '2012-03-14' AND T2.`Submitted via` = 'Postal mail'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Among the female clients, how many of them have a complaint with a priority of 1? female refers to sex = 'Female'
CREATED SQL: SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T1.sex = 'Female' AND T2.priority = 1
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: List all the server of the phone complaints with a late response from the company. phone complaint refers to Submitted via = 'Phone'; late response refers to Timely response? = 'No'
CREATED SQL: SELECT DISTINCT T2.server FROM events AS T1 INNER JOIN callcenterlogs AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE T1.`Submitted via` = 'Phone' AND T1.`Timely response?` = 'No'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: List all the issues of the complaints made by Kaitlyn Eliza Elliott.
CREATED SQL: SELECT DISTINCT T2.Issue FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Kaitlyn' AND T1.middle = 'Eliza' AND T1.last = 'Elliott'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What is the name of the state that the client with the email ""skylar.ramirez@gmail.com"" lives in?
CREATED SQL: SELECT T3.state FROM state AS T1 INNER JOIN district AS T2 ON T1.StateCode = T2.state_abbrev INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T3.email = 'skylar.ramirez@gmail.com'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Which region has the second most clients? region refers to division; second most refers to second max(client_id)
CREATED SQL: SELECT T2.division FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id GROUP BY T2.division ORDER BY COUNT(T2.division) DESC LIMIT 1, 1
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Who is the owner of the final phone number for the complaints on server ""MORIAH"" on 9/11/2013? owner refers to first, middle, last; on 9/11/2013 refers to Date received = '2013-09-11'
CREATED SQL: SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.server = 'MORIAH' AND T2.`Date received` = '2013-09-11'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Compute the average time in minute for each age group teenager refers to 13 < age < = 19; adult refers to 19 < age < = 65; elder refers to age < = 65; highest average time per complaint = max(divide(sum(ser_time), count(ser_time)))
CREATED SQL: SELECT CAST(SUM(CASE WHEN T1.age > 13 AND T1.age <= 19 THEN 60 * strftime('%H', ser_time) + strftime('%M', ser_time) + strftime('%S', ser_time) / 60 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.age > 13 AND T1.age <= 19 THEN 1 ELSE 0 END) AS teenagerAverageMins, CAST(SUM(CASE WHEN T1.age > 19 AND T1.age <= 65 THEN 60 * strftime('%H', ser_time) + strftime('%M', ser_time) + strftime('%S', ser_time) / 60 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.age > 19 AND T1.age <= 65 THEN 1 ELSE 0 END) AS adultAverageMins , CAST(SUM(CASE WHEN T1.age > 65 THEN 60 * strftime('%H', ser_time) + strftime('%M', ser_time) + strftime('%S', ser_time) / 60 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.age > 65 THEN 1 ELSE 0 END) AS elderAverageMins FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client`
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What percentage of complaints are from the elderly? elder refers to age < = 65; percentage refers to divide(sum(age < = 65) , count(client_id)) * 100%
CREATED SQL: SELECT CAST(SUM(CASE WHEN T1.age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.age) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Calculate the percentage of male clients from Indianapolis City. male refers to sex = 'Male'; Indianapolis City refers to city = 'Indianapolis'; percentage = divide(count(client_id where sex = 'Male' and city = 'Indianapolis') , count(client_id where city = 'Indianapolis')) * 100%
CREATED SQL: SELECT CAST(SUM(CASE WHEN sex = 'Male' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(client_id) FROM client WHERE city = 'Indianapolis'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Among the teenager clients who use Google account and Microsoft account, which group of client is more than the other? teenager refers to 13 < age < = 19; Google account refers to email like '%@gmail.com'; Microsoft account refers to email like '%@outlook.com'
CREATED SQL: SELECT CASE WHEN SUM(CASE WHEN email LIKE '%@gmail.com' THEN 1 ELSE 0 END) > SUM(CASE WHEN email LIKE '%@outlook.com' THEN 1 ELSE 0 END) THEN 'Google account' ELSE 'Microsoft account' END FROM client WHERE age BETWEEN 13 AND 19
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What is the full name of client whose email address is emily.garcia43@outlook.com? full name refers to first middle last
CREATED SQL: SELECT first, middle, last FROM client WHERE email = 'emily.garcia43@outlook.com'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What is the first name of clients who have the highest priority? first name refers to first; highest priority refers to priority = 2
CREATED SQL: SELECT T1.first FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.priority = ( SELECT MAX(priority) FROM callcenterlogs )
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: List down the email of client whose complaint is type ""PS"".
CREATED SQL: SELECT T1.email FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.type = 'PS'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Among the elderlies, state the last name of whose complaint is handled in server YIFAT? elder refers to age < = 65; last name refers to last
CREATED SQL: SELECT T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T1.age > 65 AND T2.server = 'YIFAT'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: How many clients who live in New York City have the complaint outcome as ""AGENT""? New York City refers to city = 'New York City'
CREATED SQL: SELECT COUNT(T2.`rand client`) FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T1.city = 'New York City' AND T2.outcome = 'AGENT'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: List down the full name of clients who have disputed the response from company. full name refers to first, middle, last; disputed the response refers to Consumer disputed? = 'Yes'
CREATED SQL: SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Consumer disputed?` = 'Yes'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What are the complaint id of client who were born in 1931? in 1931 refers to year = 1931
CREATED SQL: SELECT T2.`Complaint ID` FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T1.year = 1931
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Calculate the percentage of complaints made by Google account client in server ZOHARI. Google account refers to email like '%@gmail.com'; percentage = divide(count(Complaint ID where email like '%@gmail.com') , count(Complaint ID)) * 100%
CREATED SQL: SELECT CAST(SUM(CASE WHEN T1.email LIKE '%@gmail.com' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.email) FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.server = 'ZOHARI'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: State the full name of clients with server time of 20 minutes and above. full name refers to first, middle, last; server time of 20 minutes and above refers to ser_time > '00:20:00'
CREATED SQL: SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE strftime('%M', T2.ser_time) > '20'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Pick 5 clients with 0 priority and write down their last name. 0 priority refers to priority = 0; last name refers to last
CREATED SQL: SELECT T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.priority = 0 LIMIT 5
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Write down the call id of clients whose first name start with alphabet ""B"". first name start with alphabet ""B"" refers to first like 'B%'
CREATED SQL: SELECT T2.call_id FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T1.first LIKE 'B%'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What is the product complained by Alexander Bronx Lewis?
CREATED SQL: SELECT DISTINCT T2.Product FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Alexander' AND T1.middle = 'Bronx' AND T1.last = 'Lewis'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: State the first name of male clients who did not receive timely response from the call center. first name refers to first; male refers to sex = 'Male'; did not receive timely response refers to Timely response? = 'No'
CREATED SQL: SELECT T1.first FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Timely response?` = 'No' AND T1.sex = 'Male'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Which product received the most complaints from elder clients? most complaints refers to max(client_id); elder client refers to age > 65
CREATED SQL: SELECT T2.Product FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.age > 65 ORDER BY T1.client_id DESC LIMIT 1
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Complaint about Credit Card mostly came from clients of which age group? about Credit Card refers to Product = 'Credit Card'; teenager refers to 13 < age < = 19; adult refers to 19 < age < = 65; elder refers to age < = 65
CREATED SQL: SELECT SUM(CASE WHEN T1.age > 13 AND T1.age <= 19 THEN 1 ELSE 0 END), SUM(CASE WHEN T1.age > 19 AND T1.age <= 65 THEN 1 ELSE 0 END) AS adult , SUM(CASE WHEN T1.age > 65 THEN 1 ELSE 0 END) AS elder FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Product = 'Credit card'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: List down the issues for complaint with server time of below 10 minutes. server time of below 10 minutes refers to ser_time < '00:10:00'
CREATED SQL: SELECT T2.Issue FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE strftime('%M', T1.ser_time) < '10'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Write down the date received of complaints sent via Fax. sent via Fax refers to Submitted via = 'Fax'
CREATED SQL: SELECT T1.`Date received` FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE T2.`Submitted via` = 'Fax'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What is the full name of clients who have issue about balance transfer? full name refers to first, middle, last; issue about balance transfer refers to Issue = 'Balance transfer'
CREATED SQL: SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Issue = 'Balance transfer'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What is the email address of clients who submitted their complaints via postal mail? via postal mail refers to Submitted via = 'Postal mail'
CREATED SQL: SELECT T1.email FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Submitted via` = 'Postal mail'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Calculate the average age of clients whose response is ""Closed with relief"". average age = avg(age where Company response to consumer = 'Closed with relief'); response ""Closed with relief"" refers to Company response to consumer = 'Closed with relief'
CREATED SQL: SELECT AVG(T1.age) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Company response to consumer` = 'Closed with relief'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What is the average age of clients whose complaint type is ""TT""? average age = avg(age where type = 'TT')
CREATED SQL: SELECT AVG(T1.age) FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.type = 'TT'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Write the complaint ID, call ID, and final phone number of complaints through AVIDAN server from 1/1/2014 to 12/30/2014. final phone number refers to phonefinal; from 1/1/2014 to 12/30/2014 refers to Date received between '2014-01-01' and '2014-12-30'
CREATED SQL: SELECT `Complaint ID`, call_id, phonefinal FROM callcenterlogs WHERE strftime('%Y', `Date received`) = '2014' AND server = 'AVIDAN'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Between 1/1/2017 and 4/1/2017, what is the average server time of calls under the server DARMON? between 1/1/2017 and 4/1/2017 refers to Date received between '2017-01-01' and '2017-04-01'; average server time refers to avg(ser_time)
CREATED SQL: SELECT AVG(CAST(SUBSTR(ser_time, 4, 2) AS REAL)) FROM callcenterlogs WHERE `Date received` BETWEEN '2017-01-01' AND '2017-04-01'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: How many times per year does a credit card customer complain about overlimit fees? credit card customer refers to product = 'Credit card'; about overlimit fees refers to issue = 'Overlimit fee'
CREATED SQL: SELECT strftime('%Y', `Date received`), COUNT(`Date received`) FROM events WHERE product = 'Credit card' AND issue = 'Overlimit fee' GROUP BY strftime('%Y', `Date received`) HAVING COUNT(`Date received`)
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Among the clients in Middle Atlantic, how many are them are female and no more than 18 years old? in Middle Atlantic refers to division = 'Middle Atlantic'; female refers to sex = 'Female'; no more than 18 refers to age < 18
CREATED SQL: SELECT COUNT(T1.sex) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'Middle Atlantic' AND T1.sex = 'Female' AND T1.age < 18
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Give me the full birthdate, email and phone number of the youngest client in Indianapolis . full birthdate = year, month, day; youngest refers to max(year, month, day); in Indianapolis refers to city = 'Indianapolis'
CREATED SQL: SELECT T1.year, T1.month, T1.day, T1.email, T1.phone FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.city = 'Indianapolis' ORDER BY T1.year DESC, T1.month DESC, T1.day DESC LIMIT 1
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: List the top five cities in terms of the number of 5-star ratings in 2016 reviews, in descending order. 5-star rating refers to Stars = 5; in 2016 refers to Date like '2016%'; most reviews refers to max(count(city))
CREATED SQL: SELECT T2.city FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.Stars = 5 AND T1.Date LIKE '2016%' ORDER BY T1.Date DESC LIMIT 5
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What is the longest server time when the call is about the issue of arbitration? longest server time refers to max(ser_time)
CREATED SQL: SELECT MAX(T1.ser_time) FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE T2.issue = 'Arbitration'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Give me the social number and state of the client whose phone number is 100-121-8371. social number refers to social
CREATED SQL: SELECT T1.social, T1.state FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T1.phone = '100-121-8371'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: List the full names and phone numbers of clients that were from the Pacific. full name refers to first, middle, last; the Pacific refers to division = 'Pacific'
CREATED SQL: SELECT T1.first, T1.middle, T1.last, T1.phone FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'Pacific'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What is the social number of the client who has the longest delay in his/her complaint? Calculate the days of delay and state the company's response to the consumer. social number refers to social; longest delay = max(subtract(Date sent to company, Date received)); days of delay = subtract(Date sent to company, Date received); company's response refers to 'Company response to consumer'
CREATED SQL: SELECT T1.social , 365 * (strftime('%Y', T2.`Date sent to company`) - strftime('%Y', T2.`Date received`)) + 30 * (strftime('%M', T2.`Date sent to company`) - strftime('%M', T2.`Date received`)) + (strftime('%d', T2.`Date sent to company`) - strftime('%d', T2.`Date received`)), T2.`Company response to consumer` FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID ORDER BY 365 * (strftime('%Y', T2.`Date sent to company`) - strftime('%Y', T2.`Date received`)) + 30 * (strftime('%M', T2.`Date sent to company`) - strftime('%M', T2.`Date received`)) + (strftime('%d', T2.`Date sent to company`) - strftime('%d', T2.`Date received`)) DESC LIMIT 1
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: How many female clients are there older than 30? female refers to sex = 'Female'; older than 30 refers to age > 30
CREATED SQL: SELECT COUNT(sex) FROM client WHERE sex = 'Female' AND age > 30
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Please list all first and last names of clients who live in New York city. New York City refers to city = 'New York City'
CREATED SQL: SELECT first, last FROM client WHERE city = 'New York City'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What is the oldest age of male clients? oldest age refers to max(age); male refers to sex = 'Male'
CREATED SQL: SELECT MAX(age) FROM client WHERE sex = 'Male'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Please calculate the number of clients by each division.
CREATED SQL: SELECT T2.division, COUNT(T2.division) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id GROUP BY T2.division
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What is the percentage of female clients in the Middle Atlantic? female refers to sex = 'Female'; the Middle Atlantic refers to division = 'Middle Atlantic'; percentage = divide(count(client_id where sex = 'Female' and division = 'Middle Atlantic') , count(client_id where division = 'Middle Atlantic')) * 100%
CREATED SQL: SELECT CAST(SUM(CASE WHEN T1.sex = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.sex) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'South Atlantic'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What is the average age of clients in South Atlantic? in South Atlantic refers to division = 'South Atlantic'; average age refers to avg(age)
CREATED SQL: SELECT AVG(T1.age) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'South Atlantic'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Which city in the Midwest region has the least number of clients? least number of clients refers to min(count(client_id))
CREATED SQL: SELECT T2.city FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T3.Region = 'Midwest' GROUP BY T2.city ORDER BY COUNT(T2.city) LIMIT 1
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: How many customers in the Northeast use Microsoft email? the Northeast refers to Region = 'Northeast'; Microsoft email refers to email like '%@outlook.com'
CREATED SQL: SELECT COUNT(T1.email) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T3.Region = 'Northeast' AND T1.email LIKE '%@outlook.com'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Which city in West North Central has the highest number of customers over the age of 60? in North Central refers to Region = 'North Central'; highest number of customers refers to max(count(client_id)); over the age of 60 refers to age > 60
CREATED SQL: SELECT T2.city FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'West North Central' AND T1.age > 60 GROUP BY T2.city ORDER BY COUNT(T2.city) DESC LIMIT 1
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What is the percentage of complaints about the late fee issue whose priority is 2 in 2017? percentage = divide(count(Complaint ID where priority = 2) , count(Complaint ID)) * 100%; in 2017 refers to year(Date received) = 2017
CREATED SQL: SELECT CAST(SUM(CASE WHEN T1.priority = 2 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.`Complaint ID`) FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE strftime('%Y', T1.`Date received`) = '2017'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Which state has the most cities? state refers to state_abbrev; most cities refers to max(count(city))
CREATED SQL: SELECT state_abbrev FROM district GROUP BY state_abbrev ORDER BY COUNT(city) DESC LIMIT 1
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Please give the first name and phone number of the client whose complaint id is CR0922485. first name refers to first
CREATED SQL: SELECT T1.first, T1.phone FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Complaint ID` = 'CR0922485'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Please list the emails of the clients whose complaint date received is 7/3/2014. 7/3/2014 refers to Date received = '2014-07-03'
CREATED SQL: SELECT T1.email FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Date received` = '2014-07-03'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: In 2012, how many complaints about Credit card product came from clients in Omaha? in 2012 refers to Date received LIKE'2012%'; in Omaha refers to city = 'Omaha'
CREATED SQL: SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.city = 'Omaha' AND strftime('%Y', T2.`Date received`) = '2012' AND T2.Product = 'Credit card'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: From 2012 to 2015, how many complaints were submitted via email from female clients? from 2012 to 2015 refers to Date received BETWEEN 2012 AND 2015; submitted via email refers to Submitted via = 'Email'; female refers to sex = 'Female'
CREATED SQL: SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE strftime('%Y', T2.`Date received`) BETWEEN '2012' AND '2015' AND T2.`Submitted via` = 'Email' AND T1.sex = 'Male'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Please list all clients' phone numbers and complaint IDs which are still in progress. in progress refers to Company response to consumer = 'In progress'
CREATED SQL: SELECT T1.phone, T2.`Complaint ID` FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Company response to consumer` = 'In progress'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: In 2015, how many complaints about Billing disputes were sent by clients in Portland? in 2015 refers to Date received LIKE'2015%'; about Billing disputes refers to Issue = 'Billing disputes'; Portland refers to city = 'Portland'
CREATED SQL: SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.city = 'Portland' AND T2.`Date received` LIKE '2015%' AND T2.Issue = 'Billing disputes'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: In 2014, what is the percentage of complaints from consumers in Houston that the delay was over 5 days? in 2014 refers to Date received LIKE'2014%'; Houston refers to city = 'Houston'; delay over 5 days refers to subtract(Date sent to company, Date received) > 5; percentage = divide(count(Complaint ID where subtract(Date sent to company , Date received) > 5) , count(Complaint ID)) * 100%
CREATED SQL: SELECT CAST((SUM(CASE WHEN strftime('%J', T2.`Date sent to company`) - strftime('%J', T2.`Date received`) > 5 THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.city = 'Houston' AND strftime('%Y', T2.`Date received`) = '2014'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: In the complains received in 2012, how many of them are submitted through email? received in 2012 refers to Date received LIKE '2012%'; submitted through email refers to Submitted via = 'Email'
CREATED SQL: SELECT COUNT(`Submitted via`) FROM events WHERE strftime('%Y', `Date received`) = '2012' AND `Submitted via` = 'Email'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Give the client ID of the complaint received on April 16, 2014 and submitted through fax. April 16, 2014 refers to Date received = '2014-04-16'; submitted through fax refers to Submitted via = 'Fax'
CREATED SQL: SELECT T2.Client_ID FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE T2.`Submitted via` = 'Fax' AND T1.`Date received` = '2014-04-16'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: List date of the review of the Eagle Capital from Indianapolis, Indiana. Eagle Capital refers to Product = 'Eagle Capital'; Indianapolis refers to city = 'Indianapolis'; Indiana refers to state_abbrev = 'IN'
CREATED SQL: SELECT T2.Date FROM district AS T1 INNER JOIN reviews AS T2 ON T1.district_id = T2.district_id WHERE T2.Product = 'Eagle Capital' AND T1.city = 'Indianapolis' AND T1.state_abbrev = 'IN'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Among the complaints received in year 2015, what is total number of complaints timely response and closed with an explanation? in year 2015 refers to Date received LIKE '2015%'; timely response refers to Timely response?"" = 'Yes'; closed with an explanation refers to Company response to consumer = 'Closed with explanation'
CREATED SQL: SELECT COUNT(T1.`Complaint ID`) FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE strftime('%Y', T1.`Date received`) = '2015' AND T2.`Timely response?` = 'Yes' AND T2.`Company response to consumer` = 'Closed with explanation'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Among the female clients that age between 20 to 40, list the date when their complaints were received. female refers to sex = 'Female'
CREATED SQL: SELECT DISTINCT T3.`Date received` FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID INNER JOIN callcenterlogs AS T3 ON T2.`Complaint ID` = T3.`Complaint ID` WHERE T1.age BETWEEN 20 AND 40 AND T1.sex = 'Female'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: List the product reviewed with 1 star on March 14, 2016 from Newton, Massachusetts. 1 star refers to Stars = 1; on March 14, 2016 refers to Date = '2016-03-14'; Newton refers to city = 'Newton'; Massachusetts refers to state_abbrev = 'MA'
CREATED SQL: SELECT T2.Product FROM district AS T1 INNER JOIN reviews AS T2 ON T1.district_id = T2.district_id WHERE T1.city = 'Newton' AND T1.state_abbrev = 'MA' AND T2.Date = '2016-03-14' AND T2.Stars = 1
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: In reviews for the Eagle National Bank product, how many of the 5 star reviews where from Nashville, Tennessee? 5 star refers to Stars = 5; Nashville refers to city = 'Nashville'; Tennessee refers to state_abbrev = 'TN'
CREATED SQL: SELECT COUNT(T2.Stars) FROM district AS T1 INNER JOIN reviews AS T2 ON T1.district_id = T2.district_id WHERE T1.city = 'Nashville' AND T1.state_abbrev = 'TN' AND T2.Product = 'Eagle National Mortgage' AND T2.Stars = 5
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What are the issues of the complains of male clients and products from age 25 and below? male refers to sex = 'Male'; age 25 and below refers to age < 25
CREATED SQL: SELECT DISTINCT T2.Issue FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.sex = 'Male' AND T1.age < 25
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: Among the reviews from midwest region, what are the products that received 1 star? 1 star refers to Stars = 1
CREATED SQL: SELECT DISTINCT T3.Product FROM state AS T1 INNER JOIN district AS T2 ON T1.StateCode = T2.state_abbrev INNER JOIN reviews AS T3 ON T2.district_id = T3.district_id WHERE T1.Region = 'Midwest' AND T3.Stars = 1
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: List the products involved in the complaints received on March 2017 via TOVA server. on March 2017 refers to Date received LIKE '%03%' AND Date received LIKE '2017%'
CREATED SQL: SELECT DISTINCT T2.Product FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE T1.server = 'TOVA' AND T2.`Date received` LIKE '2017-03%'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: What is the division of the review of 5 stars received on December 17, 2017 for the product Eagle National Mortgage? 5 stars refers to Stars = 5; on December 17 2017 refers to Date = '2017-12-17'
CREATED SQL: SELECT T1.division FROM district AS T1 INNER JOIN reviews AS T2 ON T1.district_id = T2.district_id WHERE T2.Stars = 5 AND T2.Date = '2017-12-17' AND T2.Product = 'Eagle National Mortgage'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: In complaints about the credit card product, list the phone number of the oldest client. oldest refers to max(age)
CREATED SQL: SELECT T1.phone FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Product = 'Credit card' ORDER BY T1.age DESC LIMIT 1
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: In complaints received in 2014, how many of them were submitted via call? in 2014 refers to Date received LIKE '2014%'; submitted via call refers to Submitted via = 'Phone'
CREATED SQL: SELECT COUNT(T2.`Complaint ID`) FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE T2.`Submitted via` = 'Phone' AND strftime('%Y', T1.`Date received`) = '2014'
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: List the product and its issues of the complains of clients with age greater than the 60% of average age of all clients. age greater than the 60% of average age refers to age > multiply(avg(age) , 0.6)
CREATED SQL: SELECT DISTINCT T2.Product, T2.Issue FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.age * 100 > ( SELECT AVG(age) * 60 FROM client )
END OF QUESTION"
retail_complains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE state (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE callcenterlogs (
Date received date,
Complaint ID text,
rand client text,
phonefinal text,
vru+line text,
call_id integer,
priority integer,
type text,
outcome text,
server text,
ser_start text,
ser_exit text,
ser_time text,
PRIMARY KEY (Complaint ID),
FOREIGN KEY (rand client) REFERENCES client(client_id),
);
CREATE TABLE client (
client_id text,
sex text,
day integer,
month integer,
year integer,
age integer,
social text,
first text,
middle text,
last text,
phone text,
email text,
address_1 text,
address_2 text,
city text,
state text,
zipcode integer,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE district (
district_id integer,
city text,
state_abbrev text,
division text,
PRIMARY KEY (district_id),
FOREIGN KEY (state_abbrev) REFERENCES state(StateCode),
);
CREATE TABLE events (
Date received date,
Product text,
Sub-product text,
Issue text,
Sub-issue text,
Consumer complaint narrative text,
Tags text,
Consumer consent provided? text,
Submitted via text,
Date sent to company text,
Company response to consumer text,
Timely response? text,
Consumer disputed? text,
Complaint ID text,
Client_ID text,
FOREIGN KEY (Complaint ID) REFERENCES callcenterlogs(Complaint ID),
FOREIGN KEY (Client_ID) REFERENCES client(client_id),
);
CREATE TABLE reviews (
Date date,
Stars integer,
Reviews text,
Product text,
district_id integer,
PRIMARY KEY (Date),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
---------------------
QUESTION: In reviews of product with 5 stars, what is the percentage of the reviews coming from the division of East North Central? 5 stars refers to Stars = 5; percentage = divide(count(division = 'East North Central', count(division)) * 100%
CREATED SQL: SELECT CAST(SUM(CASE WHEN T1.division = 'East North Central' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.division) FROM district AS T1 INNER JOIN reviews AS T2 ON T1.district_id = T2.district_id WHERE T2.Stars = 5
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Please list the names of the production company of the movie ""Four Rooms"". names of the production company refers to movie_company; movie ""Four Rooms"" refers to title = 'Four Rooms'
CREATED SQL: SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Four Rooms'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: How many production companies does the movie ""Four Rooms"" have? movie ""Four Rooms"" refers to title = 'Four Rooms'
CREATED SQL: SELECT COUNT(CNAME) FROM ( SELECT T1.company_name AS CNAME FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Four Rooms' )
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Please list the titles of all the movie produced by production company ""Universal Pictures"". ""Universal Pictures"" refers to company_name = 'Universal Pictures'
CREATED SQL: SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Universal Pictures'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the title of the latest released movie produced by production company ""Universal Pictures""? ""Universal Pictures"" refers to company_name = 'Universal Pictures'; latest released refers to max(release_date)
CREATED SQL: SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Universal Pictures' ORDER BY T3.release_date DESC LIMIT 1
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the name of the director of photography of the movie ""Pirates of the Caribbean: At World's End""? name of the director of photography refers to person_name where job = 'Director of Photography'; ""Pirates of the Caribbean: At World's End"" refers to title = 'Pirates of the Caribbean: At World''s End'
CREATED SQL: SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T2.job = 'Director of Photography'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What was the job of Dariusz Wolski in the movie ""Pirates of the Caribbean: At World's End""? movie ""Pirates of the Caribbean: At World's End"" refers to title = 'Pirates of the Caribbean: At World''s End'
CREATED SQL: SELECT T2.job FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T3.person_name = 'Dariusz Wolski'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Please list the names of all the crew members of the movie ""Pirates of the Caribbean: At World's End"". names refers to person_name; ""Pirates of the Caribbean: At World's End"" refers to title = 'Pirates of the Caribbean: At World''s End'
CREATED SQL: SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: How many crew members worked as producer in the movie ""Pirates of the Caribbean: At World's End""? worked as producer refers to job = 'Producer'; ""Pirates of the Caribbean: At World's End"" refers to title = 'Pirates of the Caribbean: At World''s End'
CREATED SQL: SELECT COUNT(T3.person_id) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T2.job = 'Producer'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Please list the names of all the producers in the movie ""Pirates of the Caribbean: At World's End"". names refers to person_name; producers refers to job = 'Producer'; ""Pirates of the Caribbean: At World's End"" refers to title = 'Pirates of the Caribbean: At World''s End'
CREATED SQL: SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T2.job = 'Producer'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: In how many movie does Dariusz Wolski work as the director of photography? director of photography refers to job = 'Director of Photography'
CREATED SQL: SELECT COUNT(T2.movie_id) FROM person AS T1 INNER JOIN movie_crew AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Dariusz Wolski' AND T2.job = 'Director of Photography'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Among the movie in which Dariusz Wolski works as the director of photography, what is the title of the one with the highest average vote? director of photography refers to job = 'Director of Photography'; highest average vote refers to max(vote_average)
CREATED SQL: SELECT T1.title FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Dariusz Wolski' AND T2.job = 'Director of Photography' ORDER BY T1.vote_average DESC LIMIT 1
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: When was the release date of the latest movie in which Dariusz Wolski worked as a crew member? release date of the latest movie refers to max(release_date)
CREATED SQL: SELECT T1.release_date FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Dariusz Wolski' ORDER BY T1.release_date DESC LIMIT 1
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Among the movie in which Dariusz Wolski works as the director of photography, what is the percentage of those movie whose vote average is over 5.0? director of photography refers to job = 'Director of Photography'; vote average is over 8.0 refers to vote_average > 5; percentage = divide(sum(movie_id) when vote_average > 5, count(movie_id)) as percentage
CREATED SQL: SELECT CAST(COUNT(CASE WHEN T1.vote_average > 5 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.vote_average) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Dariusz Wolski' AND T2.job = 'Director of Photography'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the average revenue of the movie in which Dariusz Wolski works as the director of photography? director of photography refers to job = 'Director of Photography'; average revenue = divide(sum(revenue), count(movie_id))
CREATED SQL: SELECT CAST(SUM(T1.revenue) AS REAL) / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Dariusz Wolski' AND T2.job = 'Director of Photography'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Give the name of the movie with a revenue of 559852396. name of the movie refers to title; revenue of 559852396 refers to revenue = '559852396'
CREATED SQL: SELECT title FROM movie WHERE revenue = 559852396
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What was David Rubin's job in the movie ""Days of Thunder""? ""Days of Thunder"" refers to title = 'Days of Thunder'
CREATED SQL: SELECT T2.job FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'David Rubin' AND T1.title = 'Days of Thunder'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: How many movies were directed by Michael Bay? directed by refers to job = 'Director'
CREATED SQL: SELECT COUNT(T2.movie_id) FROM person AS T1 INNER JOIN movie_crew AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Michael Bay' AND T2.job = 'Director'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Show the total number of keywords of the movie ""I Hope They Serve Beer in Hell"". ""I Hope They Serve Beer in Hell"" refers to title = 'I Hope They Serve Beer in Hell';
CREATED SQL: SELECT COUNT(T2.keyword_id) FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'I Hope They Serve Beer in Hell'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: For the movie ""Land of the Dead"", who is its director? ""Land of the Dead"" refers to title = 'Land of the Dead'; director refers to person_name where job = 'Director'
CREATED SQL: SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Land of the Dead' AND T2.job = 'Director'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Tell the number of movies made by Paramount Animation. Paramount Animation refers to company_name = 'Paramount Animation'
CREATED SQL: SELECT COUNT(T2.movie_id) FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id WHERE T1.company_name = 'Paramount Animation'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: How many female characters are there in the movie ""Spider-Man 3""? female characters refer to gender = 'Female'; ""Spider-Man 3"" refers to title = 'Spider-Man 3'
CREATED SQL: SELECT COUNT(*) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T2.gender_id = T3.gender_id WHERE T1.title = 'Spider-Man 3' AND T3.gender = 'Female'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Provide the most used keyword in the movies. most used keyword refers to keyword_name where max(count(keyword_name))
CREATED SQL: SELECT T1.keyword_name FROM keyword AS T1 INNER JOIN movie_keywords AS T2 ON T1.keyword_id = T2.keyword_id GROUP BY T1.keyword_name ORDER BY COUNT(T1.keyword_name) DESC LIMIT 1
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: How many producers does the movie ""The Amityville Horror"" have? producers refers to job = 'Producer'; ""The Amityville Horror"" refers to title = 'The Amityville Horror'
CREATED SQL: SELECT COUNT(T2.person_id) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'The Amityville Horror' AND T2.job = 'Producer'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the production company of the movie ""Crazy Heart""? movie ""Crazy Heart"" refers to title = 'Crazy Heart'; production company refers to company_name
CREATED SQL: SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Crazy Heart'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Give the number of movies with ""saving the world"" as the keyword. ""saving the world"" as the keyword refers to keyword_name = 'saving the world'
CREATED SQL: SELECT COUNT(T2.movie_id) FROM keyword AS T1 INNER JOIN movie_keywords AS T2 ON T1.keyword_id = T2.keyword_id WHERE keyword_name = 'saving the world'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: For all the movies which were produced by Cruel and Unusual Films, which one has the most popularity? produced by Cruel and Unusual Films refers to company_name = 'Cruel and Unusual Films'; most popularity refers to max(popularity)
CREATED SQL: SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Cruel and Unusual Films' ORDER BY T3.popularity DESC LIMIT 1
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: For the movie ""Reign of Fire"", which department was Marcia Ross in? movie ""Reign of Fire"" refers to title = 'Reign of Fire'; which department refers to department_name
CREATED SQL: SELECT T4.department_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id INNER JOIN department AS T4 ON T2.department_id = T4.department_id WHERE T3.person_name = 'Marcia Ross' AND T1.title = 'Reign of Fire'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Calculate the average budget of the movies directed by Jaume Collet-Serra. directed by refers to job = 'Director'; average budget = AVG(budget)
CREATED SQL: SELECT CAST(SUM(T1.budget) AS REAL) / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Jaume Collet-Serra' AND T2.job = 'Director'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the percentage of male characters in the movie ""Bride Wars""? male refers to gender = 'Male'; ""Bride Wars"" refers to title = 'Bride Wars'; percentage = divide(sum(gender = 'Male'), count(gender)) * 100 as percentage
CREATED SQL: SELECT CAST(COUNT(CASE WHEN T3.gender = 'Male' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T3.gender) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T2.gender_id = T3.gender_id WHERE T1.title = 'Bride Wars'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the title of the movie that was made with the most money and resources? made with the most money and resources refers to max(budget)
CREATED SQL: SELECT title FROM movie ORDER BY budget DESC LIMIT 1
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: How many movies have made at least 1 Billion at the box office? have made at least 1 Billion at the box office refers to revenue > 1000000000
CREATED SQL: SELECT COUNT(movie_id) FROM movie WHERE revenue > 1000000000
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: When was the first movie released? when the first movie refers to release_date where min(release_date)
CREATED SQL: SELECT MIN(release_date) FROM movie WHERE movie_status = 'Released'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: How many crew are named John Young?
CREATED SQL: SELECT COUNT(person_id) FROM person WHERE person_name = 'John Young'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Provide the title of the movie that is most-liked by a large number of people. most-liked by a large number of people refers to max(popularity)
CREATED SQL: SELECT title FROM movie ORDER BY popularity DESC LIMIT 1
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Who is the person associated with the crew id 1325273? Who is the person refers to person_name; crew id 1325273 refers to person_id = 1325273
CREATED SQL: SELECT person_name FROM person WHERE person_id = 1325273
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the name of the production company that made the most movies? name of the production company refers to company_name; most movies refers to max(count(company_name))
CREATED SQL: SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY COUNT(T2.movie_id) DESC LIMIT 1
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Who played Captain Jack Sparrow in all of the Pirates of the Caribbean movies? Captain Jack Sparrow refers to character_name = 'Captain Jack Sparrow'; Pirates of the Caribbean movies refers to title LIKE 'Pirates of the Carribbean%'
CREATED SQL: SELECT DISTINCT T3.person_name FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T2.character_name = 'Captain Jack Sparrow' AND T1.title LIKE 'Pirates of the Caribbean%'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is Walt Disney Pictures' most popular movie? Walt Disney Pictures refers to company_name = 'Walt Disney Pictures'; most popular movie refers to max(popularity)
CREATED SQL: SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Walt Disney Pictures' ORDER BY T3.popularity DESC LIMIT 1
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: How many movies did Universal Studios release? Universal Studios refers to company_name = 'Universal Studios'
CREATED SQL: SELECT COUNT(T2.movie_id) FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id WHERE T1.company_name = 'Universal Studios'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Which production company produced the movie that made the most money at the box office? Which production company refers to company_name; most money at the box office refers to max(revenue)
CREATED SQL: SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id GROUP BY T1.company_id ORDER BY SUM(T3.revenue) DESC LIMIT 1
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: How many female crews are in the movie ""Mr. Smith Goes to Washington""? female crews refers to gender = 'Female'; ""Mr. Smith Goes to Washington"" refers to title = 'Mr. Smith Goes to Washington'
CREATED SQL: SELECT COUNT(T3.gender) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T2.gender_id = T3.gender_id WHERE T1.title = 'Mr. Smith Goes to Washington' AND T3.gender = 'Female'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: List the names of the production companies that made at least 200 movies. names of the production companies refers to company_name; at least 200 movies refers to COUNT(company_name) > = 200
CREATED SQL: SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id HAVING COUNT(T2.movie_id) > 200
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: How many movies did Harrison Ford appear in total?
CREATED SQL: SELECT COUNT(T2.movie_id) FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Harrison Ford'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the title of Jamie Foxx's most recent movie? most recent movie refers to max(release_date)
CREATED SQL: SELECT T1.title FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Jamie Foxx' ORDER BY T1.release_date DESC LIMIT 1
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: How many movies released in 1995 did Quentin Tarantino appear in? released in 1995 refers to release_date LIKE '1995%'
CREATED SQL: SELECT COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Quentin Tarantino' AND CAST(STRFTIME('%Y', T1.release_date) AS INT) = 1995
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the title of the first crime movie ever released? first crime movie ever released refers to min(release_date) and genre_name = 'Crime'
CREATED SQL: SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Crime' ORDER BY T1.release_date LIMIT 1
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: How many horror movies are there? horror movies refers to genre_name = 'Horror'
CREATED SQL: SELECT COUNT(T1.movie_id) FROM movie_genres AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.genre_id WHERE T2.genre_name = 'Horror'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: List the person IDs of the second film editors in Movie No. 12. second film editors refers to job = 'Second Film Editor'; Movie No. 12 refers to movie_id = 12
CREATED SQL: SELECT person_id FROM movie_crew WHERE movie_id = 12 AND job = 'Second Film Editor'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: How many animators does Movie No. 129 have? animators refers to job = 'Animation'; Movie No. 129 refers to movie_id = 129
CREATED SQL: SELECT COUNT(movie_id) FROM movie_crew WHERE movie_id = 129 AND job = 'Animation'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: In Movie No. 19, how many people are there in Department No. 7? Please give me their job. Movie No. 19 refers to movie_id = 19; Department No. 7 refers to department_id = 7
CREATED SQL: SELECT COUNT(DISTINCT job) FROM movie_crew WHERE movie_id = 19 AND department_id = 7
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Write the person ID and character name of casts between order numbers 1 and 10 in Movie No. 285. casts between order numbers 1 and 10 refers to cast_order BETWEEN 2 AND 9; Movie No. 285 refers to movie_id = 285
CREATED SQL: SELECT person_id, character_name FROM movie_cast WHERE movie_id = 285 AND cast_order BETWEEN 1 AND 10
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: How many times did Bob Peterson appear in the movie credits?
CREATED SQL: SELECT COUNT(T2.movie_id) FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Bob Peterson'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Tally the movie ID and character name in the movie starring Jim Carrey.
CREATED SQL: SELECT T2.movie_id, T2.character_name FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Jim Carrey'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Give the names of the female cast in Movie No. 1865. female cast refers to gender = 'Female'; name of cast refers to person_name; Movie No. 1865 refers to movie_id = 1865
CREATED SQL: SELECT T2.person_name FROM movie_cast AS T1 INNER JOIN person AS T2 ON T1.person_id = T2.person_id INNER JOIN gender AS T3 ON T1.gender_id = T3.gender_id WHERE T1.movie_id = 1865 AND T3.gender = 'Female'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Write me the titles of the movies starring Jim Carrey. Jim Carrey is the person_name;
CREATED SQL: SELECT T1.title FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Jim Carrey'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: List the director's name of the movies released between 1/01/1916 and 12/31/1925. director's name refers to person_name where job = 'Director'; released between 1/01/1916 and 12/31/1925 refers to release_date BETWEEN '1916-01-02' AND '1925-12-30'
CREATED SQL: SELECT T2.person_name FROM movie_cast AS T1 INNER JOIN person AS T2 ON T1.person_id = T2.person_id INNER JOIN movie AS T3 ON T1.movie_id = T3.movie_id INNER JOIN movie_crew AS T4 ON T1.movie_id = T4.movie_id WHERE T4.job = 'Director' AND T3.release_date BETWEEN '1916-01-01' AND '1925-12-31'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: How many films released between 1/2/1990 and 12/30/2000 starred Uma Thurman? released between 1/2/1990 and 12/30/2000 refers to release_date BETWEEN '1990-01-02' AND '2000-12-30'; film has the same meaning as movie; starred Uma Thurman refers to person_name = 'Uma Thurman'
CREATED SQL: SELECT COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Uma Thurman' AND T1.release_date BETWEEN '1990-01-01' AND '2000-12-31'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Write the titles of horror films with a vote average of more than 7. horror films refers to genre_name = 'Horror'; vote average of more than 7 refers to vote_average > 7
CREATED SQL: SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Horror' AND vote_average > 7
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Give the genre and popularity of movies whose revenue is at least 120,000,000 between 2012 and 2015. genre refers to genre_name; revenue is at least 120,000,000 refers to revenue > = 120000000; between 2012 and 2015 refers to release_date BETWEEN '2012-01-01' AND '2015-12-31'
CREATED SQL: SELECT T3.genre_name, T1.popularity FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.revenue > 120000000 AND T1.release_date BETWEEN '2012-01-01' AND '2015-12-31'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: How many Indian movies between 1/2/1990 and 12/30/2003 have revenue of more than 75,000,000 and popularity of no less than 20? Indian movies refers to country_name = 'India'; between 1/2/1990 and 12/30/2003 refers to release_date BETWEEN '1990-01-02' AND '2003-12-30'; revenue of more than 75,000,000 refers to revenue > 75000000; popularity of no less than 20 refers to popularity > = 20
CREATED SQL: SELECT COUNT(T2.movie_id) FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id WHERE T1.revenue > 75000000 AND T1.popularity >= 20 AND T1.release_date BETWEEN '1990-01-01' AND '2003-12-31'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the title of the highest-budget film to date? Please include the revenue and name the country. highest-budget film refers to max(budget); name the country refers to country_name
CREATED SQL: SELECT T1.title, T1.revenue, T3.COUNTry_name FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id ORDER BY T1.budget DESC LIMIT 1
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: List the title of movies in Latin released between 1/01/1990 and 12/31/1995. movies in Latin refers to language_name = 'Latin'; released between 1/01/1990 and 12/31/1995 refers to release_date BETWEEN '1990-01-01' AND '1995-12-31'
CREATED SQL: SELECT T1.title FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Latin' AND T1.release_date BETWEEN '1990-01-01' AND '1995-12-31'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the average revenue of American movies in 2006? American movies refers to country_name = 'United States of America'; in 2006 refers to release_date LIKE '2006%'; average revenue = AVG(revenue)
CREATED SQL: SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'United States of America' AND CAST(STRFTIME('%Y', T1.release_date) AS INT) = 2006
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Calculate the 2016 gap between the average revenue for Indian and American films. 2016 refers to release_date LIKE '2016%'; Indian and American films refers to country_name = 'India' and country_name = 'United States of America'; gap between the average revenue refers to subtract(divide(sum(revenue), count(movie_id)) when country_name = 'United States of America', divide(sum(revenue), count(movie_id)) when country_name = 'India')
CREATED SQL: SELECT AVG(CASE WHEN T3.COUNTry_name = 'United States of America' THEN T1.revenue END) - AVG(CASE WHEN T3.COUNTry_name = 'India' THEN T1.revenue END) AS CALCULATE FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE CAST(STRFTIME('%Y', T1.release_date) AS INT) = 2016
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the percentage of romance films among films produced in India in 2015? romance films refers to genre_name = 'Romance'; in India refers to country_name = 'India'; 2015 refers to release_date BETWEEN '2015-01-01' AND '2015-01-31'; percentage = divide(sum(movie_id) when genre_name = 'Romance', count(movie_id)) as percentage
CREATED SQL: SELECT CAST(COUNT(CASE WHEN T4.genre_name = 'Romance' THEN T1.movie_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_COUNTry AS T3 ON T1.movie_id = T3.movie_id INNER JOIN genre AS T4 ON T2.genre_id = T4.genre_id INNER JOIN COUNTry AS T5 ON T3.COUNTry_id = T5.COUNTry_id WHERE T5.COUNTry_name = 'India' AND T1.release_date BETWEEN '2015-01-01' AND '2015-12-31'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Which actor plays Optimus Prime? Which actor refers to person_name; Optimus Prime refers to character_name = 'Optimus Prime (voice)'
CREATED SQL: SELECT DISTINCT T1.person_name FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T2.character_name = 'Optimus Prime (voice)'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the gender of the character 'USAF Master Sgt. Epps?' character 'USAF Master Sgt. Epps' refers to character_name = 'USAF Master Sgt. Epps'
CREATED SQL: SELECT T2.gender FROM movie_cast AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.gender_id WHERE T1.character_name = 'USAF Master Sgt. Epps'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: List all companies who worked in the movie 'Ultramarines: A Warhammer 40,000 Movie.' all companies refers to company_name; movie 'Ultramarines: A Warhammer 40,000 Movie' refers to title = 'Ultramarines: A Warhammer 40,000 Movie'
CREATED SQL: SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Ultramarines: A Warhammer 40,000 Movie'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Which movie did the company 'Radiant Film GmbH' work on? Which movie refers to title; company 'Radiant Film GmbH' refers to company_name = 'Radiant Film GmbH'
CREATED SQL: SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Radiant Film GmbH'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What are the genres of Sky Captain and the World of Tomorrow? genres refers to genre_name; Sky Captain and the World of Tomorrow refers to title = 'Sky Captain and the World of Tomorrow'
CREATED SQL: SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.title = 'Sky Captain and the World of Tomorrow'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Write all the keywords belonging to the movie 'Sky Captain and the World of Tomorrow.' keywords refers to keyword_name; movie 'Sky Captain and the World of Tomorrow' refers to title = 'Sky Captain and the World of Tomorrow'
CREATED SQL: SELECT T3.keyword_name FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T1.title = 'Sky Captain and the World of Tomorrow'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: The movie 'Gojira ni-sen mireniamu' is from which country? movie 'Gojira ni-sen mireniamu' refers to title = 'Gojira ni-sen mireniamu'; which country refers to country_name
CREATED SQL: SELECT T3.COUNTry_name FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T1.title = 'Gojira ni-sen mireniamu'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Which movie has the keyword 'extremis?' Which movie refers to title; keyword 'extremis' refers to keyword_name = 'extremis'
CREATED SQL: SELECT T1.title FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T3.keyword_name = 'extremis'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: List 10 movie titles that were produced in France. France refers to country_name = 'France'
CREATED SQL: SELECT T1.title FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'France' LIMIT 10
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Who is the director for the movie 'Transformers?' the director refers to person_name where job = 'Director'; movie 'Transformers' refers to title = 'Transformers'
CREATED SQL: SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Transformers' AND T2.job = 'Director'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: List 10 crews alongside their jobs who worked on the movie 'Mad Max: Fury Road.' crews refers to person_name; movie 'Mad Max: Fury Road' refers to title = 'Mad Max: Fury Road'
CREATED SQL: SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Mad Max: Fury Road' LIMIT 10
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What percentage of movies that came from Japan belong in the 'animation' genre? from Japan refers to country_name = 'Japan'; in the 'animation' genre refers to genre_name = 'animation'; percentage = divide(sum(movie_id) when genre_name = 'animation', count(movie_id)) as percentage
CREATED SQL: SELECT CAST(COUNT(CASE WHEN T4.genre_name = 'Animation' THEN T1.movie_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_COUNTry AS T3 ON T1.movie_id = T3.movie_id INNER JOIN genre AS T4 ON T2.genre_id = T4.genre_id INNER JOIN COUNTry AS T5 ON T3.COUNTry_id = T5.COUNTry_id WHERE T5.COUNTry_name = 'Japan'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the ratio between male and female cast members of the movie 'Iron Man?' Count how many have unspecified genders. male refers to gender = 'Male'; female refers to gender = 'Female'; movie 'Iron Man' refers to title = 'Iron Man'; ratio = divide(sum(gender = 'Female'), sum(gender = 'Male'))
CREATED SQL: SELECT CAST(COUNT(CASE WHEN T3.gender = 'Male' THEN 1 ELSE NULL END) AS REAL) / COUNT(CASE WHEN T3.gender = 'Female' THEN 1 ELSE NULL END) AS RATIO , COUNT(CASE WHEN T3.gender = 'Unspecified' THEN 1 ELSE NULL END) AS UNGENDERS FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T2.gender_id = T3.gender_id WHERE T1.title = 'Iron Man'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: List down five movie titles that were released before 2000. released before 2000 refers to release_date < '2000-01-01'
CREATED SQL: SELECT title FROM movie WHERE CAST(STRFTIME('%Y', release_date) AS INT) < 2000 LIMIT 5
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the keyword ID of the movie with the title of ""Sin City""? title of ""Sin City"" refers to title = 'Sin City'
CREATED SQL: SELECT T2.keyword_id FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'Sin City'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Look for the movie title with the keyword of ""angel"". keyword of ""angel"" refers to keyword_name = 'angel'
CREATED SQL: SELECT T1.title FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T3.keyword_name = 'angel'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Which keywords belong to the movie titles with the highest popularity? Which keywords refers to keyword_name; highest popularity refers to max(popularity)
CREATED SQL: SELECT T3.keyword_name FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id ORDER BY T1.popularity DESC LIMIT 1
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Provide the genre ID of the movie with the title of ""The Dark Knight"". movie with the title of ""The Dark Knight"" refers to title = 'The Dark Knight'
CREATED SQL: SELECT T2.genre_id FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'The Dark Knight'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: List down the movie titles within the genre of thriller. genre of thriller refers to genre_name = 'Thriller'
CREATED SQL: SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Thriller'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Write down five rumoured movie titles within the genre of Drama. rumoured movie refers to movie_status = 'rumoured'; genre of Drama refers to genre_name = 'Drama'
CREATED SQL: SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.movie_status = 'Rumored' AND T3.genre_name = 'Drama' LIMIT 5
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the genre of the movie title with the lowest revenue generated? genre refers to genre_name; lowest revenue refers to min(revenue)
CREATED SQL: SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id ORDER BY T1.revenue LIMIT 1
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: State the genre of the movie title with a runtime of only 14 minutes. genre refers to genre_name; runtime of only 14 minutes refers to runtime = 14
CREATED SQL: SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.runtime = 14
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the genre of the movie title which was well-received by the audiences but made the lowest revenue? genre refers to genre_name; well-received by the audiences refers to max(vote_average); lowest revenue refers to min(revenue)
CREATED SQL: SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id ORDER BY T1.vote_average DESC, T1.revenue LIMIT 1
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Provide the genre of a movie title with a tagline of ""A long time ago in a galaxy far, far away…"". genre refers to genre_name; tagline of ""A long time ago in a galaxy far, far away…"" refers to tagline = 'A long time ago in a galaxy far, far away…'
CREATED SQL: SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T3.genre_id = T2.genre_id WHERE T1.tagline = 'A long time ago in a galaxy far, far away...'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the country ID of the movie with the title of ""Pirates of the Caribbean: Dead Man's Chest""? title of ""Pirates of the Caribbean: Dead Man's Chest"" refers to title = 'Pirates of the Caribbean: Dead Man''s Chest'
CREATED SQL: SELECT T2.COUNTry_id FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title LIKE 'Pirates of the Caribbean: Dead Man%s Chest'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: List down the movie titles that were produced in Canada. produced in Canada refers to country_name = 'Canada'
CREATED SQL: SELECT T1.title FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'Canada'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Accumulate the budget of the movie titles with the keyword of ""video game"". keyword of ""video game"" refers to keyword_name = 'video game'
CREATED SQL: SELECT SUM(T1.budget) FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T3.keyword_name = 'video game'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: For movies with the keyword of ""civil war"", calculate the average revenue generated by these movies. keyword of ""civil war"" refers to keyword_name = 'civil war'; average revenue = AVG(revenue)
CREATED SQL: SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T3.keyword_name = 'civil war'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Find out the popularity of the movies with the highest vote count. highest vote count refers to max(vote_count)
CREATED SQL: SELECT popularity FROM movie ORDER BY vote_COUNT DESC LIMIT 1
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Among the zero-budget movie titles, which one has made the highest revenue? zero-budget refers to budget = 0; highest revenue refers to max(revenue)
CREATED SQL: SELECT title FROM movie WHERE budget = 0 ORDER BY revenue DESC LIMIT 1
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the ID of the production company which produced the movie ""Gladiator""? ID of the production company refers to company_id; movie ""Gladiator"" refers to title = 'Gladiator'
CREATED SQL: SELECT T2.company_id FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'Gladiator'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: List down the IDs of the production companies that released the movies in 1916. IDs of the production companies refers to company_id; movies in 1916 refers to release_date LIKE '1916%'
CREATED SQL: SELECT T2.company_id FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id WHERE CAST(STRFTIME('%Y', T1.release_date) AS INT) = 1916
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: List down the movies produced by Lucasfilm. movies refers to title; produced by Lucasfil refers to company_name = 'Lucasfilm'
CREATED SQL: SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Lucasfilm'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Among Warner Bros. Pictures' movies, which title made the highest revenue? Warner Bros. Pictures' movies refers to company_name = 'Warner Bros. Pictures'; highest revenue refers to max(revenue)
CREATED SQL: SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Warner Bros. Pictures' ORDER BY T3.revenue DESC LIMIT 1
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Write down the release date of the movies produced by Twentieth Century Fox Film Corporation. produced by Twentieth Century Fox Film Corporation refers to company_name = 'Twentieth Century Fox Film Corporation'
CREATED SQL: SELECT T3.release_date FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Twentieth Century Fox Film Corporation'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the language ID of the movie ""Walk the Line""? movie ""Walk the Line"" refers to title = 'Walk the Line'
CREATED SQL: SELECT T2.language_id FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'Walk the Line'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Find out the language ID of the movie with the highest popularity. highest popularity refers to max(popularity)
CREATED SQL: SELECT T2.language_id FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.popularity DESC LIMIT 1
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Tell the language of the movie ""C'era una volta il West"". language refers to language_name; movie ""C'era una volta il West"" refers to title = 'C''era una volta il West'
CREATED SQL: SELECT T3.language_name FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T1.title LIKE 'C%era una volta il West'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Are there any post-production movies in Nederlands? post-production movies refers to movie_status = 'Post Production'; Nederlands refers to language_name = 'Nederlands';
CREATED SQL: SELECT DISTINCT CASE WHEN T1.movie_status = 'Post Production' THEN 'YES' ELSE 'NO' END AS YORN FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Nederlands'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: List down the tagline of the Polski movies. Polski movies refers to language_name = 'Polski'
CREATED SQL: SELECT DISTINCT T1.tagline FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Polski'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Provide the homepage of the Bahasa Indonesia movies. Bahasa Indonesia movies refers to language_name = 'Bahasa indonesia'
CREATED SQL: SELECT DISTINCT T1.homepage FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Bahasa indonesia'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Work out the difference in revenues made between the English and Latin movies. English refers to language_name = 'English'; Latin refers to language_name = 'Latin'; difference in revenues = subtract(sum(movie_id) when language_name = 'English', sum(movie_id) when language_name = 'Latin')
CREATED SQL: SELECT SUM(CASE WHEN T3.language_name = 'English' THEN T1.revenue ELSE 0 END) - SUM(CASE WHEN T3.language_name = 'Latin' THEN T1.revenue ELSE 0 END) AS DIFFERENCE FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Calculate the revenues made by Fantasy Films and Live Entertainment. made by Fantasy Films refers to company_name = 'Fantasy Films'; Live Entertainment refers to company_name = 'Live Entertainment'
CREATED SQL: SELECT SUM(T3.revenue) FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name IN ('Fantasy Films', 'Live Entertainment')
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the average revenue made by Latin movies? Latin movies refers to language_name = 'Latin'; average revenue = AVG(revenue)
CREATED SQL: SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Latin'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the most common first name? most common first name refers to max(count(person_name))
CREATED SQL: SELECT person_name FROM person GROUP BY person_name ORDER BY COUNT(person_name) DESC LIMIT 1
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the average number of crews for a movie? average number of crews = divide(count(person_id), COUNT(movie_id))
CREATED SQL: SELECT CAST(SUM(CD) AS REAL) / COUNT(movie_id) FROM ( SELECT movie_id, COUNT(person_id) AS CD FROM movie_crew GROUP BY movie_id )
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: List all the keywords with ""christmas"" in them. keywords with ""christmas"" in them refers to keyword_name LIKE '%christmas%'
CREATED SQL: SELECT keyword_name FROM keyword WHERE keyword_name LIKE '%christmas%'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the longest runtime of all movies? longest runtime refers to max(runtime)
CREATED SQL: SELECT MAX(runtime) FROM movie
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the iso code of ""Kyrgyz Republic""? iso code refers to country_iso_code; ""Kyrgyz Republic"" refers to country_name = 'Kyrgyz Republic'
CREATED SQL: SELECT COUNTry_iso_code FROM COUNTry WHERE COUNTry_name = 'Kyrgyz Republic'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Provide the overview for the movie ""The Pacifier"". movie ""The Pacifier"" refers to title = 'The Pacifier'
CREATED SQL: SELECT overview FROM movie WHERE title = 'The Pacifier'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: How many movies were produced by ""Eddie Murphy Productions""? produced by ""Eddie Murphy Productions"" refers to company_name = 'Eddie Murphy Productions'
CREATED SQL: SELECT COUNT(T1.movie_id) FROM movie_company AS T1 INNER JOIN production_company AS T2 ON T1.company_id = T2.company_id WHERE T2.company_name = 'Eddie Murphy Productions'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: List all the actors who have played characters with ""captain"" in their names. List all the actors refers to person_name; characters with ""captain"" in their names refers to character_name LIKE '%captain%';
CREATED SQL: SELECT DISTINCT T1.person_name FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T2.character_name LIKE '%captain%'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the most common keyword among all the movies released in 2006? most common keyword refers to max(count(keyword_name)); movies released in 2006 refers to release_date LIKE '%2006%'
CREATED SQL: SELECT T3.keyword_name FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T1.release_date LIKE '2006%' GROUP BY T3.keyword_name ORDER BY COUNT(T3.keyword_name) DESC LIMIT 1
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: How many movies have ""vi"" as their language code? ""vi"" as their language code refers to language_code = 'vi'
CREATED SQL: SELECT COUNT(T1.movie_id) FROM movie_languages AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_code = 'vi'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the third least common genre? least common genre refers to min(count(genre_name))
CREATED SQL: SELECT T2.genre_name FROM movie_genres AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.genre_id GROUP BY T2.genre_id ORDER BY COUNT(T1.movie_id) LIMIT 2, 1
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the original language of the movie with the tagline ""An offer you can't refuse.""? language refers to language_name; original language refers to language_role = 'Original'
CREATED SQL: SELECT T3.language_name FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id INNER JOIN language_role AS T4 ON T2.language_role_id = T4.role_id WHERE T4.language_role = 'Original' AND T1.tagline LIKE 'An offer you can%t refuse.'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Provide the average revenue of all the French movies. French movies refers to country_name = 'France'; average revenue = AVG(revenue)
CREATED SQL: SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'France'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: List all the unspecified gender characters. characters refers to character_name; gender = 'Unspecified'
CREATED SQL: SELECT T1.character_name FROM movie_cast AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.gender_id WHERE T2.gender = 'Unspecified'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What are the top 5 most popular movie directors? directors refers to job = 'Director'; most popular refers to max(popularity)
CREATED SQL: SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T2.job = 'Director' ORDER BY T1.popularity DESC LIMIT 5
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: List the film with the highest budget in each genre. highest budget refers to max(budget); each genre refers to genre_name; film also means movie; list the film refers to title of movie
CREATED SQL: SELECT T3.genre_name, MAX(T1.budget) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id GROUP BY T3.genre_name
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the title of the movie with the most keywords? most keywords refers to max(count(keyword_id))
CREATED SQL: SELECT T1.title FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id GROUP BY T1.title ORDER BY COUNT(T2.keyword_id) DESC LIMIT 1
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Which department has the most people? department refers to department_name; most people refers to max(count(department_id))
CREATED SQL: SELECT T1.department_name FROM department AS T1 INNER JOIN movie_crew AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY COUNT(T2.department_id) DESC LIMIT 1
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What percentage of films are made in the US? films' and 'movies' are synonyms; made in the US refers to country_iso_code = 'US'; percentage = divide(sum(country_id) when country_iso_code = 'US', count(country_id)) * 100 as percentage
CREATED SQL: SELECT CAST(COUNT(CASE WHEN T3.COUNTry_iso_code = 'US' THEN T1.movie_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the average ratio between female and male actors in a movie? female refers to gender = 'Female'；male refers to gender = 'Male'; average ratio = divide(divide(sum(gender_id) when gender = 'Female', sum(gender_id) when gender = 'Male'), count(movie_id)) as percentage
CREATED SQL: SELECT CAST(COUNT(CASE WHEN T2.gender = 'Female' THEN T1.person_id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.gender = 'Male' THEN T1.person_id ELSE NULL END) FROM movie_cast AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.gender_id
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: List the movies released in 1945. List the movies refers to title; released in 1945 refers to release_date LIKE '1945%'
CREATED SQL: SELECT title FROM movie WHERE CAST(STRFTIME('%Y', release_date) AS INT) = 1945
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Provide the ID and ISO code of Belgium. ID refers to country_id; ISO code refers to country_iso_code; Belgium refers to country_name = 'Belgium'
CREATED SQL: SELECT COUNTry_id, COUNTry_iso_code FROM COUNTry WHERE COUNTry_name = 'Belgium'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: List the character names played by Catherine Deneuve.
CREATED SQL: SELECT T2.character_name FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Catherine Deneuve'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: List the movies in the Somali language. List the movies refers to title; Somali language refers to language_name = 'Somali'
CREATED SQL: SELECT T1.title FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Somali'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Provide the release date and language of the most popular movie. language refers to langauge_name; most popular movie refers to max(popularity)
CREATED SQL: SELECT T1.release_date, T3.language_name FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id ORDER BY T1.popularity DESC LIMIT 1
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the original language of the ""Four Rooms"" movie? language refers to language_name; original language refers to language_role = 'Original'; ""Four Rooms"" refers to title = 'Four Rooms'
CREATED SQL: SELECT T3.language_name FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id INNER JOIN language_role AS T4 ON T2.language_role_id = T4.role_id WHERE T4.language_role = 'Original' AND T1.title = 'Four Rooms'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: List the character names in the ""Open Water"" movie. ""Open Water"" movie refers to title = 'Open Water'
CREATED SQL: SELECT T2.character_name FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'Open Water'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Who is the main actor in the ""Pirates of the Caribbean: At World's End"" movie? main actor refers to person_name where Min(cast_order); ""Pirates of the Caribbean: At World's End"" refers to title = 'Pirates of the Caribbean: At World''s End'
CREATED SQL: SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' ORDER BY T2.cast_order LIMIT 1
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: List the names of camera supervisors in the crew. names refers to person_name; camera supervisors refers to job = 'Camera Supervisor';
CREATED SQL: SELECT T1.person_name FROM person AS T1 INNER JOIN movie_crew AS T2 ON T1.person_id = T2.person_id WHERE T2.job = 'Camera Supervisor'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: List the job titles of Sally Menke in the crew. job titles refers to job
CREATED SQL: SELECT DISTINCT T2.job FROM person AS T1 INNER JOIN movie_crew AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Sally Menke'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Provide the names and departments of the person who worked as a music editor in the ""Pirates of the Caribbean: At World's End"" movie. names refers to person_name; departments refers to department_name; worked as a music editor refers to job = 'Music Editor'; ""Pirates of the Caribbean: At World's End"" refers to title = 'Pirates of the Caribbean: At World''s End'
CREATED SQL: SELECT T3.person_name, T4.department_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id INNER JOIN department AS T4 ON T2.department_id = T4.department_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T2.job = 'Music Editor'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Provide the titles and revenues of the movies produced by the DreamWorks company. produced by the DreamWorks company refers to company_name = 'DreamWorks'
CREATED SQL: SELECT T1.title, T1.revenue FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T2.company_id = T3.company_id WHERE T3.company_name = 'DreamWorks'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: How many movies were produced in Canada? produced in Canada refers to country_name = 'Canada'
CREATED SQL: SELECT COUNT(T2.movie_id) FROM COUNTry AS T1 INNER JOIN production_COUNTry AS T2 ON T1.COUNTry_id = T2.COUNTry_id WHERE T1.COUNTry_name = 'Canada'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: List the genres of Forrest Gump movie. genres refers to genre_name; Forrest Gump movie refers to title = 'Forrest Gump'
CREATED SQL: SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.title = 'Forrest Gump'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Provide the production companies of the movie that has over 35% average running time per movie in 2016. production companies refers to company_name; in 2016 refers to release_date LIKE '2016%'; over 35% average running time per movie refers to divide(subtract(runtime, AVG(runtime)), AVG(runtime)) * 100 as percentage > 35
CREATED SQL: SELECT T.company_name FROM ( SELECT DISTINCT T3.company_name, T1.runtime FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T3.company_id = T2.company_id WHERE T1.release_date LIKE '2016%' ) T WHERE T.runtime * 100 > (0.35 * ( SELECT AVG(T1.runtime) FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T3.company_id = T2.company_id WHERE T1.release_date LIKE '2016%' ) + ( SELECT AVG(T1.runtime) FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T3.company_id = T2.company_id WHERE T1.release_date LIKE '2016%' )) * 100
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Find the difference in percentage of the movies under keywords of ""woman director"" and ""independent film"". under keywords of ""woman director"" and ""independent film"" refers to keyword_name = 'woman director' and keyword_name = 'independent film'; difference in percentage = divide(subtract(count(movie_id) when keyword_name = 'woman director', count(movie_id) when keyword_name = 'independent film'), count(movie_id)) as percentage
CREATED SQL: SELECT CAST((SUM(CASE WHEN T1.keyword_name = 'woman director' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.keyword_name = 'independent film' THEN 1 ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T1.keyword_name = 'independent film' THEN 1 ELSE 0 END) FROM keyword AS T1 INNER JOIN movie_keywords AS T2 ON T1.keyword_id = T2.keyword_id
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Which genre does the movie Dancer in the Dark belong to? genre refers to genre_name; movie Dancer in the Dark refers to title = 'Dancer in the Dark'
CREATED SQL: SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.title = 'Dancer in the Dark'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: How many adventure movies are there that were released in 2000? adventure movies refers to genre_name = 'Adventure'; released in 2000 refers to release_date LIKE '2000%'
CREATED SQL: SELECT COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Adventure' AND CAST(STRFTIME('%Y', T1.release_date) AS INT) = 2000
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Which movies did the company Paramount Pictures produce in 2000? Which movies refers to title; company Paramount Pictures refers to company_name = 'Paramount Pictures'; in 2000 refers to release_date LIKE '2000%'
CREATED SQL: SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Paramount Pictures' AND CAST(STRFTIME('%Y', T3.release_date) AS INT) = 2000
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What keyword can the user use to search for the movie Finding Nemo? What keyword refers to keyword_name; Finding Nemo refers to title = 'Finding Nemo'
CREATED SQL: SELECT T3.keyword_name FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T1.title = 'Finding Nemo'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Name the horror movies with positive ratings greater than 7. Name the horror movies refers to title where genre_name = 'horror'; positive ratings greater than 7 refers to vote_average > 7
CREATED SQL: SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Horror' AND T1.vote_average > 7
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: How many production companies made more than 150 movies? more than 150 movies refers to COUNT(company_name) > 150
CREATED SQL: SELECT COUNT(*) FROM ( SELECT T1.company_name AS CNAME FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id HAVING COUNT(T1.company_name) > 150 )
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the role of Mark Hammel? role refers to job
CREATED SQL: SELECT T2.job FROM person AS T1 INNER JOIN movie_crew AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Mark Hammel'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: How many main actors are there in the movie Pirates of the Caribbean: At World's End? main actors refers to gender = 'male' and min(cast_order); Pirates of the Caribbean: At World's End refers to title = 'Pirates of the Caribbean: At World''s End'
CREATED SQL: SELECT COUNT(T2.cast_order) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T3.gender_id = T2.gender_id WHERE T3.gender = 'Male' OR T3.gender = 'Female' AND T1.title = 'Pirates of the Caribbean: At World''s End' AND T2.cast_order = ( SELECT MIN(T2.cast_order) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T3.gender_id = T2.gender_id WHERE T3.gender = 'Male' OR T3.gender = 'Female' AND T1.title = 'Pirates of the Caribbean: At World''s End' )
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Which movies have the participation of actor Harrison Ford? Which movies refers to title; actor refers to person_name
CREATED SQL: SELECT T1.title FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Harrison Ford'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Which character did Orlando Bloom play in the movie Pirates of the Caribbean: The Curse of the Black Pearl? Which character refers to character_name; movie Pirates of the Caribbean: The Curse of the Black Pearl refers to title = 'Pirates of the Caribbean: The Curse of the Black Pearl'
CREATED SQL: SELECT T2.character_name FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Pirates of the Caribbean: The Curse of the Black Pearl' AND T3.person_name = 'Orlando Bloom'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: What is the average number of horror movies among all movies genre? horror movies refers to genre_name = 'horror'; average number = divide(sum(movie_id) when genre_name = 'horror', count(movie_id))
CREATED SQL: SELECT CAST(COUNT(CASE WHEN T3.genre_name = 'Horror' THEN T1.movie_id ELSE NULL END) AS REAL) / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: List the names of all the producers in the movie ""Pirates of the Caribbean: At World's End"". List the names refers to person_name; producers refers to job = 'Producer'; ""Pirates of the Caribbean: At World's End"" refers to title = 'Pirates of the Caribbean: The Curse of the Black Pearl'
CREATED SQL: SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Pirates of the Caribbean: The Curse of the Black Pearl' AND T2.job = 'Producer'
END OF QUESTION"
movies_4,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
country_id integer,
country_iso_code text,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE department (
department_id integer,
department_name text,
PRIMARY KEY (department_id),
);
CREATE TABLE gender (
gender_id integer,
gender text,
PRIMARY KEY (gender_id),
);
CREATE TABLE genre (
genre_id integer,
genre_name text,
PRIMARY KEY (genre_id),
);
CREATE TABLE keyword (
keyword_id integer,
keyword_name text,
PRIMARY KEY (keyword_id),
);
CREATE TABLE language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE language_role (
role_id integer,
language_role text,
PRIMARY KEY (role_id),
);
CREATE TABLE movie (
movie_id integer,
title text,
budget integer,
homepage text,
overview text,
popularity real,
release_date date,
revenue integer,
runtime integer,
movie_status text,
tagline text,
vote_average real,
vote_count integer,
PRIMARY KEY (movie_id),
);
CREATE TABLE movie_genres (
movie_id integer,
genre_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
);
CREATE TABLE movie_languages (
movie_id integer,
language_id integer,
language_role_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (language_id) REFERENCES language(language_id),
FOREIGN KEY (language_role_id) REFERENCES language_role(role_id),
);
CREATE TABLE person (
person_id integer,
person_name text,
PRIMARY KEY (person_id),
);
CREATE TABLE movie_crew (
movie_id integer,
person_id integer,
department_id integer,
job text,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (department_id) REFERENCES department(department_id),
);
CREATE TABLE production_company (
company_id integer,
company_name text,
PRIMARY KEY (company_id),
);
CREATE TABLE production_country (
movie_id integer,
country_id integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE movie_cast (
movie_id integer,
person_id integer,
character_name text,
gender_id integer,
cast_order integer,
FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
FOREIGN KEY (person_id) REFERENCES person(person_id),
FOREIGN KEY (gender_id) REFERENCES gender(gender_id),
);
CREATE TABLE movie_keywords (
movie_id integer,
keyword_id integer,
);
CREATE TABLE movie_company (
movie_id integer,
company_id integer,
);
---------------------
QUESTION: Calculate the average income made by movies using the keyword ""paris"". List the title of the movies. income refers to revenue; keyword ""paris"" refers to keyword_name = 'paris'; average income = AVG(revenue)
CREATED SQL: SELECT AVG(T1.revenue), T1.title FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T3.keyword_name = 'paris'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: How many English language codes whose comments for the method are in the XML format? English language refers to Lang = 'en'; the comments for this method is XML format refers to CommentIsXml = 1;
CREATED SQL: SELECT COUNT(Lang) FROM Method WHERE Lang = 'en' AND CommentIsXml = 1
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the task of the method whose tokenized name is ""online median filter test median window filling""? tokenized name refers to NameTokenized; task of the method refers to the second part of name deliminated by "".""; for example, the task of 'LinqToDelicious.HttpWebRequestFactory.Create' is 'HttpWebRequestFactory'
CREATED SQL: SELECT SUBSTR(SUBSTR(Name, INSTR(Name, '.') + 1), 1, INSTR(SUBSTR(Name, INSTR(Name, '.') + 1), '.') - 1) task FROM Method WHERE NameTokenized = 'online median filter test median window filling'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the time of sampling of the solution with the highest sampling time? Indicate the id number of the solution. highest sampling time refers to max(SampledAt); id number of the solution refers to SolutionId;
CREATED SQL: SELECT DISTINCT SampledAt, SolutionId FROM Method WHERE SampledAt = ( SELECT MAX(SampledAt) FROM Method )
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: How many followers do the most followed repository on Github have? Give the github address of the repository. more forks refers to more people follow this repository; most followed repository refers to max(Forks);  the github address of the repository refers to Url;
CREATED SQL: SELECT Forks, Url FROM Repo WHERE Forks = ( SELECT MAX(Forks) FROM Repo )
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the id of the repository with the highest number of solution path? highest number of solution path refers to max(count(Path)); id of the repository refers to RepoId
CREATED SQL: SELECT RepoId FROM solution GROUP BY RepoId ORDER BY COUNT(Path) DESC LIMIT 1
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the most liked repository? Indicate its github address and the amount of stars it has received. more stars mean more people like this repository; most liked refers to max(Stars); the github address of repository refers to Url;
CREATED SQL: SELECT Url, Stars FROM Repo WHERE Stars = ( SELECT MAX(Stars) FROM Repo )
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the name of the solution path with the highest processed time? highest processed time refers to max(ProcessedTime);
CREATED SQL: SELECT Path FROM Solution WHERE ProcessedTime = ( SELECT MAX(ProcessedTime) FROM Solution )
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: How much is the processed time of downloading the most popular repository? more watchers mean that this repository is more popular;
CREATED SQL: SELECT ProcessedTime FROM Repo WHERE Watchers = ( SELECT MAX(Watchers) FROM Repo )
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the github address of the ""nofear_Mara\Mara.sln"" solution path? github address of repository refers to Url;
CREATED SQL: SELECT Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE Path = 'nofear_MaraMara.sln'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Which repository has the longest amount of processed time of downloading? Indicate whether the solution paths in the repository can be implemented without needs of compilation. longest amount of processed time refers to max(ProcessedTime); the repository can be implemented without needs of compilation refers to WasCompiled = 1;
CREATED SQL: SELECT DISTINCT T1.id, T2.WasCompiled FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.ProcessedTime = ( SELECT MAX(ProcessedTime) FROM Repo )
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the tokenized name of the solution whose path is ""maravillas_linq-to-delicious\tasty.sln""? tokenized name refers to NameTokenized
CREATED SQL: SELECT DISTINCT T2.NameTokenized FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'maravillas_linq-to-delicious'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Among the repositories whose number of stars received are between 6,000 to 9,000, which repository has the highest number of solution paths and many of those solution paths needs to be compiled if user wants to implement it? Stars between 6,000 to 9,000; highest number of solution paths refers to max(count(Path)); needs to be compiled if user wants to implement it refers to WasCompiled = 0;
CREATED SQL: SELECT T2.RepoId, COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars BETWEEN 6000 AND 9000 AND T2.WasCompiled = 0 GROUP BY T2.RepoId ORDER BY COUNT(T2.RepoId) DESC LIMIT 1
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: In the ""https://github.com/wallerdev/htmlsharp.git"", give all the linearized sequenced of API calls. linearized sequenced of API calls refers to ApiCalls; 'https://github.com/wallerdev/htmlsharp.git' is url of repository
CREATED SQL: SELECT T3.ApiCalls FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId INNER JOIN Method AS T3 ON T2.Id = T3.SolutionId WHERE T1.Url = 'https://github.com/wallerdev/htmlsharp.git'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: How many solution paths are there inside the 2nd most popular repository? more watchers mean that this repository is more popular; most popular repository refers to max(Watchers);
CREATED SQL: SELECT COUNT(DISTINCT T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Watchers = ( SELECT Watchers FROM Repo ORDER BY Watchers DESC LIMIT 1, 1 )
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the average processed time of the solution paths inside the ""https://github.com/zphingphong/DiscardCustomerApp.git""? average processed time = avg(Solution.ProcessedTime);
CREATED SQL: SELECT CAST(SUM(T2.ProcessedTime) AS REAL) / COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/zphingphong/DiscardCustomerApp.git'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the full comment on the method whose solution path is ""bmatzelle_nini\Source\Nini.sln"" with a tokenized name of ""alias text add alias""?
CREATED SQL: SELECT T2.FullComment FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'bmatzelle_niniSourceNini.sln' AND T2.NameTokenized = 'alias text add alias'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the linearized sequenced of API calls of the method whose solution path is ""mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln""? linearized sequenced of API calls refers to ApiCalls;
CREATED SQL: SELECT T2.ApiCalls FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'mauriciodeamorim_tdd.encontro2Tdd.Encontro2.sln'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: How many solution paths that needs to be compiled if user wants to implement it in ""https://github.com/jeffdik/tachy.git""? needs to be compiled if user wants to implement refers to WasCompiled = 0; https://github.com/jeffdik/tachy.git is url of repository
CREATED SQL: SELECT COUNT(T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/jeffdik/tachy.git' AND T2.WasCompiled = 0
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: How much is the processed time of the method whose tokenized name is ""about box1 dispose""? Indicate the language of the method. language refers to Lang;
CREATED SQL: SELECT DISTINCT T1.ProcessedTime, T2.Lang FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 'about box1 dispose'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: In ""maxild_playground\Playground.sln"", what is the time of sampling for the method ""GitHubRepo.Cli.GitHubClientWrapper.GetReleases""? the time of sampling refers to SampledAt; 'maxild_playground\Playground.sln' is the path of a solution
CREATED SQL: SELECT T2.SampledAt FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'maxild_playgroundPlayground.sln' AND T2.Name = 'GitHubRepo.Cli.GitHubClientWrapper.GetReleases'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the language of the method used in the solution path ""opendns_diagnosticapp\windows\OpenDnsDiagnostic.sln""? language refers to Lang;
CREATED SQL: SELECT T2.Lang FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'opendns_diagnosticappwindowsOpenDnsDiagnostic.sln'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What's the task of the method whose tokenized name is ""html parser feed""? tokenized name refers to NameTokenized; task of the method refers to the second part of name deliminated by "".""; for example, the task of 'LinqToDelicious.HttpWebRequestFactory.Create' is 'HttpWebRequestFactory'
CREATED SQL: SELECT SUBSTR(SUBSTR(Name, INSTR(Name, '.') + 1), 1, INSTR(SUBSTR(Name, INSTR(Name, '.') + 1), '.') - 1) task FROM Method WHERE NameTokenized = 'html parser feed'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Are the comments for the method ""HtmlSharp.HtmlParser.Feed"" in XML format? the comment for this method is not XML refers to CommentsXML = 0; the comments for this method is XML refers to CommentsXML = 1
CREATED SQL: SELECT CASE WHEN CommentIsXml = 0 THEN 'No' WHEN CommentIsXml = 1 THEN 'Yes' END isXMLFormat FROM Method WHERE Name = 'HtmlSharp.HtmlParser.Feed'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Which method has the summary ""Write a command to the log""?
CREATED SQL: SELECT Name FROM Method WHERE Summary = 'Write a command to the log'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: How many solutions contain files found within the repository most people like? more stars mean more people like this repository; most people like refers to max(Stars);
CREATED SQL: SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = ( SELECT MAX(Stars) FROM Repo )
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Please list the path of the solution that contains files found within the repository most people like. more stars mean more people like this repository; most people like refers to max(Stars);
CREATED SQL: SELECT DISTINCT T2.Path FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = ( SELECT MAX(Stars) FROM Repo )
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the github address of the repository that contains files used by solution ID12? github address refers to Url;
CREATED SQL: SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 12
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Among the solutions that contain files within the repository followed by over 1000 people, how many of them can be
implemented without needs of compilation? followed by over 1000 people refers to Forks >1000; can be
implemented without needs of compilation refers to WasCompiled = 1;
CREATED SQL: SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks > 1000 AND T2.WasCompiled = 1
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Which solution contains files within a more popular repository, the solution ID18 or solution ID19? more watchers mean that this repository is more popular;
CREATED SQL: SELECT CASE WHEN SUM(CASE WHEN T2.Id = 18 THEN T1.Watchers ELSE 0 END) > SUM(CASE WHEN T2.Id = 19 THEN T1.Watchers ELSE 0 END) THEN 'SolutionID18' WHEN SUM(CASE WHEN T2.Id = 18 THEN T1.Watchers ELSE 0 END) < SUM(CASE WHEN T2.Id = 19 THEN T1.Watchers ELSE 0 END) THEN 'SolutionID19' END isMorePopular FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Among the solutions that contain files within the repository needing the longest processed time to download, how many of them doesn't need to be
compiled if user wants to implement it? longest processed time refers to max(Solution.ProcessedTime); needs to be compiled if user wants to implement it refers to WasCompiled = 0；
CREATED SQL: SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.ProcessedTime = ( SELECT MAX(ProcessedTime) FROM Repo ) AND T2.WasCompiled = 1
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the processed time to download the repository whose files are contained in the solution with the path ""jeffdik_tachy\src\Tachy.sln"".
CREATED SQL: SELECT DISTINCT T2.ProcessedTime FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Path = 'jeffdik_tachysrcTachy.sln'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Please give the url of the repository whose files are contained in solution ID 9?
CREATED SQL: SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 9
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Please list all the paths of the solutions containing files within the repository whose url is ""https://github.com/maxild/playground.git"".
CREATED SQL: SELECT T2.Path FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/maxild/playground.git'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Among the repositories with over 200 likes, how many of them have files contained by solutions with a processed time of under 636439500080712000? over 200 likes refers to Stars > 200; ProcessedTime<636439500080712000;
CREATED SQL: SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.ProcessedTime < 636439500080712000 AND T1.Stars > 200
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Please list the IDs of the solutions that contain files within the top 3 followed repositories. more forks refers to more people follow this repository;
CREATED SQL: SELECT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId ORDER BY T1.Forks DESC LIMIT 3
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the average time needed for the solutions containing files within the repository whose url is ""https://github.com/jeffdik/tachy.git"" to be processd? average time = avg(ProcessedTime)；
CREATED SQL: SELECT CAST(SUM(T2.ProcessedTime) AS REAL) / COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/jeffdik/tachy.git'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: How many more followers in percentage are there for the repository used by solution ID 18 than solution ID19? followers refers to Forks; percentage = divide(SUBTRACT(Forks(Solution.ID = 18), Forks(Solution.ID = 19)), Forks(Solution.ID = 19))*100%
CREATED SQL: SELECT CAST((SUM(CASE WHEN T2.Id = 18 THEN T1.Forks ELSE 0 END) - SUM(CASE WHEN T2.Id = 19 THEN T1.Forks ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 19 THEN T1.Forks ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the language of the method ''PixieTests.SqlConnectionLayerTests.TestSqlCreateGuidColumn""? language refers to Lang；
CREATED SQL: SELECT Lang FROM Method WHERE Name = 'PixieTests.SqlConnectionLayerTests.TestSqlCreateGuidColumn'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Show the full Comment of the method ""DE2_UE_Fahrradkurier.de2_uebung_fahrradkurierDataSet1TableAdapters.TableAdapterManager.UpdateInsertedRows"".
CREATED SQL: SELECT FullComment FROM Method WHERE Name = 'DE2_UE_Fahrradkurier.de2_uebung_fahrradkurierDataSet1TableAdapters.TableAdapterManager.UpdateInsertedRows'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: List the summary of the method ""Castle.MonoRail.Framework.Test.StubViewComponentContext.RenderSection"".
CREATED SQL: SELECT DISTINCT Summary FROM Method WHERE Name = 'Castle.MonoRail.Framework.Test.StubViewComponentContext.RenderSection'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Give the tokenized name for the method ""Supay.Irc.Messages.KnockMessage.GetTokens"".
CREATED SQL: SELECT NameTokenized FROM Method WHERE Name = 'Supay.Irc.Messages.KnockMessage.GetTokens'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: How many stars does the repository of the solution No. 45997 have? repository of solution no. refers to Id
CREATED SQL: SELECT T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 45997
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: For the repository which got '8094' Stars, how many solutions does it contain? repository refers to Repo.Id;
CREATED SQL: SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 8094
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the solution path for the method ""IQ.Data.DbQueryProvider.CanBeEvaluatedLocally""? solution path refers to Path; method refers to Name; Name = 'IQ.Data.DbQueryProvider.CanBeEvaluatedLocally'
CREATED SQL: SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'IQ.Data.DbQueryProvider.CanBeEvaluatedLocally'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: For the method which got the tokenized name as 'interp parser expr', what is the processed time for its solution? tokenized name refers to NameTokenized; NameTokenized = 'interp parser expr'; processed time for its solution refers to ProcessedTime;
CREATED SQL: SELECT T1.ProcessedTime FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 'interp parser expr'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the repository number for the solution of method ""SCore.Poisson.ngtIndex""? repository number refers to RepoId; method refers to Name; Name = ‘SCore.Poisson.ngtIndex’
CREATED SQL: SELECT T1.RepoId FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'SCore.Poisson.ngtIndex'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Tell the path of the solution for the method ""ExportToRTF.RTFStyleSheet.H6Write"". path of the solution refers to Path; method refers to Name; Name = 'ExportToRTF.RTFStyleSheet.H6Write';
CREATED SQL: SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'ExportToRTF.RTFStyleSheet.H6Write'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: For the repository with '8094' watchers , how many solutions does it contain? repository refers to Repo.Id and RepoId; solutions a repository contains refers to Solution.Id;
CREATED SQL: SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Watchers = 8094
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Give the repository Url of the one with most solutions. repository URL refers to Url; repository Url with most solutions refers to MAX(COUNT(Solution.Id));
CREATED SQL: SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId GROUP BY T2.RepoId ORDER BY COUNT(T2.RepoId) DESC LIMIT 1
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: How many solutions does the repository which has 1445 Forks contain? solutions refers to Solution.Id; repository refers to Repository.Id;
CREATED SQL: SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks = 1445
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Among all the solution of the 'zh-cn' methods, which path is most often used? solution refers to SolutionId; zh-cn refers to Lang = 'zh-cn'; path that is most often used refers to MAX(COUNT(Path));
CREATED SQL: SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'zh-cn' GROUP BY T1.Path ORDER BY COUNT(T1.Path) DESC LIMIT 1
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Give the number of watchers that the repository of the solution No. 338082 have. number of watchers refers to Watchers; solution number refers to Solution.Id;
CREATED SQL: SELECT T1.Watchers FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 338082
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: For the repository which got '189' Stars, how many solutions which needs to be compiled does it contain? repository refers to Repository.Id; solution needs to be compiled refers to WasCompiled = 0;
CREATED SQL: SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 189 AND T2.WasCompiled = 0
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Show the solution path for the method ""Mosa.Platform.x86.Instructions.IMul.EmitLegacy""? solution path refers to Path; method refers to Name; Name = 'Mosa.Platform.x86.Instructions.IMul.EmitLegacy';
CREATED SQL: SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'Mosa.Platform.x86.Instructions.IMul.EmitLegacy'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: For the method which got the tokenized name as 't jadwal entity get single mpic', what is the path time for its solution? tokenized name refers to NameTokenized; NameTokenized = 't jadwal entity get single mpic'; path time for its solution refers to ProcessedTime;
CREATED SQL: SELECT DISTINCT T1.ProcessedTime FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 't jadwal entity get single mpic'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Give the repository ID for the solution of method ""Kalibrasi.Data.EntityClasses.THistoryJadwalEntity.GetSingleTjadwal"". repository ID refers to RepoID; method refers to Name; Name = 'Kalibrasi.Data.EntityClasses.THistoryJadwalEntity.GetSingleTjadwal';
CREATED SQL: SELECT DISTINCT T1.RepoId FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'Kalibrasi.Data.EntityClasses.THistoryJadwalEntity.GetSingleTjadwal'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: For the method has the summary of ""Refetches the Entity from the persistent storage. Refetch is used to re-load an Entity which is marked ""Out-of-sync"", due to a save action. Refetching an empty Entity has no effect."", what is its solution path? solution path refers to Path;
CREATED SQL: SELECT DISTINCT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Summary = 'Refetches the Entity FROM the persistent storage. Refetch is used to re-load an Entity which is marked ""Out-of-sync"", due to a save action. Refetching an empty Entity has no effect.'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Give the number of solutions that the repository which has 3060 Stars contains. solutions refers to Solution.Id; repository refers to Repository.Id;
CREATED SQL: SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 3060
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: For the solution of the most 'sw' methods, what is its path? solution refers to SolutionId; sw refers to Lang = 'sw'; solution with the most 'sw' methods refers to MAX(COUNT(Lang = 'sw'));
CREATED SQL: SELECT DISTINCT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'sw'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: How many percent more of the watchers for the repository of solution No.83855 than No.1502? solution No. refers to Solution.Id; percentage = DIVIDE(MULTIPLY(SUBTRACT(SUM(Solution.Id = 83855), SUM(Solution.Id = 1502)), 100)), SUM(Soltution.Id = 1502);
CREATED SQL: SELECT CAST(SUM(CASE WHEN T2.Id = 83855 THEN T1.Watchers ELSE 0 END) - SUM(CASE WHEN T2.Id = 1502 THEN T1.Watchers ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 1502 THEN T1.Watchers ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: How many percent more of the stars for the repository of solution No.51424 than No.167053? solution No. refers to Solution.Id; percentage = DIVIDE(MULTIPLY(SUBTRACT(SUM(Solution.Id = 51424), SUM(Solution.Id = 167053)), 100)), SUM(Solution.Id = 167053);
CREATED SQL: SELECT CAST(SUM(CASE WHEN T2.Id = 51424 THEN T1.Stars ELSE 0 END) - SUM(CASE WHEN T2.Id = 167053 THEN T1.Stars ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 167053 THEN T1.Stars ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: How many percent more of the Forks for the repository of solution No.53546 than No.1502? solution No. refers to Solution.Id; percentage = DIVIDE(MULTIPLY(SUBTRACT(SUM(Solution.Id = 53546), SUM(Solution.Id = 1502)), 100)), SUM(Solution.Id = 1502);
CREATED SQL: SELECT CAST(SUM(CASE WHEN T2.Id = 53546 THEN T1.Forks ELSE 0 END) - SUM(CASE WHEN T2.Id = 1502 THEN T1.Forks ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 1502 THEN T1.Forks ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: List all the methods with a solution with a ""636449700980488000"" processed time. methods refers to Name; solution refers to SolutionId;
CREATED SQL: SELECT DISTINCT T2.Name FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.ProcessedTime = 636449700980488000
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: How many solutions are in ""https://github.com/derickbailey/presentations-and-training.git""? solutions refers to Solution.Id; https://github.com/derickbailey/presentations-and-training.git refers to Url; Url; = 'https://github.com/derickbailey/presentations-and-training.git';
CREATED SQL: SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/derickbailey/presentations-and-training.git'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the total processed time of all solutions from the repository with the most forks? total processed time = AVG(ProcessedTime where MAX(COUNT(Forks))); repository with the most forks refers to MAX(COUNT(Forks));
CREATED SQL: SELECT SUM(T2.ProcessedTime) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks = ( SELECT MAX(Forks) FROM Repo )
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: List all the path of solution from all the ""it"" lang code method. path of the solution refers to Path; solution refers to Solution.Id;
CREATED SQL: SELECT DISTINCT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'it'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the path of solution of ""spinachLexer.mT__55"" method? path of the solution refers to Path; solution refers to Solution.Id; method refers to Name; Name = 'spinachLexer.mT__55';
CREATED SQL: SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'spinachLexer.mT__55'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What are the ""en"" methods with solutions from repository ""1093"" en methods refers to lang = 'en'; solution refers to Solution.Id; repository refers to RepoId; RepoId = 1093;
CREATED SQL: SELECT DISTINCT T2.id FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.RepoId = 1093 AND T2.Lang = 'en'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What are the paths of solutions in repository ""https://github.com/ecoffey/Bebop.git"" path of solutions refers to Path; https://github.com/ecoffey/Bebop.git refers to Url; Url = 'https://github.com/ecoffey/Bebop.git';
CREATED SQL: SELECT DISTINCT T2.Path FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/ecoffey/Bebop.git'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: List all the ids of repositories for solutions with ""ro"" methods. ids of repositories refers to RepoId; ro refers to lang = 'ro';
CREATED SQL: SELECT DISTINCT T1.RepoId FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'ro'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the repository id of the method with tokenized name ""crc parameters get hash code""? repository id refers to RepoId; tokenized name refers to NameTokenized; NameTokenized = 'crc parameters get hash code';
CREATED SQL: SELECT T1.RepoId FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 'crc parameters get hash code'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: How many methods with solutions with path 'maravillas_linq-to-delicious\tasty.sln'? solution refers to SolutionId;
CREATED SQL: SELECT COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'maravillas_linq-to-delicious\tasty.sln'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: List all the solutions ids of the repository with ""636430969128176000"" processed time solution ids refers to Solution.Id;
CREATED SQL: SELECT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.ProcessedTime = 636430969128176000
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the url for repository that has the longest processed time solution? Url for repository refers to Url; longest processed toe trefers to MAX(ProcessedTime);
CREATED SQL: SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.ProcessedTime = ( SELECT MAX(ProcessedTime) FROM Solution )
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: List all the solutions of repositories with the Forks higher than half of the watchers. solutions refers to Solution.Id; forks higher than half of the watchers refers tto Forks>(Watchers/2);;
CREATED SQL: SELECT DISTINCT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks > T1.Watchers / 2
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the percentage of Forks to Stars of repository for solution ""104086""? solution refers to Solution.Id; Solution.Id = 104086; percentage = MULTIPLY(DIVIDE(Forkk, Stars), 100);
CREATED SQL: SELECT CAST(T1.Forks AS REAL) * 100 / T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 104086
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Please provide the id of the respository that the most people like. repository that the most people like refers to MAX(Stars);
CREATED SQL: SELECT Id FROM Repo WHERE Stars = ( SELECT MAX(Stars) FROM Repo )
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the solution's path of method ""HtmlSharp.HtmlParser.Feed""? solution's path refers to Path; method refers to Name; Name = 'HtmlSharp.HtmlParser.Feed';
CREATED SQL: SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'HtmlSharp.HtmlParser.Feed'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Please provide the number of forks that the repository of the solution 35 have. solution refers to Solution.Id; Solution.Id = 35;
CREATED SQL: SELECT T1.Forks FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 35
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Please provide the id of the solution whose repository has the most watchers. id of the solution refers to Solution.Id; repository has the most watchers refers to MAX(Watchers);
CREATED SQL: SELECT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Watchers = ( SELECT MAX(Watchers) FROM Repo )
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Please provide the number of stars that the repository of the solution 20 have. solution refers to Solution.ID; Solution.Id = 20;
CREATED SQL: SELECT T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 20
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: How many methods does solution 1 have? And please tell me if solution 1 needs to be compiled. method refers to Name; solution refers to Solution.Id; Solution.Id = 1; solution needs to be compiled refers to WasCompiled = 0;
CREATED SQL: SELECT COUNT(T2.SolutionId) , CASE WHEN T1.WasCompiled = 0 THEN 'Needs' ELSE 'NoNeeds' END needToCompile FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.SolutionId = 1
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the percentage of the methods' solutions that need to be compiled among the methods whose comments is XML format? comment is XML format refers to CommentIsXml = 1; solution needs to be compiled refesr to WasCompiled = 0; percentage = MULTIPLY(DIVIDE(SUM(WasCompiled = 0), COUNT(Solution.Id)), 100);
CREATED SQL: SELECT CAST(SUM(CASE WHEN T1.WasCompiled = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.CommentIsXml = 1
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Please list the names of methods with the solution path ""wallerdev_htmlsharp\HtmlSharp.sln"". name of the methods refers to Name; solution path refers to Path; Path = 'wallerdev_htmlsharp\HtmlSharp.sln';
CREATED SQL: SELECT T2.Name FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'wallerdev_htmlsharpHtmlSharp.sln'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the percentage of respositories that receive more than 2,000 stars? stars>2000; percentage = DIVIDE(MULTIPLY(COUNT(Stars>2000), 100), COUNT(Id));
CREATED SQL: SELECT CAST(SUM(CASE WHEN Stars > 2000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Stars) FROM Repo
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the url of solution 1? solution refers to Solution.Id; Solution.Id = 1;
CREATED SQL: SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 1
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Please provide the id of the respository that received the most forks among the respositories that receive 21 stars. repository that received the most forks refers to MAX(Forks);
CREATED SQL: SELECT Id FROM Repo WHERE Stars = 21 AND Forks = ( SELECT MAX(Forks) FROM Repo WHERE Stars = 21 )
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What the percentage of the english methods among the methods whose comments is XML format? english methods refers to lang = 'en'; comment is XML format refers to CommentIsXml = 1;
CREATED SQL: SELECT CAST(SUM(CASE WHEN Lang = 'en' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Name) FROM Method WHERE CommentIsXml = 1
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Please provide the path of solution of method whose tokenized name is html parser feed. path of solution refers to Path; method refers to Name; tokenized name refers to NameTokenized; Name = ''html parser feed';
CREATED SQL: SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 'html parser feed'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Please provide the solution id of the respository among the respository that receive 238 forks. solution id of the repository refers to solution.Id;
CREATED SQL: SELECT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks = 238
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Among the english methods,please list the tokenized names of methods whose solutions need to be compiled. english methods refers to lang = 'en'; tokenized name refers to NameTokenized; methods refers to Name; solution needs to be compiled refers to WasCompiled = 0;
CREATED SQL: SELECT NameTokenized FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE Lang = 'en' AND WasCompiled = 0
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: How many solutions whose repository's stars are a third more than forks? solutions refers to Solution.Id; repository stars are a third more than forks = (MULTIPLY(Stars, 1/3))>Forks;
CREATED SQL: SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks < T1.Stars * 1 / 3
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Please provide the path of solution of method whose full comment is Feeds data into the parser. path of solution refers to Path; method refers to name; full comment = 'Feeds data into the parser';
CREATED SQL: SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.FullComment = 'Feeds data into the parser'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Among the repository ""3"", how many methods whose comments is XML format? repository refers to RepoId; RepoId = 3; method refers to Name; method whose comment is XML format refers to CommentIsXml = 1;
CREATED SQL: SELECT COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.RepoId = 3 AND T2.CommentIsXml = 1
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the percentage of solutions for the method that needs to be compiled in the English methods? method that needs to be compiled refers to WasCompiled = 0; English method refers to Lang = 'en'; percentage of solutions = MULTIPLY(DIVIDE(SUM(WasCompiled = 0), COUNT(Solution.Id)), 100);
CREATED SQL: SELECT CAST(SUM(CASE WHEN T1.WasCompiled = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Lang) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'en'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: How many more stars in percentage are there for the repository of solution ""1"" than solution ""2""? solution refers to Solution.Id; Solution.Id = 1 OR 2; percentage = DIVIDE(MULTIPLY(SUBTRACT(SUM(Solution.Id = 1), SUM(Solution.Id = 2)), 100)), SUM(Solution.Id = 2);
CREATED SQL: SELECT CAST(SUM(CASE WHEN T2.Id = 1 THEN T1.Stars ELSE 0 END) - SUM(CASE WHEN T2.Id = 2 THEN T1.Stars ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 2 THEN T1.Stars ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: How many solutions are there whose respositories received the number of stars more than one third of the number of forks? number of solutions are there whose repositories received the number of stars more than one third of the number of forks refers to Stars>DIVIDE(Forks, 3);
CREATED SQL: SELECT COUNT(DISTINCT T1.Id) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars > CAST(T1.Forks AS REAL) / 3
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the task of method number 2? task of the method refers to the second part of the Name after the "".""; method number refers to Method_100k.Id; Method_100k.Id = 2;
CREATED SQL: SELECT SUBSTR(SUBSTR(Name, INSTR(Name, '.') + 1), 1, INSTR(SUBSTR(Name, INSTR(Name, '.') + 1), '.') - 1) task FROM Method WHERE Id = 2
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What format does the method number 8's comment have? format refers CommentIsXml; method number refers to Method_100k.Id; Method_100k.Id = 8;
CREATED SQL: SELECT CASE WHEN CommentIsXml = 0 THEN 'isNotXMLFormat' WHEN CommentIsXml = 1 THEN 'isXMLFormat' END format FROM Method WHERE Id = 8
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Please provide a link to the most well-known repository's Github address. link refers to Url; well-known repository refers to MAX(Watchers);
CREATED SQL: SELECT Url FROM Repo WHERE Watchers = ( SELECT MAX(Watchers) FROM Repo )
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the task of the method that is in the Czech language? method refers to Name; task of the method refers to the second part of the Name after the "".""; Czech language refers to Lang = 'cs'
CREATED SQL: SELECT DISTINCT SUBSTR(SUBSTR(Name, INSTR(Name, '.') + 1), 1, INSTR(SUBSTR(Name, INSTR(Name, '.') + 1), '.') - 1) task FROM Method WHERE Lang = 'cs'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the solution path for method number 3? solution path refers to Path; method number refers to Method_100k.Id; Method_100k.Id = 3;
CREATED SQL: SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Id = 3
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the language of method number 28 that can be found in the repository number 3? language of method refers to Lang; method number refers to Method_100k.Id; Method_100k.Id = 28; repository number refers to RepoId; RepoID = 3;
CREATED SQL: SELECT T2.Lang FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Id = 28 AND T1.RepoId = 3
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is solution 1's processing time and how many methods have been using this solution? solution refers to Solution.Id and SolutionId; Solution.Id = 1; SolutionId = 1; processing time refers to ProcessedTime; methods refers to Name;
CREATED SQL: SELECT T1.ProcessedTime, COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.SolutionId = 1
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: How many methods in the same repository share a tokenized name that begins with ""query language...""? methods refers to Name; tokenized name refers to NameTokenized; NameTokenized LIKE 'query language%';
CREATED SQL: SELECT COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized LIKE 'query language%'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Please state the API calls for method number 10 and its intended course of action. method number refers to Method_100k.Id; Method_100k.Id = 10; intended course of action refers to Path;
CREATED SQL: SELECT T2.ApiCalls, T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Id = 10
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: How many methods in repository 150 did not have a comment and a summary? methods refers to Name; repository that did not have a comment and a summary refers to FullComment IS NULL AND Summary IS NULL;
CREATED SQL: SELECT COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.RepoId = 150 AND T2.FullComment IS NULL AND T2.Summary IS NULL
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the comment format of method number 50 with the solution path ""managedfusion_managedfusion\ManagedFusion.sln""? comment format refers to CommentIsXml; method number refers to Method_100k.Id; Method_100k.Id = 50; solution path refers to Path; Path = 'managedfusion_managedfusion\ManagedFusion.sln';
CREATED SQL: SELECT CASE WHEN T2.CommentIsXml = 0 THEN 'isNotXMLFormat' WHEN T2.CommentIsXml = 1 THEN 'isXMLFormat' END format FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Id = 50 AND T1.Path = 'managedfusion_managedfusionManagedFusion.sln'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the task method of the tokenized name ""string extensions to pascal case
""? method refers to Name; task of the method refers to the second part of the Name after the "".""; tokenized name refers to NameTokenized; NameTokenized = 'string extensions to pascal case';
CREATED SQL: SELECT DISTINCT SUBSTR(SUBSTR(Name, INSTR(Name, '.') + 1), 1, INSTR(SUBSTR(Name, INSTR(Name, '.') + 1), '.') - 1) task FROM Method WHERE NameTokenized = 'string extensions to pascal case'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Provide the tokenized name of the method ""Sky.Excel.ExcelBook.TypeConvert"". tokenized name refers to NameTokenized; NameTokenized = 'Sky.Excel.ExcelBook.TypeConvert';
CREATED SQL: SELECT NameTokenized FROM Method WHERE Name = 'Sky.Excel.ExcelBook.TypeConvert'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: How many path does the github address ""https://github.com/jeffdik/tachy.git"" have? github address refers to Url; Url = 'https://github.com/jeffdik/tachy.git';
CREATED SQL: SELECT COUNT(DISTINCT T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/jeffdik/tachy.git'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: How many watchers does the path ""maff_se3ue7\US7.sln"" have?
CREATED SQL: SELECT T1.Watchers FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Path = 'maff_se3ue7US7.sln'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: List 5 github address that the solutions can be implemented without the need of compilation. github address refers to Url; solution can be implemented without the need of compliation refers to WasCompiled = 1;
CREATED SQL: SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.WasCompiled = 1 LIMIT 5
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What are the solution path of the tokenized name ""matrix multiply""? solution path refers to Path; tokenized name refers to NameTokenized; NameTokenized = 'matrix multiply';
CREATED SQL: SELECT DISTINCT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 'matrix multiply'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: How many XML format does the github address ""https://github.com/dogeth/vss2git.git"" have? Xml format refers to CommentisXml, github address refers to Url; Url = 'https://github.com/dogeth/vss2git.git';
CREATED SQL: SELECT COUNT(T3.CommentIsXml) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId INNER JOIN Method AS T3 ON T2.Id = T3.SolutionId WHERE T1.Url = 'https://github.com/dogeth/vss2git.git' AND T3.CommentIsXml = 1
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: List 5 solution path that has sampling time of 636431758961741000. solution path refers to Path; sampling time refers to SampledAt; SampledAt = '636431758961741000';
CREATED SQL: SELECT DISTINCT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.SampledAt = 636431758961741000 LIMIT 5
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the github address of the solution path ""joeyrobert_bloomfilter\DataTypes.BloomFilter.sln""? github address refers to Url; solution path refers to Path; Path = 'joeyrobert_bloomfilter\DataTypes.BloomFilter.sln';
CREATED SQL: SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Path = 'joeyrobert_bloomfilterDataTypes.BloomFilter.sln'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: List all the method name of the solution path ""graffen_NLog.Targets.Syslog\src\NLog.Targets.Syslog.sln
"". method name refers to Name; solution path refers to Path; Path = 'graffen_NLog.Targets.Syslog\src\NLog.Targets.Syslog.sln';
CREATED SQL: SELECT DISTINCT T2.Name FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'graffen_NLog.Targets.SyslogsrcNLog.Targets.Syslog.sln'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: List all the tokenized name of the solution path ""jurney_P4Backup\P4Backup\P4Backup.sln
"". tokenized name refers to NameTokenized; solution path refers to Path; Path = 'jurney_P4Backup\P4Backup\P4Backup.sln';
CREATED SQL: SELECT DISTINCT T2.NameTokenized FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'jurney_P4BackupP4BackupP4Backup.sln'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: Provide the github address with the summary of method ""A test for Decompose
"". github address refers to Url; summary of method refers to Summary; Summary = 'A test for Decompose';
CREATED SQL: SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId INNER JOIN Method AS T3 ON T2.Id = T3.SolutionId WHERE T3.Summary = 'A test for Decompose'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: How many liked by people does the solution path ""ninject_Ninject\Ninject.sln
"" have? how many liked by people refers to Stars; solution path refers to Path; Path = 'ninject_Ninject\Ninject.sln';
CREATED SQL: SELECT DISTINCT T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Path = 'ninject_NinjectNinject.sln'
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: How many solution path does the repository with 111 stars, 58 forks, and 111 watchers? solution path refers to Path;
CREATED SQL: SELECT COUNT(T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 111 AND T1.Forks = 58 AND T1.Watchers = 111
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: What is the average processed time of the solution with a repository of 254 likes, 88 followers, and 254 watchers? average processed time = AVG(ProcessedTime);
CREATED SQL: SELECT CAST(SUM(T2.ProcessedTime) AS REAL) / COUNT(T2.ProcessedTime) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 254 AND T1.Forks = 88 AND T1.Watchers = 254
END OF QUESTION"
codebase_comments,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Method (
Id integer,
Name text,
FullComment text,
Summary text,
ApiCalls text,
CommentIsXml integer,
SampledAt integer,
SolutionId integer,
Lang text,
NameTokenized text,
PRIMARY KEY (Id),
);
CREATE TABLE MethodParameter (
Id integer,
MethodId text,
Type text,
Name text,
PRIMARY KEY (Id),
);
CREATE TABLE Repo (
Id integer,
Url text,
Stars integer,
Forks integer,
Watchers integer,
ProcessedTime integer,
PRIMARY KEY (Id),
);
CREATE TABLE Solution (
Id integer,
RepoId integer,
Path text,
ProcessedTime integer,
WasCompiled integer,
PRIMARY KEY (Id),
);
---------------------
QUESTION: How many language code of method is used for the github address ""https://github.com/managedfusion/managedfusion.git
""? language code of method refers to Lang; github address refers to Url; Url = 'https://github.com/managedfusion/managedfusion.git';
CREATED SQL: SELECT COUNT(DISTINCT T3.Lang) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId INNER JOIN Method AS T3 ON T2.Id = T3.SolutionId WHERE T1.Url = 'https://github.com/managedfusion/managedfusion.git'
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many trains are there that run in the east direction? east is a direction
CREATED SQL: SELECT COUNT(id) FROM trains WHERE direction = 'east'
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many cars are there on train no.1? train no.1 refers to train_id = 1
CREATED SQL: SELECT COUNT(id) FROM cars WHERE train_id = 1
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: What is the shape of the tail car on train no.1? train no.1 refers to train_id = 1; tail car refers to position = 4
CREATED SQL: SELECT shape FROM cars WHERE train_id = 1 AND position = 4
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Please list the IDs of all the trains with at least one car in a non-regular shape. non-regular shape refers to shape in ('elipse', 'bucket')
CREATED SQL: SELECT train_id FROM cars WHERE shape IN ('elipse', 'bucket') GROUP BY train_id
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many cars on train no.1 have the roof open? train no. 1 refers to train_id = 1; roof open refers to roof = 'none'
CREATED SQL: SELECT COUNT(id) FROM cars WHERE train_id = 1 AND roof = 'none'
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Please list the IDs of all the cars on train no.1 that have 2 wheels. train no.1 refers to train_id = 1; 2 wheels refers to wheels = 2
CREATED SQL: SELECT id FROM cars WHERE train_id = 1 AND wheels = 2
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Among the trains that run in the east direction, how many of them have at least one car in a non-regular shape? non-regular shape refers to shape in ('elipse', 'bucket')
CREATED SQL: SELECT SUM(CASE WHEN T1.shape IN ('bucket', 'elipse') THEN 1 ELSE 0 end)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east'
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Please list the IDs of all the trains that run in the east direction and have less than 4 cars. less than 4 cars refers to carsNum < 4
CREATED SQL: SELECT T1.id FROM trains AS T1 INNER JOIN ( SELECT train_id, MAX(position) AS carsNum FROM cars GROUP BY train_id ) AS T2 ON T1.id = T2.train_id WHERE T1.direction = 'east' AND T2.carsNum < 4
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Please list the IDs of all the cars with double sides on trains that run in the west direction. double sides on trains refers to sides = 'double'
CREATED SQL: SELECT T1.id FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east' AND T1.sides = 'double'
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Among the trains that run in the east direction, how many of them have more than 2 long cars? more than 2 long cars refers to longCarsNum > 2
CREATED SQL: SELECT SUM(CASE WHEN T2.longCarsNum > 2 THEN 1 ELSE 0 END)as count FROM trains AS T1 INNER JOIN ( SELECT train_id, COUNT(id) AS longCarsNum FROM cars WHERE len = 'long' GROUP BY train_id ) AS T2 ON T1.id = T2.train_id WHERE T1.direction = 'west'
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Please list the directions in which the trains with at least one empty-loaded car run. at least one empty-loaded car run refers to load_num = 0
CREATED SQL: SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.load_num = 0
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: In which direction does the train with an ellipse-shape car run? shape = 'ellipse'
CREATED SQL: SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.shape = 'ellipse'
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: What is the total number of short cars on all the trains that run in the east direction? short cars refers to len = 'short'
CREATED SQL: SELECT SUM(CASE WHEN T1.len = 'short' then 1 ELSE 0 END)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east'
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Please list the shapes of all the head cars on the trains that run in the east direction. head cars refers to position = 1;
CREATED SQL: SELECT T1.shape FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east' AND T1.position = 1 GROUP BY T1.shape
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many cars on a train that runs in the east direction have a flat roof? flat roof refers to roof = 'flat'
CREATED SQL: SELECT SUM(CASE WHEN T1.roof = 'flat' THEN 1 ELSE 0 END)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east'
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Among the cars on a train that runs in the east direction, how many of them have a flat roof and a circle load shape? flat roof refers to roof = 'flat'; load_shape = 'circle'
CREATED SQL: SELECT SUM(CASE WHEN T1.load_shape = 'circle' THEN 1 ELSE 0 END)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east' AND T1.roof = 'flat' 
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Trains that run in which direction have more rectangle-shaped cars in total? more rectangle-shaped cars refers to MAX(rectCarsNum)
CREATED SQL: SELECT T1.direction FROM trains AS T1 INNER JOIN ( SELECT train_id, COUNT(id) AS rectCarsNum FROM cars WHERE shape = 'rectangle' GROUP BY train_id ) AS T2 ON T1.id = T2.train_id ORDER BY T2.rectCarsNum DESC
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Please list the directions in which the trains with 4 short cars run. short refers to len = 'short'; 4 cars run refers to position = 4
CREATED SQL: SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.len = 'short' AND T1.position = 4
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: What is the average number of cars on trains that run in the east direction? calculation = DIVIDE(count(id), count(train_id))
CREATED SQL: SELECT CAST(COUNT(T1.id) AS REAL) / COUNT(DISTINCT T1.train_id) FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east'
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Among the trains that have at least one non-regular shaped car, what is the percentage of it running in the east direction? non-regular shaped car refers to shape in ('bucket', 'ellipse'); calculation = MULTIPLY(DIVIDE(count(direction = 'east' then train_id)), count(train_id), 100)
CREATED SQL: SELECT CAST(COUNT(DISTINCT CASE WHEN T2.direction = 'east' THEN T1.train_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.train_id) FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.shape IN ('bucket', 'ellipse')
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many short cars are in the shape of hexagon? short cars refers to len = 'short'; in the shape of hexagon refers to shape = 'hexagon'
CREATED SQL: SELECT COUNT(id) FROM cars WHERE shape = 'hexagon' AND len = 'short'
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many trains are running west? west is a direction
CREATED SQL: SELECT COUNT(id) FROM trains WHERE direction = 'west'
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: What are the load shapes of all the short ellipse cars? short refers to len = 'short'; ellipse cars refers to shape = 'ellipse'
CREATED SQL: SELECT load_shape FROM cars WHERE shape = 'ellipse' AND len = 'short'
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: What are the ids of the train running east? east is a direction
CREATED SQL: SELECT id FROM trains WHERE direction = 'east'
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many wheels do the long cars have? long cars refers to len = 'long'
CREATED SQL: SELECT SUM(wheels) FROM cars WHERE len = 'long'
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Which direction do the majority of the trains are running? majority of train refers to MAX(count(id))
CREATED SQL: SELECT direction FROM trains GROUP BY direction ORDER BY COUNT(id) DESC
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Among the trains running east, how many trains have at least 4 cars? east is a direction; at least 4 cars refers to carsNum > = 4
CREATED SQL: SELECT SUM(CASE WHEN T1.direction = 'east' THEN 1 ELSE 0 END)as count FROM trains AS T1 INNER JOIN ( SELECT train_id, COUNT(id) AS carsNum FROM cars GROUP BY train_id ) AS T2 ON T1.id = T2.train_id WHERE T2.carsNum >= 4
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Which direction do most of the trains with rectangle-shaped second cars run? most of the trains refers to MAX(count(id)); second cars refers to position = 2
CREATED SQL: SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 2 AND T1.shape = 'rectangle' GROUP BY T2.direction ORDER BY COUNT(T2.id) DESC LIMIT 1
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many trains running west have double sided cars in 3rd position? west is a direction; double sided cars refers to sides = 'double'; 3rd position refers to position = 3
CREATED SQL: SELECT COUNT(T.train_id) FROM (SELECT T1.train_id FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 3 AND T2.direction = 'west' AND T1.sides = 'double' GROUP BY T1.train_id)as T
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many eastbound trains have rectangular-shaped head cars? eastbound refers to direction = 'east'; head cars refers to position = 1
CREATED SQL: SELECT COUNT(T.train_id) FROM (SELECT T1.train_id FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 1 AND T2.direction = 'east' AND T1.shape = 'rectangle' GROUP BY T1.train_id)as T
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Among the trains running west, how many trains have no more than one car with an open roof? running west refers to direction = 'west'; open roof refers to roof = 'none'
CREATED SQL: SELECT SUM(CASE WHEN T1.direction = 'west' THEN 1 ELSE 0 END)as count FROM trains AS T1 INNER JOIN ( SELECT train_id, COUNT(id) FROM cars WHERE roof = 'none' GROUP BY train_id HAVING COUNT(id) = 1 ) AS T2 ON T1.id = T2.train_id 
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Which direction does the majority of the trains that have 3 cars are running? 3 cars refers to carsNum = 3
CREATED SQL: SELECT T1.direction FROM trains AS T1 INNER JOIN ( SELECT train_id, COUNT(id) AS carsNum FROM cars GROUP BY train_id HAVING carsNum = 3 ) AS T2 ON T1.id = T2.train_id GROUP BY T1.direction
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many trains with fully loaded head cars are running east? fully loaded refers to load_num = 3; head cars refers to position = 1
CREATED SQL: SELECT COUNT(DISTINCT T1.train_id) FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 1 AND T1.load_num = 3
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many cars running east have double-sided tail cars? east is an direction; double-sided refers to sides = 'double'; tail refers to carsposition = trailPosi
CREATED SQL: SELECT COUNT(T1.id) FROM trains AS T1 INNER JOIN cars AS T2 ON T1.id = T2.train_id INNER JOIN ( SELECT train_id, MAX(position) AS trailPosi FROM cars GROUP BY train_id ) AS T3 ON T1.id = T3.train_id WHERE T1.direction = 'east' AND T2.position = T3.trailPosi AND T2.sides = 'double'
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: List all the directions of the trains that have empty cars. empty cars refers to load_num = 0
CREATED SQL: SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.load_num = 0
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: What is the direction of the train with a diamond-shaped load in its 2nd car? 2nd car refers to position = 2
CREATED SQL: SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 2 AND T1.shape = 'diamond'
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Among the trains running west, how many trains have three-wheeled, jagged roof cars? west is an direction; three-wheeled refers to wheels = 3; jagged roof refers to roof = 'jagged'
CREATED SQL: SELECT SUM(CASE WHEN T2.direction = 'west' THEN 1 ELSE 0 END)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.wheels = 3 AND T1.roof = 'jagged'
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Provide the directions for all the trains that have 2 or less cars. 2 or less cars refers to trailPosi < = 2
CREATED SQL: SELECT T1.direction FROM trains AS T1 INNER JOIN ( SELECT train_id, MAX(position) AS trailPosi FROM cars GROUP BY train_id ) AS T2 ON T1.id = T2.train_id WHERE T2.trailPosi <= 2
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: What is the percentage of all the trains with at least 4 cars? List the directions of the said trains. at least 4 cars refers to trailPosi > = 4; calculation = MULTIPLY(DIVIDE(count(trailPosi > = 4 then id), count(id)), 100)
CREATED SQL: SELECT CAST(COUNT(CASE WHEN T2.trailPosi >= 4 THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM trains AS T1 INNER JOIN ( SELECT train_id, MAX(position) AS trailPosi FROM cars GROUP BY train_id ) AS T2 ON T1.id = T2.train_id UNION ALL SELECT T1.direction FROM trains AS T1 INNER JOIN ( SELECT train_id, MAX(position) AS trailPosi FROM cars t GROUP BY train_id ) AS T2 ON T1.id = T2.train_id AND T2.trailPosi >= 4
END OF QUESTION"
trains,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cars (
id integer,
train_id integer,
position integer,
shape text,
len text,
sides text,
roof text,
wheels integer,
load_shape text,
load_num integer,
PRIMARY KEY (id),
FOREIGN KEY (train_id) REFERENCES trains(id),
);
CREATE TABLE trains (
id integer,
direction text,
PRIMARY KEY (id),
);
---------------------
QUESTION: List all the load shapes of all head cars of each train and identify which load shape has the highest number. Calculate the percentage of the trains with the said head car that are running eas which load shape has the highest number refers to MAX(load_shape); head car refers to position = 1; east is a direction; calculation = MULTIPLY(DIVIDE(count(direction = 'east' where MAX(load_shape) where position = 1 then id), count(id)), 100)
CREATED SQL: SELECT DISTINCT T3.load_shape FROM ( SELECT load_shape, train_id FROM cars WHERE position = 1 ORDER BY train_id DESC ) AS T3 UNION ALL SELECT T4.load_shape FROM ( SELECT load_shape, train_id FROM cars WHERE position = 1 ORDER BY train_id DESC LIMIT 1 ) AS T4 UNION ALL SELECT (CAST(COUNT(DISTINCT CASE WHEN T2.direction = 'east' THEN T2.id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.id)) FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 1 AND T1.load_shape = ( SELECT T4.load_shape FROM ( SELECT load_shape, train_id FROM cars AS T WHERE position = 1 ORDER BY train_id DESC LIMIT 1 ) AS T4 )
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: Please list the names of the characters in the movie Look Who's Talking. movie Look Who's Talking refers to title = 'Look Who's Talking'
CREATED SQL: SELECT T2.`Character Name` FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T1.Title = 'Look Who''s Talking'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: Which character has the longest screen time in the movie Batman? longest screen time refers to max(screentime); movie Batman refers to title = 'Batman'
CREATED SQL: SELECT T2.`Character Name` FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T1.Title = 'Batman' ORDER BY T2.screentime DESC LIMIT 1
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: Which actor played the role of Joker in the movie Batman? role of Joker refers to character_name = 'Joker'; movie Batman refers to title = 'Batman'
CREATED SQL: SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Batman' AND T2.`Character Name` = 'Joker'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: Please list the names of the actors who played a role in the movie Batman. movie Batman refers to title = 'Batman'
CREATED SQL: SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Batman'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: Which movie is the character Dr. Archibald 'Moonlight' Graham from? movie name refers to title; character Dr. Archibald 'Moonlight' Graham refers to character_name = 'Dr. Archibald 'Moonlight' Graham'
CREATED SQL: SELECT T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T2.`Character Name` = 'Dr. Archibald ''Moonlight'' Graham'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: Please list the names of the movies starring Tom Cruise. movie name refers to title; starring Tom Cruise refers to name = 'Tom Cruise'
CREATED SQL: SELECT T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Tom Cruise'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: How many movies starring Morgan Freeman are suggested by parental guidance? 'suggested by parental guidance' refers to mpaa_rating = 'PG'
CREATED SQL: SELECT COUNT(*) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Morgan Freeman' AND T1.`MPAA Rating` = 'PG'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: Among the movies starring Tom Cruise, which one of them has the best quality? starring Tom Cruise refers to name = 'Tom Cruise'; best quality refers to max(rating)
CREATED SQL: SELECT T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Tom Cruise' ORDER BY T1.Rating DESC LIMIT 1
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: What is the name of the character played by Tom Cruise in the movie Born on the Fourth of July? played by Tom Cruise refers to name = 'Tom Cruise'; movie Born on the Fourth of July refers to title = 'Born on the Fourth of July'
CREATED SQL: SELECT T2.`Character Name` FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Tom Cruise' AND T1.Title = 'Born on the Fourth of July'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: Please list the names of all the characters played by Tom Cruise. played by Tom Cruise refers to name = 'Tom Cruise'
CREATED SQL: SELECT T1.`Character Name` FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T2.Name = 'Tom Cruise'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: Among the actors who starred in the movie Batman, which one of them is the tallest? movie Batman refers to title = 'Batman'; tallest refers to max(height_inches)
CREATED SQL: SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Batman' ORDER BY T3.`Height (Inches)` DESC LIMIT 1
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: How many movies star a male African American actor? male refers to gender = 'Male'; African American refers to ethnicity = 'African American'
CREATED SQL: SELECT COUNT(*) FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T2.Gender = 'Male' AND T2.Ethnicity = 'African American'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: What is the average rating of all the movies starring Tom Cruise? starring Tom Cruise refers to name = 'Tom Cruise'; average rating = divide(sum(rating where name = 'Tom Cruise'), count(movieid where name = 'Tom Cruise'))
CREATED SQL: SELECT AVG(T1.Rating) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Tom Cruise'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: How much longer in percentage is the screen time of the most important character in Batman than the least important one? most important character refers to max(screentime); least important character refers to min(screentime); movie Batman refers to title = 'Batman'; percentage = divide(subtract(max(screentime) , min(screentime)) , min(screentime)) * 100%
CREATED SQL: SELECT (MAX(CAST(SUBSTR(T2.screentime, 3, 2) AS REAL)) - MIN(CAST(SUBSTR(T2.screentime, 3, 2) AS REAL))) * 100 / MIN(CAST(SUBSTR(T2.screentime, 3, 2) AS REAL)) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T1.Title = 'Batman'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: Which movie had the biggest budget? Give the name of the movie. biggest budget refers to max(Budget); name of the movie refers to Title
CREATED SQL: SELECT Title FROM movie ORDER BY Budget DESC LIMIT 1
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: What is the MPAA rating for the movie with the character named ""Peter Quill"" in it? MPAA rating = 'G' means General audiences; MPAA rating = 'PG' means Parental guidance suggested; MPAA rating = 'R'means Restricted; MPAA rating = 'X' means No one under 17 admitted
CREATED SQL: SELECT T1.`MPAA Rating` FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T2.`Character Name` = 'Peter Quill'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: Give the name of the No.1 character in the credit list from the highest rating thriller movie. No.1 character in the credit list refers to creditOrder = '1'; highest rating refers to max(rating); thriller movie refers to Genre = 'Thriller'
CREATED SQL: SELECT T2.`Character Name` FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T2.creditOrder = '1' AND T1.Genre = 'Thriller' ORDER BY T1.Rating DESC LIMIT 1
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: Who was the actor that played in the movie ""Batman"" with the longest screentime? movie ""Batman"" refers to Title = 'Batman'; longest screentime refers to max(screentime)
CREATED SQL: SELECT T2.Name FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID INNER JOIN movie AS T3 ON T3.MovieID = T1.MovieID WHERE T3.Title = 'Batman' ORDER BY T1.screentime DESC LIMIT 1
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: How many movies has the highest networth actor acted in? highest networth refers to max(networth)
CREATED SQL: SELECT COUNT(*) FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE CAST(REPLACE(REPLACE(T2.NetWorth, ',', ''), '$', '') AS REAL) = ( SELECT MAX(CAST(REPLACE(REPLACE(NetWorth, ',', ''), '$', '') AS REAL)) FROM actor)
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: Who played the character named ""Chanice Kobolowski""?
CREATED SQL: SELECT T2.Name FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.`Character Name` = 'Chanice Kobolowski'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: When is the birthday of the actor who played ""Sully""? birthday refers to Date of Birth; ""Sully"" refers to Character Name = 'Sully'
CREATED SQL: SELECT T2.`Date of Birth` FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.`Character Name` = 'Sully'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: Show the birth city of the actor who played ""Gabriel Martin"". ""Gabriel Martin"" refers to Character Name = 'Gabriel Martin'
CREATED SQL: SELECT T2.`Birth City` FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.`Character Name` = 'Gabriel Martin'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: Give the biography of the actor who played ""Michael Moscovitz"". ""Michael Moscovitz"" refers to Character Name = 'Michael Moscovitz'
CREATED SQL: SELECT T2.Biography FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.`Character Name` = 'Michael Moscovitz'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: How tall is the actor who played ""Lurch""? tall refers to Height (Inches); ""Lurch"" refers to Character Name = 'Lurch'
CREATED SQL: SELECT T2.`Height (Inches)` FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.`Character Name` = 'Lurch'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: Show the No.3 character name in the credit list of the movie ""G.I. Joe: The Rise of Cobra"". No.3 character refers to creditOrder = '3'; movie ""G.I. Joe: The Rise of Cobra"" refers to Title = 'G.I. Joe: The Rise of Cobra'
CREATED SQL: SELECT T2.`Character Name` FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T1.Title = 'G.I. Joe: The Rise of Cobra' AND T2.creditOrder = '3'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: Who played the No.2 character in the credit list of the movie ""American Hustle""? No.2 character refers to creditOrder = '2'; movie ""American Hustle"" refers to Title = 'American Hustle'
CREATED SQL: SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'American Hustle' AND T2.creditOrder = '2'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: Who played the No.1 character in the credit list of the movie which was released on ""2015/10/26""? No.1 character refers to creditOrder = '1'; released on ""2015/10/26"" refers to Release Date = '2015-10-26'
CREATED SQL: SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.`Release Date` = '2015-10-26' AND T2.creditOrder = '1'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: What is the percentage of the USA actors that showed up in the credit list of movie ""Mrs. Doubtfire""? USA actors refers to Birth Country = 'USA'; movie ""Mrs. Doubtfire"" refers to Title = 'Mrs. Doubtfire'; percentage = divide(count(ActorID where Birth Country = 'USA'), count(ActorID)) * 100%
CREATED SQL: SELECT CAST(SUM(CASE WHEN T3.`Birth Country` = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.`Birth Country`) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Mrs. Doubtfire'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: What is the percentage of the actors that showed up in the credit list of movie ""Dawn of the Planet of the Apes"" that were born after ""1970/1/1""? movie ""Dawn of the Planet of the Apes"" refers to Title = 'Dawn of the Planet of the Apes'; born after ""1970/1/1"" refers to Date of Birth > '1970/1/1'; percentage = divide(count(ActorID where Date of Birth > '1970/1/1'), count(ActorID))*100%
CREATED SQL: SELECT CAST(SUM(CASE WHEN T3.`Date of Birth` > '1970-01-01' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.`Date of Birth`) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Dawn of the Planet of the Apes'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: List down the movie ID of movie with a budget of 15000000 and a rating between 7 to 8. a budget of 15000000 refers to Budget = 15000000; rating between 7 to 8 refers to Rating BETWEEN 7 and 8
CREATED SQL: SELECT MovieID FROM movie WHERE Rating BETWEEN 7 AND 8 AND Budget = 15000000
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: In rated PG movies, how many of them released in June 1990? rated PG refers to MPAA Rating = 'PG'; released in June 1990 refers to Release Date BETWEEN '1990-06-01' and '1990-06-30'
CREATED SQL: SELECT COUNT(*) FROM movie WHERE `MPAA Rating` = 'PG' AND `Release Date` LIKE '1990-06%'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: What is the name of male and white actor with actor ID 439? male refers to Gender = 'Male'; white refers to Ethnicity = 'White'
CREATED SQL: SELECT Name FROM actor WHERE ActorID = 439 AND Gender = 'Male' AND Ethnicity = 'White'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: Among the actors born in New York City, list the genre of their movie with a rating greater than 5. born in New York City refers to Birth City = 'New York City'; rating greater than 5 refers to Rating > 5
CREATED SQL: SELECT T1.Genre FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.`Birth City` = 'New York City' AND T1.Rating > 5
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: In romantic movies, how many of them starred by John Travolta? romantic movies refers to Genre = 'Romance'; starred by John Travolta refers to Name = 'John Travolta'
CREATED SQL: SELECT COUNT(*) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Genre = 'Romance' AND T3.Name = 'John Travolta'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: List the height and net worth of actors starred in Three Men and a Little Lady. Three Men and a Little Lady refers to Title = 'Three Men and a Little Lady'
CREATED SQL: SELECT T3.`Height (Inches)`, T3.NetWorth FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Three Men and a Little Lady'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: What is the genre of PG rated movie starred by the actor with highest net worth? PG rated refers to MPAA Rating = 'PG';  highest net worth refers to max(NetWorth)
CREATED SQL: SELECT T1.Genre FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.`MPAA Rating` = 'PG' ORDER BY CAST(REPLACE(REPLACE(T3.NetWorth, ',', ''), '$', '') AS REAL) DESC LIMIT 1
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: What is the net worth of the actor starred in Misery who has a height ranging from 60 to 70 inches tall? Misery refers to Title = 'Misery'; height ranging from 60 to 70 inches refers to Height (Inches) BETWEEN 60 and 70
CREATED SQL: SELECT T3.NetWorth FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Misery' AND T3.`Height (Inches)` BETWEEN 60 AND 70 AND T3.Gender = 'Male'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: Count the male actors born in USA that starred in Ghost. male refers to Gender = 'Male'; born in USA refers to Birth Country = 'USA'; Ghost refers to Title = 'Ghost'
CREATED SQL: SELECT COUNT(*) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Ghost' AND T3.Gender = 'Male' AND T3.`Birth Country` = 'USA'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: What is the MPAA rating and title of the movie starred by Leonardo DiCaprio with highest budget? starred by Leonardo DiCaprio refers to Name = 'Leonardo Dicaprio'; highest budget refers to max(Budget)
CREATED SQL: SELECT T1.`MPAA Rating`, T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Leonardo DiCaprio' ORDER BY T1.Budget DESC LIMIT 1
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: Among the actors starred in Die Hard 2, list their net worth and birth date of actors with a height between 60 to 65. Die Hard 2 refers to Title = 'Die Hard 2'; height between 60 to 65 refers to Height (Inches) BETWEEN 60 AND 65
CREATED SQL: SELECT T3.NetWorth, T3.`Date of Birth` FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Die Hard 2' AND T3.`Height (Inches)` BETWEEN 60 AND 65
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: List the runtime of movies starred by an African-American actor born on December 28, 1954. African-American refers to Ethnicity = 'African American'; born on December 28 1954 refers to Date of Birth = '1954-12-28'
CREATED SQL: SELECT T1.Runtime FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Ethnicity = 'African American' AND T3.`Date of Birth` = '1954-12-28'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: Find the actor's name that played as Don Altobello in a drama movie that has a gross of 136766062. actor's name refers to Name; as Don Altobello refers to Character Name = 'Don Altobello'; drama movie refers to Genre = 'Drama'
CREATED SQL: SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Gross = 136766062 AND T2.`Character Name` = 'Don Altobello' AND T1.Genre = 'Drama'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: What is the gross of a comedy movie with a rating lower than 7 and starred by an actor with a net worth greater than $375,000,000.00? comedy movie refers to Genre = 'Comedy'; rating lower than 7 refers to Rating < 7; net worth greater than $375,000,000.00 refers to NetWorth > '$375,000,000.00'
CREATED SQL: SELECT SUM(T1.Gross) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE CAST(REPLACE(REPLACE(T3.NetWorth, ',', ''), '$', '') AS REAL) > 375000000 AND T1.Rating < 7 AND T1.Genre = 'Comedy'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: What is the runtime of the movie starred by Jackie Chan with a rating greater than 7? starred by Jackie Chan refers to Name = 'Jackie Chan'; rating greater than 7 refers to Rating > 7
CREATED SQL: SELECT T1.Runtime FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Jackie Chan' AND T1.Rating > 7
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: Among the movies with drama genre, what is the percentage of the actors with net worth greater than $400,000,000.00? drama genre refers to Genre = 'Drama'; net worth greater than $400,000,000.00 refers to NetWorth > '$400,000,000.00'; percentage = divide(count(ActorID where NetWorth > '$400,000,000.00'), COUNT(ActorID))*100%
CREATED SQL: SELECT SUM(CASE WHEN CAST(REPLACE(REPLACE(T3.NetWorth, ',', ''), '$', '') AS REAL) > 400000000 THEN 1 ELSE 0 END) - SUM(CASE WHEN CAST(REPLACE(REPLACE(T3.NetWorth, ',', ''), '$', '') AS REAL) < 400000000 THEN 1 ELSE 0 END) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Genre = 'Drama'
END OF QUESTION"
movie,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE actor (
ActorID integer,
Name text,
Date of Birth date,
Birth City text,
Birth Country text,
Height (Inches) integer,
Biography text,
Gender text,
Ethnicity text,
NetWorth text,
PRIMARY KEY (ActorID),
);
CREATE TABLE movie (
MovieID integer,
Title text,
MPAA Rating text,
Budget integer,
Gross integer,
Release Date text,
Genre text,
Runtime integer,
Rating real,
Rating Count integer,
Summary text,
PRIMARY KEY (MovieID),
);
CREATE TABLE characters (
MovieID integer,
ActorID integer,
Character Name text,
creditOrder integer,
pay text,
screentime text,
FOREIGN KEY (MovieID) REFERENCES movie(MovieID),
FOREIGN KEY (ActorID) REFERENCES actor(ActorID),
);
---------------------
QUESTION: List the character's name of actress born in Sherman Oaks and starred in the movie Bruce Almighty with height greater than the 50% of average height of all actors listed. actress refers to Gender = 'Female'; born in Sherman Oaks refers to Birth City = 'Sherman Oaks'; movie Bruce Almighty refers to Title = 'Bruce Almighty'; height greater than the 50% of average height refers to Height (Inches) > multiply(avg(Height (Inches)), 0.5)
CREATED SQL: SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Gender = 'Female' AND T1.Title = 'Godzilla' AND T3.`Birth City` = 'Sherman Oaks' AND T3.`Height (Inches)` * 100 > ( SELECT AVG(`Height (Inches)`) FROM actor ) * 50
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: How many tweets are in English? english is the language and refers to Lang = 'en'
CREATED SQL: SELECT COUNT(TweetID) AS tweet_number FROM twitter WHERE Lang = 'en'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Please list the texts of all the tweets that are reshared. reshared refers to Isreshare = 'TRUE'
CREATED SQL: SELECT text FROM twitter WHERE IsReshare = 'TRUE'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: How many tweets are seen by more than 1000 unique users? seen by more than 1000 unique users refers to Reach > 1000
CREATED SQL: SELECT COUNT(TweetID) AS tweet_number FROM twitter WHERE Reach > 1000
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Among all the tweets that have a positive sentiment, how many of them are posted on Thursday? positive sentiment refers to Sentiment > 0; posted on Thursday refers to Weekday = 'Thursday'
CREATED SQL: SELECT COUNT(TweetID) AS tweet_number FROM twitter WHERE Sentiment > 0 AND Weekday = 'Thursday'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: What is the text of the tweet that got the most `likes`? got the most like refers to Max(Likes)
CREATED SQL: SELECT text FROM twitter WHERE Likes = ( SELECT MAX( Likes) FROM twitter )
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Please list all the cities in Argentina. ""Argentina"" is the Country
CREATED SQL: SELECT City FROM location WHERE City IS NOT NULL AND Country = 'Argentina'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: How many tweets in total were posted by a user in Argentina? ""Argentina"" is the Country
CREATED SQL: SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.Country = 'Argentina' LIMIT 1
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Users in which city of Argentina post the most tweets? ""Argentina"" is the Country; post the most tweets refers to Max(Count(TweetID))
CREATED SQL: SELECT T2.City FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.Country = 'Argentina' GROUP BY T2.City ORDER BY COUNT(T1.TweetID) DESC LIMIT 1
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Among all the tweets that are reshared, how many of them are posted by a user in Buenos Aires? reshared refers to Isreshare = 'TRUE'; 'Buenos Aires' is the City
CREATED SQL: SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.City = 'Buenos Aires' AND T1.IsReshare = 'TRUE'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Please list the texts of all the tweets posted from Buenos Aires with a positive sentiment. ""Buenos Aires"" is the City; positive sentiment refers to Sentiment > 0
CREATED SQL: SELECT T1.text FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.Sentiment > 0 AND T2.City = 'Buenos Aires'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: From which country is the tweet with the most likes posted? tweet with the most likes refers to Max(Likes)
CREATED SQL: SELECT T2.Country FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID ORDER BY T1.Likes DESC LIMIT 1
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Users in which country has posted more numbers of positive tweets, Argentina or Australia? ""Argentina"" and ""Australia"" are both Country; positive tweets refers to Sentiment > 0; Country posted more number of tweets refers to Country where Max(Count(TweetID))
CREATED SQL: SELECT T2.Country FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.Country IN ('Argentina', 'Australia') AND T1.Sentiment > 0 GROUP BY T2.Country ORDER BY COUNT(T1.TweetID) DESC LIMIT 1
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Among all the tweets posted from Buenos Aires, how many of them were posted on Thursdays? ""Buenos Aires"" is the City; posted on Thursday refers to Weekday = 'Thursday'
CREATED SQL: SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.City = 'Buenos Aires' AND T1.Weekday = 'Thursday'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Among all the users that have posted a tweet with over 1000 likes, how many of them are male? over 1000 likes refers to Likes > 1000; 'Male' is the Gender of user
CREATED SQL: SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.Likes > 10 AND T2.Gender = 'Male'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: How many tweets have the male users posted in total? male users refers to Gender = 'Male'; total tweets refers to Count(TweetID)
CREATED SQL: SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: What is the gender of the user who has posted the tweet that is seen by the most number of unique users? seen by the most number of unique users refers to Max(Reach)
CREATED SQL: SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID ORDER BY T1.Reach DESC LIMIT 1
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: How many tweets are posted by male users in Argentina? ""Argentina"" is the Country; male user refers to Gender = 'Male'
CREATED SQL: SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID INNER JOIN user AS T3 ON T1.UserID = T3.UserID WHERE T3.Gender = 'Male' AND T2.Country = 'Argentina'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Please list the texts of all the tweets posted by male users from Buenos Aires. ""Buenos Aires"" is the City; male user refers to Gender = 'Male'
CREATED SQL: SELECT T1.text FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID INNER JOIN user AS T2 ON T2.UserID = T1.UserID INNER JOIN user AS T3 ON T1.UserID = T3.UserID WHERE T2.City = 'Buenos Aires' AND T3.Gender = 'Male'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: What is the average number of tweets posted by the users in a city in Argentina? ""Argentina"" is the Country; average number of tweets in a city = Divide (Count(TweetID where Country = 'Argentina'), Count (City))
CREATED SQL: SELECT SUM(CASE WHEN T2.City = 'Buenos Aires' THEN 1.0 ELSE 0 END) / COUNT(T1.TweetID) AS avg FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.Country = 'Argentina'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Among all the tweets with a positive sentiment, what is the percentage of those posted by a male user? positive sentiment refers to Sentiment > 0; male user refers to Gender = 'Male'; percentage = Divide (Count(TweetID where Gender = 'Male'), Count (TweetID)) * 100
CREATED SQL: SELECT SUM(CASE WHEN T2.Gender = 'Male' THEN 1.0 ELSE 0 END) / COUNT(T1.TweetID) AS per FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.Sentiment > 0
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Give the number of users who do not show their genders. do not show their gender refers to Gender = 'Unknown'
CREATED SQL: SELECT COUNT(UserID) AS user_number FROM user WHERE Gender = 'Unknown'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: State the number of states in the United Kingdom. ""United Kingdom"" is the Country
CREATED SQL: SELECT COUNT(State) AS State_number FROM location WHERE Country = 'United Kingdom'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: What is the code of Gwynedd State? code refers to StateCode
CREATED SQL: SELECT DISTINCT StateCode FROM location WHERE State = 'Gwynedd'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Give the location id of West Sussex State.
CREATED SQL: SELECT DISTINCT LocationID FROM location WHERE State = 'West Sussex'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: How many reshared tweets are there in Texas? reshared tweet refers to IsReshare = 'TRUE'; 'Texas' is the State
CREATED SQL: SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.State = 'Texas' AND T1.IsReshare = 'TRUE'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: For the tweet which got a reach number of 547851, which country did it come from? reach number of 547851 refers to Reach = 547851
CREATED SQL: SELECT T2.Country FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.Reach = 547851
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: State the number of positive tweets from Ha Noi. positive tweet refers to Sentiment > 0; 'Ha Noi' is the State
CREATED SQL: SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.Sentiment > 0 AND T2.State = 'Ha Noi'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Show the text of the tweet with the highest klout from Connecticut. highest klout refers to Max(Klout); 'Connecticut' is the State
CREATED SQL: SELECT T1.text FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.State = 'Connecticut' ORDER BY T1.Klout DESC LIMIT 1
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: How many female Twitter users are there from Wisconsin? female users refers to Gender = 'Female'; 'Wisconsin' is the State
CREATED SQL: SELECT COUNT(T1.Likes) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID INNER JOIN user AS T3 ON T3.UserID = T1.UserID WHERE T2.State = 'Wisconsin' AND T3.Gender = 'Female'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: What is the gender of the user who tweeted `tw-715909161071091712`? ""tw-715909161071091712"" is the TweetID
CREATED SQL: SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.TweetID = 'tw-715909161071091712'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Give the name of the city of the user who tweeted `One of our favorite stories is @FINRA_News's move to the cloud with AWS Enterprise Support! https://amp.twimg.com/v/991837f1-4815-4edc-a88f-e68ded09a02a`. ""One of our favorite stories is @FINRA_News's move to the cloud with AWS Enterprise Support! https://amp.twimg.com/v/991837f1-4815-4edc-a88f-e68ded09a02a"" is the text
CREATED SQL: SELECT T2.City FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.text = 'One of our favorite stories is @FINRA_News''s move to the cloud with AWS Enterprise Support! https://amp.twimg.com/v/991837f1-4815-4edc-a88f-e68ded09a02a'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: What is the gender of the user whose tweet got 535 retweets? tweet got 535 retweets refers to RetweetCount = 535
CREATED SQL: SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.RetweetCount = 535
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Give the gender of the user who made the highest klout tweet on Wednesdays. highest klout refers to Max(Klout); 'Wednesday' is the Weekday
CREATED SQL: SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.Weekday = 'Wednesday' ORDER BY T1.Klout DESC LIMIT 1
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: For the tweet which got the most likes, state the gender of the user who tweeted it. most likes refers to Max(Likes)
CREATED SQL: SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID ORDER BY T1.Likes DESC LIMIT 1
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: State the number of tweets from Michigan on Thursdays. ""Michigan"" is the State; 'Thursday' is the Weekday; number of tweets refers to Count(TweetID)
CREATED SQL: SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.Weekday = 'Thursday' AND T2.State = 'Michigan'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Which state was the tweet `tw-685681052912873473` from? Give the state code. tw-685681052912873473' is the TweetID
CREATED SQL: SELECT T2.StateCode FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.TweetID = 'tw-685681052912873473'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: What is the percentage of male Twitter users from Florida? ""Florida"" is the State; male user refers to Gender = 'Male'; percentage = Divide (Count(UserID where Gender = 'Male'), Count (UserID)) * 100
CREATED SQL: SELECT SUM(CASE WHEN T3.Gender = 'Male' THEN 1.0 ELSE 0 END) / COUNT(T1.TweetID) AS percentage FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID INNER JOIN user AS T3 ON T3.UserID = T1.UserID WHERE T2.State = 'Florida'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: What is the percentage of the tweets from California are positive? ""California"" is the State; positive tweet refers to Sentiment > 0; percentage = Divide (Count(TweetID where Sentiment > 0), Count (TweetID)) * 100
CREATED SQL: SELECT SUM(CASE WHEN T1.Sentiment > 0 THEN 1.0 ELSE 0 END) / COUNT(T1.TweetID) AS percentage FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE State = 'California'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: What is the day of the week that tweet with ID tw-682712873332805633 was posted? ""tw-682712873332805633"" is the TweetID; day of the week refers to Weekday
CREATED SQL: SELECT Weekday FROM twitter WHERE TweetID = 'tw-682712873332805633'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: How many unique users have seen tweet with text `Happy New Year to all those AWS instances of ours!`? ""Happy New Year to all those AWS instances of ours!"" is the text; seen unique users refers to Reach
CREATED SQL: SELECT Reach FROM twitter WHERE text = 'Happy New Year to all those AWS instances of ours!'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Count the total number of tweet IDs in `en`. ""en"" is the language and refers to Lang = 'en'
CREATED SQL: SELECT COUNT(DISTINCT TweetID) FROM twitter WHERE Lang = 'en'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Is 3751 the location ID for tweet with ID tw-682714048199311366? ""tw-682714048199311366"" is the TweetID
CREATED SQL: SELECT LocationID FROM twitter WHERE TweetID = 'tw-682714048199311366'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: How many tweets have been posted on Wednesday? ""Wednesday"" is the Weekday
CREATED SQL: SELECT COUNT(TweetID) FROM twitter WHERE Weekday = 'Wednesday'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: List down all of the texts posted on Twitter on Thursday. ""Thursday"" is the Weekday
CREATED SQL: SELECT text FROM twitter WHERE Weekday = 'Thursday'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: What is the gender of the user who posted a tweet with ID tw-682714583044243456? ""tw-682714583044243456"" is the TweetID
CREATED SQL: SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.TweetID = 'tw-682714583044243456'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: List down the text of tweets posted by unknown gender users. unknown gender user refers to Gender = 'Unknown'
CREATED SQL: SELECT T1.text FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Unknown'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Calculate the total number of male tweet IDs. ""Male"" is the Gender
CREATED SQL: SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: What gender of users posted the most tweets in `en`? ""en"" is the language and refers to Lang = 'en'; most tweet in 'en' refers to Max(Count(text where Lang = 'en'))
CREATED SQL: SELECT T.Gender FROM ( SELECT T2.Gender, COUNT( text) AS num FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.Lang = 'en' GROUP BY T2.Gender ) T ORDER BY T.num DESC LIMIT 1
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: What gender of users retweet more than 30 times? retweet more than 30 times refers to RetweetCount > 30
CREATED SQL: SELECT DISTINCT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.RetweetCount > 30
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: How many female users reshared their tweets? female users refers to Gender = 'Female'; reshare refers to IsReshare = 'TRUE'
CREATED SQL: SELECT COUNT(T1.UserID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Female' AND T1.IsReshare = 'TRUE'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Which country's tweets collected the most likes? country collected the most likes refers to Country where Max(Sum(Likes))
CREATED SQL: SELECT T.Country FROM ( SELECT T2.Country, SUM(T1.Likes) AS num FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID GROUP BY T2.Country ) T ORDER BY T.num DESC LIMIT 1
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Tweet with ID tw-682723090279841798 was posted from which country? ""tw-682723090279841798"" is the TweetID
CREATED SQL: SELECT T2.Country FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.TweetID = 'tw-682723090279841798'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: List down all the tweet text posted from Australia. ""Australia"" is the Country
CREATED SQL: SELECT T1.text FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.Country = 'Australia'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Write down the tweet text posted from Rawang, Selangor, Malaysia. ""Rawang"" is the City; ""Selangor"" is the State; ""Malaysia"" is the Country
CREATED SQL: SELECT T1.text FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.City = 'Rawang' AND T2.State = 'Selangor' AND T2.Country = 'Malaysia'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Tweets that were posted from Brazil are in what languague? ""Brazil"" is the Country; language refers to Lang
CREATED SQL: SELECT DISTINCT T1.Lang FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.Country = 'Brazil'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: State the country where the most positive sentiment tweets were posted. country with the most positive sentiment tweet refers to Country where Max(Count(Sentiment > 0))
CREATED SQL: SELECT T.Country FROM ( SELECT T2.Country, SUM(T1.Sentiment) AS num FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.Sentiment > 0 GROUP BY T2.Country ) T ORDER BY T.num DESC LIMIT 1
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Calculate the total likes collected by tweets in `ru` posted by male users. 'ru' refers to Lang = 'ru'; male user refers to Gender = 'Male'
CREATED SQL: SELECT SUM(T1.Likes) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.Lang = 'ru' AND T2.Gender = 'Male'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Calculate the average number of male users who posted tweets in a week. male user refers to Gender = 'Male'; average tweet in a week per user refers to Divide ( Divide(Count(TweetID), Count (UserID)), Divide(31, 7))
CREATED SQL: SELECT COUNT(DISTINCT T1.TweetID) / COUNT(DISTINCT T1.UserID) / 7 AS avg FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male' AND T1.Day BETWEEN 1 AND 31
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: How many tweets have a klout of over 50? klout of over 50 refers to Klout > 50
CREATED SQL: SELECT COUNT(DISTINCT TweetID) FROM twitter WHERE Klout > 50
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Please list the texts of all the tweets that are not in English. not in English refers to Lang <> en'
CREATED SQL: SELECT text FROM twitter WHERE Lang != 'en'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Please give the user ID of the user who has posted the most tweets. users with the most tweet refers to UserID where Max(Count (TweetID))
CREATED SQL: SELECT UserID FROM twitter GROUP BY UserID ORDER BY COUNT(DISTINCT TweetID) DESC LIMIT 1
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Among all the tweets posted on Mondays, how many of them are reshared? ""Monday"" is the Weekday; reshare refers to IsReshare = 'TRUE'
CREATED SQL: SELECT COUNT(DISTINCT TweetID) FROM twitter WHERE Weekday = 'Monday' AND IsReshare = 'TRUE'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Please list the texts of the top 3 tweets with the most number of unique users seeing the tweet. the most number of unique users seeing refers to Max(Reach)
CREATED SQL: SELECT text FROM twitter ORDER BY Reach DESC LIMIT 3
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: How many reshared tweets have over 100 likes? over 100 likes refers to Likes > 100; reshare tweet refers to IsReshare = 'TRUE'
CREATED SQL: SELECT COUNT(DISTINCT TweetID) FROM twitter WHERE IsReshare = 'TRUE' AND Likes > 100
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: What is the total number of tweets sent by male users on Mondays? male user refers to Gender = 'Male; 'Monday' is the Weekday; total number of tweet refers to Count (TweetID)
CREATED SQL: SELECT COUNT(DISTINCT T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male' AND T1.Weekday = 'Monday'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: What is the gender of the user who has posted the tweet that got the most likes? tweet got the most likes refers to Max(Likes)
CREATED SQL: SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID ORDER BY T1.Likes DESC LIMIT 1
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Please list the texts of all the tweets in French posted by male users. ""French"" is the language and refers to Lang = 'fr'; male user refers to Gender = 'Male'
CREATED SQL: SELECT T1.text FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male' AND T1.Lang = 'fr'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: How many tweets in French were posted from Australia? ""French"" is the language and refers to Lang = 'fr'; 'Australia' is the Country
CREATED SQL: SELECT COUNT(DISTINCT T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.Lang = 'fr' AND T2.Country = 'Australia'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Among all the tweets with a positive sentiment, how many of them were posted by male users in Australia? tweet with positive sentiment refers to Sentiment > 0; male user refers to Gender = 'Male'; 'Australia' is the Country
CREATED SQL: SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID INNER JOIN user AS T3 ON T3.UserID = T1.UserID WHERE T2.Country = 'Australia' AND T3.Gender = 'Male' AND T1.Sentiment > 0
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: How many more tweets with a positive sentiment than the tweets with a neutral sentiment were posted by male users? positive sentiment tweet refers to Sentiment > 0; neutral sentiment refers to Sentiment = 0; male user refers to Gender = 'Male'; difference = Subtract (Count (TweetID where Sentiment > 0), Count (TweetID where Sentiment = 0))
CREATED SQL: SELECT SUM(CASE WHEN T1.Sentiment > 0 THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.Sentiment = 0 THEN 1 ELSE 0 END) AS diff FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: From which city was the tweet with the most number of retweets posted? tweet with most number of retweet post refers to Max(RetweetCount)
CREATED SQL: SELECT T2.City FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID ORDER BY T1.RetweetCount DESC LIMIT 1
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: From which city were more tweets posted, Bangkok or Chiang Mai? ""Bangkok"" and ""Chiang Mai"" are both City
CREATED SQL: SELECT SUM(CASE WHEN T2.City = 'Bangkok' THEN 1 ELSE 0 END) AS bNum , SUM(CASE WHEN T2.City = 'Chiang Mai' THEN 1 ELSE 0 END) AS cNum FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.City IN ('Bangkok', 'Chiang Mai')
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Among the tweets posted from Santa Fe state in Argentina, how many of them were posted on 31st? ""Sante Fe"" is the State; ""Argentina"" is the Country; posted on 31st refers to Day = 31
CREATED SQL: SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.Day = 31 AND T2.State = 'Santa' AND T2.Country = 'Argentina'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Please list the top 3 cities with the most number of tweets posted in Canada. ""Canada"" is the Country; city with most number of tweets refers to City where Max(Count(TweetID))
CREATED SQL: SELECT T.City FROM ( SELECT T2.City, COUNT(T1.TweetID) AS num FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.Country = 'Canada' GROUP BY T2.City ) T ORDER BY T.num DESC LIMIT 3
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Please list all the cities from where tweets with neutral sentiments were posted. neutral sentiment refers to Sentiment = 0
CREATED SQL: SELECT DISTINCT T2.City FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE Sentiment = 0
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Among all the tweets sent by male users in Argentina, what is the text of the one with the most number of likes? male user refers to Gender = 'Male'; 'Argentina' is the Country; most number of likes refers to Max(Likes)
CREATED SQL: SELECT T2.text FROM user AS T1 INNER JOIN twitter AS T2 ON T1.UserID = T2.UserID INNER JOIN location AS T3 ON T2.LocationID = T3.LocationID WHERE T3.Country = 'Argentina' AND T1.Gender = 'Male' ORDER BY T2.Likes DESC LIMIT 1
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: What is the average number of likes for a tweet posted by a male user on Mondays? male user refers to Gender = 'Male'; 'Monday' is the Weekday; average number of likes = Divide (Sum(Likes), Count(TweetID))
CREATED SQL: SELECT SUM(T1.Likes) / COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male' AND T1.Weekday = 'Monday'
END OF QUESTION"
social_media,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
LocationID integer,
Country text,
State text,
StateCode text,
City text,
PRIMARY KEY (LocationID),
);
CREATE TABLE user (
UserID text,
Gender text,
PRIMARY KEY (UserID),
);
CREATE TABLE twitter (
TweetID text,
Weekday text,
Hour integer,
Day integer,
Lang text,
IsReshare text,
Reach integer,
RetweetCount integer,
Likes integer,
Klout integer,
Sentiment real,
text text,
LocationID integer,
UserID text,
PRIMARY KEY (TweetID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (UserID) REFERENCES user(UserID),
);
---------------------
QUESTION: Tweets posted from which city has a higher number of average likes, Bangkok or Chiang Mai? ""Bangkok"" and ""Chiang Mai"" are both City; average number of like = Divide (Sum(Likes), Count(TweetID))
CREATED SQL: SELECT SUM(CASE WHEN T2.City = 'Bangkok' THEN Likes ELSE NULL END) / COUNT(CASE WHEN T2.City = 'Bangkok' THEN 1 ELSE 0 END) AS bNum , SUM(CASE WHEN City = 'Chiang Mai' THEN Likes ELSE NULL END) / COUNT(CASE WHEN City = 'Chiang Mai' THEN TweetID ELSE NULL END) AS cNum FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.City IN ('Bangkok', 'Chiang Mai')
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Which course is more difficult, Intro to BlockChain or Computer Network? diff refers to difficulty; diff is higher means the course is more difficult;
CREATED SQL: SELECT name FROM course WHERE name = 'Intro to BlockChain' OR name = 'Computer Network' ORDER BY diff DESC LIMIT 1
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Please list the names of the courses that are less important than Machine Learning Theory. lower credit means less important;
CREATED SQL: SELECT name FROM course WHERE credit < ( SELECT credit FROM course WHERE name = 'Machine Learning Theory' )
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: How many professors are more popular than Zhou Zhihua? higher popularity means the professor is more popular;
CREATED SQL: SELECT COUNT(prof_id) FROM prof WHERE popularity > ( SELECT popularity FROM prof WHERE first_name = 'Zhihua' AND last_name = 'Zhou' )
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: What is the phone number of Kerry Pryor?
CREATED SQL: SELECT phone_number FROM student WHERE l_name = 'Pryor' AND f_name = 'Kerry'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Which professor advised Faina Mallinar to become a research assistant? Please give his or her full name. research assistant refers to the student who serves for research where the abbreviation is RA; full name refers to f_name and l_name;
CREATED SQL: SELECT T1.first_name, T1.last_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Faina' AND T3.l_name = 'Mallinar'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: How many research assistants does Sauveur Skyme have? research assistant refers to the student who serves for research where the abbreviation is RA;
CREATED SQL: SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.first_name = 'Sauveur' AND T2.last_name = 'Skyme'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Please list the full names of all the students who are research assistants with the highest research capability. research assistant refers to the student who serves for research where the abbreviation is RA; the highest research capability refers to capability = 5; full name refers to f_name and l_name;
CREATED SQL: SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN RA AS T2 ON T1.student_id = T2.student_id WHERE T2.capability = 5
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: How many research assistants of Ogdon Zywicki have an average salary? research assistant refers to the student who serves for research where the abbreviation is RA; average salary refers to salary = 'med';
CREATED SQL: SELECT COUNT(T1.prof_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.first_name = 'Ogdon' AND T1.salary = 'med' AND T2.last_name = 'Zywicki'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Please list the full names of all the students who took the course Machine Learning Theory. full name refers to f_name and l_name;
CREATED SQL: SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Machine Learning Theory'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Among the students who got a B in the course Machine Learning Theory, how many of them have a gpa of over 3? B refers to grade; GPA is an abbreviated name of Grade Point Average where over 3 refers to gpa > 3;
CREATED SQL: SELECT COUNT(student_id) FROM registration WHERE grade = 'B' AND student_id IN ( SELECT student_id FROM student WHERE gpa > 3 AND course_id IN ( SELECT course_id FROM course WHERE name = 'Machine Learning Theory' ) )
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Please list the names of the courses taken by Laughton Antonio.
CREATED SQL: SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.f_name = 'Laughton' AND T1.l_name = 'Antonio'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Which student failed the course Intro to Database 2? Please give his or her full name. If grade is NULL, it means that this student fails to pass the course; full name refers to f_name and l_name;
CREATED SQL: SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.grade IS NULL AND T3.name = 'Intro to Database 2'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Which student is more satisfied with the course Machine Learning Theory, Willie Rechert or Laughton Antonio? sat refers to student's satisfaction degree with the course; more satisfied refers to MAX(sat);
CREATED SQL: SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE (T1.f_name = 'Laughton' OR T1.f_name = 'Willie') AND (T1.l_name = 'Antonio' OR T1.l_name = 'Rechert') AND T3.name = 'Machine Learning Theory' ORDER BY T2.sat DESC LIMIT 1
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Among the professors who have more than 3 research assistants, how many of them are male? research assistant refers to the student who serves for research where the abbreviation is RA; more than 3 research assistant refers to COUNT(student_id) > 3;
CREATED SQL: SELECT COUNT(*) FROM ( SELECT T2.prof_id FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.gender = 'Male' GROUP BY T1.prof_id HAVING COUNT(T1.student_id) > 3 )
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Among the students who took the course Machine Learning Theory, how many of them are undergraduates? UG is an abbreviated name of undergraduate student in which type = 'UG';
CREATED SQL: SELECT COUNT(T1.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Machine Learning Theory' AND T1.type = 'UG'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Which professor advised Willie Rechert to work as a research assistant? Please give his or her full name. research assistant refers to the student who serves for research where the abbreviation is RA; prof_id refers to professor’s ID; full name refers to f_name and l_name;
CREATED SQL: SELECT T1.first_name, T1.last_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Willie' AND T3.l_name = 'Rechert'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: What is the average gpa of Ogdon Zywicki's research assistants? research assistant refers to the student who serves for research where the abbreviation is RA; prof_id refers to professor’s ID; GPA is an abbreviated name of Grade Point Average where average = AVG(gpa);
CREATED SQL: SELECT SUM(T3.gpa) / COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T1.student_id = T3.student_id WHERE T2.first_name = 'Ogdon' AND T2.last_name = 'Zywicki'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: What is the average satisfying degree of the course Machine Learning Theory? sat refers to student's satisfaction degree with the course;
CREATED SQL: SELECT CAST(SUM(T1.sat) AS REAL) / COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.name = 'Machine Learning Theory'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Give the number of research postgraduate students. RPG is an abbreviated name of research postgraduate student in which type = 'RPG';
CREATED SQL: SELECT COUNT(student_id) FROM student WHERE type = 'RPG'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Which student has the highest gpa? Give the full name. GPA is an abbreviated name of Grade Point Average where highest GPA = MAX(gpa); full name refers to f_name and l_name;
CREATED SQL: SELECT f_name, l_name FROM student WHERE gpa = ( SELECT MAX(gpa) FROM student )
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: For the 3-credit course with the easiest difficulty, how many students get an ""A"" in that course? diff refers to difficulty; diff is higher means the course is more difficult in which easiest difficulty refers to diff = 1; 3-credit course refers to credit = '3'; get an ""A"" refers to grade = 'A' for the course;
CREATED SQL: SELECT COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T1.grade = 'A' AND T2.credit = '3' AND T2.diff = 1
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: How many students took the hardest course? diff refers to difficulty; diff is higher means the course is more difficult in which hardest difficulty is expressed as diff = 5;
CREATED SQL: SELECT COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.diff = 5
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Which professor is Oliy Spratling working with? Give the full name. research assistant refers to the student who serves for research where the abbreviation is RA; full name refers to f_name and l_name;
CREATED SQL: SELECT T1.first_name, T1.last_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Oliy' AND T3.l_name = 'Spratling'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: For the professor who is working with Harrietta Lydford, how is his popularity? research assistant refers to the student who serves for research where the abbreviation is RA; higher popularity means more popular; prof_id refers to professor’s ID;
CREATED SQL: SELECT T1.popularity FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Harrietta' AND T3.l_name = 'Lydford'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: How many research assistants does the female professor with the lowest teaching ability have? research assistant refers to the student who serves for research where the abbreviation is RA; professor with the lowest teaching ability refers to prof_id where teachability = '1';
CREATED SQL: SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.teachingability = '1' AND T2.gender = 'Female'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: For the professors who advise more than 2 students, which professor has a higher teaching ability? Give the full name. professor advising more than 2 students refers to COUNT(student_id) > 2; higher teachability refers to MAX(teachingability); full name refers to f_name and l_name;
CREATED SQL: SELECT T.first_name, T.last_name FROM ( SELECT T2.first_name, T2.last_name, T2.teachingability FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id GROUP BY T1.prof_id HAVING COUNT(student_id) > 2 ) T ORDER BY T.teachingability DESC LIMIT 1
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Give the grade score for Rik Unsworth in ""Computer Network"". Academic grades awarded for participation in a course are A, B, C, D and F where Grade 'A' means excellent, Grade 'B' means good, Grade 'C' means fair, Grade 'D' means poorly pass, if grade is null or empty, it means that this student fails to pass this course in which grade = NULL;
CREATED SQL: SELECT CASE grade WHEN 'A' THEN 4 WHEN 'B' THEN 3 WHEN 'C' THEN 2 ELSE 1 END AS result FROM registration WHERE student_id IN ( SELECT student_id FROM student WHERE f_name = 'Rik' AND l_name = 'Unsworth' AND course_id IN ( SELECT course_id FROM course WHERE name = 'Computer Network' ) )
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: How many courses does Alvera McQuillin take?
CREATED SQL: SELECT COUNT(T1.course_id) FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.f_name = 'Alvera' AND T2.l_name = 'McQuillin'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: State the name of research postgraduate student among Professor Zhihua Zhou's research assistants. research postgraduate student refers to type = 'RPG'; research assistant refers to the student who serves for research where the abbreviation is RA;
CREATED SQL: SELECT T3.f_name, T3.l_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T1.first_name = 'Zhihua' AND T3.type = 'RPG' AND T1.last_name = 'Zhou'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Provide the number of students enrolled in the ""Statistical Learning"" course.
CREATED SQL: SELECT COUNT(T2.student_id) FROM course AS T1 INNER JOIN registration AS T2 ON T1.course_id = T2.course_id WHERE T1.name = 'Statistical learning'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Who were the students who failed the course ""Applied Deep Learning""? Give the full name. If grade is null or empty, it means that this student fails to pass the course in which grade = NULL;
CREATED SQL: SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Applied Deep Learning ' AND T2.grade IS NULL
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Give the phone number of the only student who obtained ""A"" in the course ""Intro to BlockChain"". A refers to an excellent grade in which grade = 'A' for the course;
CREATED SQL: SELECT T1.phone_number FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Intro to BlockChain' AND T2.grade = 'A'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: What is the percentage of Professor Ogdon Zywicki's research assistants are taught postgraduate students? research assistant refers to the student who serves for research where the abbreviation is RA; taught postgraduate student refers to type = 'TPG'; DIVIDE(COUNT(student_id where type = 'TPG' and first_name = 'Ogdon', last_name = 'Zywicki'), COUNT(first_name = 'Ogdon', last_name = 'Zywicki')) as percentage;
CREATED SQL: SELECT CAST(SUM(CASE WHEN T3.type = 'TPG' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T1.student_id = T3.student_id WHERE T2.first_name = 'Ogdon' AND T2.last_name = 'Zywicki'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: What is the percentage of students who get a ""B"" in the course ""Computer Network""? DIVIDE(COUNT(student_id(grade = 'B' and name = 'Computer Network')), COUNT(student_id where name = ' Computer Network')) as percentage;
CREATED SQL: SELECT CAST(SUM(CASE WHEN T1.grade = 'B' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.name = 'Computer Network'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: How many courses have the highest difficulty? diff refers to difficulty; diff is higher means the course is more difficult in which highest difficulty is expessed as diff = 5;
CREATED SQL: SELECT COUNT(course_id) FROM course WHERE diff = 5
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: What is the full name of the professor who graduated from an Ivy League School? Ivy League school is assembled by 8 universities: Brown University, Columbia University, Cornell University, Dartmouth College, Harvard University, Princeton University, University of Pennsylvania and Yale University;
CREATED SQL: SELECT first_name, last_name FROM prof WHERE graduate_from IN ( 'Brown University',  'Columbia University',  'Cornell University',  'Dartmouth College',  'Harvard University',  'Princeton University',  'University of Pennsylvania',  'Yale University' )
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Among the most important courses, what is the name of the most difficult course? Higher credit means more important in which most important refers to MAX(credit); diff refers to difficulty; the most difficult course refers to MAX(diff);
CREATED SQL: SELECT name FROM course WHERE credit = ( SELECT MAX(credit) FROM course ) AND diff = ( SELECT MAX(diff) FROM course )
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: How many students have the highest intelligence among those taking a bachelor's degree? bachelor's degree is an undergraduate degree in which type = 'UG'; the highest intelligence refers to MAX(intelligence);
CREATED SQL: SELECT COUNT(student_id) FROM student WHERE type = 'UG' AND intelligence = ( SELECT MAX(intelligence) FROM student )
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Among the most popular professors, how many are females? the most popular professors refers to prof_id where MAX(popularity); female refers to gender;
CREATED SQL: SELECT COUNT(prof_id) FROM prof WHERE gender = 'Female' AND popularity = ( SELECT MAX(popularity) FROM prof )
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: How many research postgraduate students are there? research postgraduate student refers to type = 'RPG';
CREATED SQL: SELECT COUNT(student_id) FROM student WHERE type = 'RPG'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: How many students got an A in Applied Deep Learning? A refers to an excellent grade in which grade = 'A' for the course;
CREATED SQL: SELECT COUNT(T2.student_id) FROM course AS T1 INNER JOIN registration AS T2 ON T1.course_id = T2.course_id WHERE T2.grade = 'A' AND T1.name = 'Applied Deep Learning '
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: What are the GPAs of the unpaid Research Assistants? Unpaid Research Assistants undertake their work without payment in which salary = 'free';
CREATED SQL: SELECT T2.gpa FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'free'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Among the easiest courses, what is the name of the course where most students got an A? diff refers to difficulty; the easiest courses refers to diff = 1; A refers to an excellent grade in which grade = 'A' for the course;
CREATED SQL: SELECT T2.name FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T1.grade = 'A' AND T2.diff = 1 GROUP BY T2.name ORDER BY COUNT(T1.student_id) DESC LIMIT 1
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: How many courses does the student with the highest GPA this semester take? student with the highest GPA refers to student_id where MAX(gpa);
CREATED SQL: SELECT COUNT(course_id) FROM registration WHERE student_id IN ( SELECT student_id FROM student WHERE gpa = ( SELECT MAX(gpa) FROM student ) )
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: How many students does Ogdon Zywicki advise? Ogdon Zywicki is a professor;
CREATED SQL: SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.first_name = 'Ogdon' AND T2.last_name = 'Zywicki'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: What is the name of the course with the highest satisfaction from students? sat refers to student's satisfaction degree with the course where sat = 5 stands for the highest satisfaction;
CREATED SQL: SELECT DISTINCT T2.name FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T1.sat = 5
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: What are the names of the courses that the students with the lowest intelligence are least satisfied with? lower intelligence refers to intelligence = 1; sat refers to student's satisfaction degree with the course where least satisfaction refers to sat = 1;
CREATED SQL: SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.sat = 1 AND T1.intelligence = 1
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Which of the two courses, ""Advanced Operating System"" or ""Intro to BlockChain', did most of the students receive an A in? A refers to an excellent grade in which grade = 'A';
CREATED SQL: SELECT T2.name FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T1.grade = 'A' AND T2.name IN ('Advanced Operating System', 'Intro to BlockChain') GROUP BY T2.name ORDER BY COUNT(T1.student_id) DESC LIMIT 1
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: What is the popularity of the professor who advises the highest number of students with the highest research ability? professor with the highest research ability refers to prof_id where MAX(capability);
CREATED SQL: SELECT T2.popularity FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id GROUP BY T1.prof_id, T1.capability ORDER BY COUNT(T1.student_id) DESC, T1.capability DESC LIMIT 1
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: What is the average number of students who registered for the courses with a difficulty of 4? diff refers to difficulty; DIVIDE(COUNT(student_id where diff = 4), COUNT(course_id where diff = 4));
CREATED SQL: SELECT CAST(COUNT(T1.student_id) AS REAL) / COUNT(DISTINCT T2.course_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.diff = 4
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: How many students, who have a GPA between 3 to 4, failed a course? GPA is an abbreviated name of Grade Point Average where GPA between 3 to 4 refers to gpa BETWEEN 3 AND 4; If grade is null or empty, it means that this student fails to pass this course;
CREATED SQL: SELECT COUNT(T2.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id WHERE T2.grade IS NULL AND T1.gpa BETWEEN 3 AND 4
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: How many students taking a bachelor's degree received an A in all of the courses that they took? bachelor's degree is an undergraduate degree in which type = 'UG'; A refers to an excellent grade in which grade = 'A';
CREATED SQL: SELECT COUNT(T2.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id WHERE T2.grade = 'A' AND T1.type = 'UG'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: What is the average GPA of the students with the highest research capability and high salary? List the full names of the students. the highest research capability refers to capability = 5; high salary refers to salary = 'high'; prof_id refers to professor’s ID; GPA is an abbreviated name of Grade Point Average where average GPA refers to AVG(gpa);
CREATED SQL: SELECT AVG(T2.gpa), T2.f_name, T2.l_name FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'high' AND T1.capability = 5 GROUP BY T2.student_id
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: List the professors' IDs and students' IDs with the lowest research ability. the lowest research ability refers to MIN(capability); professor’s ID refers to prof_id;
CREATED SQL: SELECT prof_id, student_id FROM RA WHERE capability = ( SELECT MIN(capability) FROM RA )
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Name the professor who got graduation from the University of Boston. Name the professor refers to full name which includes f_name and l_name;
CREATED SQL: SELECT first_name, last_name FROM prof WHERE graduate_from = 'University of Boston'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: List the courses' IDs and students' IDs who failed to pass the course. If grade is null or empty, it means that this student fails to pass the course;
CREATED SQL: SELECT course_id, student_id FROM registration WHERE grade IS NULL OR grade = ''
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: What is the male and female ratio among the professors? DIVIDE(COUNT(prof_id where gender = 'Male'), COUNT(prof_id where gender = 'Female'));
CREATED SQL: SELECT CAST(SUM(CASE WHEN gender = 'Male' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN gender = 'Female' THEN 1 ELSE 0 END) FROM prof
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Describe the names and credits of the least difficult courses. diff refers to difficulty; the least difficult courses refer to MIN(diff);
CREATED SQL: SELECT name, credit FROM course WHERE diff = ( SELECT MIN(diff) FROM course )
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Describe the students' full names and GPAs under the supervision of the most popular professor. student's full names = f_name, l_name; most popular refers to MAX(popularity);
CREATED SQL: SELECT T3.f_name, T3.l_name, T3.gpa FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id ORDER BY T1.popularity DESC LIMIT 1
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Provide the full names and emails of unpaid research assistants. full names = f_name, l_name; research assistant refers to the student who serves for research where the abbreviation is RA; unpaid research assistant refers to salary = 'free';
CREATED SQL: SELECT T2.f_name, T2.l_name, T2.email FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'free'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: List the research assistants' full names, capabilities and GPAs who were under the supervision of Merwyn Conkay. research assistant refers to the student who serves for research where the abbreviation is RA; full names = f_name, l_name;
CREATED SQL: SELECT T3.f_name, T3.l_name, T2.capability, T3.gpa FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T1.first_name = 'Merwyn' AND T1.last_name = 'Conkay'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Describe the students' full names and grades in Intro to BlockChain course. student's full names = f_name, l_name;
CREATED SQL: SELECT T1.f_name, T1.l_name, T2.grade FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Intro to BlockChain'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Among students registered for the most difficult course, list the students' full names who got grade A. difficulty refers to diff; most difficult course refers to MAX(diff); student's full names = f_name, l_name;
CREATED SQL: SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.grade = 'A' ORDER BY T3.diff DESC LIMIT 1
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Describe the full names and graduated universities of the professors who advised Olia Rabier. full names of the professors = first_name, last_name; graduated universities of the professors refers to graduate_from;
CREATED SQL: SELECT T1.first_name, T1.last_name, T1.graduate_from FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Olia' AND T3.l_name = 'Rabier'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Name the students of the Advanced Database Systems course with the highest satisfaction. full the students = f_name, l_name; course refers to name; satisfaction refers to sat; highest satisfaction refers to MAX(sat);
CREATED SQL: SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Advanced Database Systems' ORDER BY T2.sat DESC LIMIT 1
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Calculate the GPA of the semester for Laughton Antonio. GPA of the semester = DIVIDE(SUM(MULTIPLY(credit, grade)), SUM(credit)); grade 'A' refers to gpa = 4; grade 'B' refers to gpa = 3; grade 'C' refers to gpa = 2; grade 'D' refers to gpa = 1;
CREATED SQL: SELECT CAST(SUM(T3.credit * CASE T1.grade WHEN 'A' THEN 4 WHEN 'B' THEN 3 WHEN 'C' THEN 2 WHEN 'D' THEN 1 ELSE 1 END) AS REAL) / COUNT(T3.credit) FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T1.course_id = T3.course_id WHERE T2.f_name = 'Laughton' AND T2.l_name = 'Antonio'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Provide the registered courses' names by undergraduate students with GPA of 3.7 and above. Undergraduate students refers to type = 'UG'; GPA of 3.7 and above refers to gpa > 3.7;
CREATED SQL: SELECT DISTINCT T1.f_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.type = 'UG' AND T1.gpa > 3.7
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Describe the names and capability of the students who were advised by professors from the University of Washington. names of the students = f_name, l_name;
CREATED SQL: SELECT T3.f_name, T3.l_name, T2.capability FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T1.graduate_from = 'University of Washington'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Describe the full names, emails and intelligence of the students with the highest capability and salary. full names of the students = f_name; l_name; highest capability refers to MAX(capability); highest salary refers to salary = 'high';
CREATED SQL: SELECT f_name, l_name, email, intelligence FROM student WHERE student_id IN ( SELECT student_id FROM RA WHERE salary = 'high' AND capability = ( SELECT MAX(capability) FROM RA ) )
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Mention the names and credits of course registered by the students who were under the supervision of female professor with the highest teaching ability. female refers to gender = 'Female'; highest teaching ability refers to MAX(teachingability);
CREATED SQL: SELECT T5.name, T5.credit FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T1.student_id = T3.student_id INNER JOIN registration AS T4 ON T3.student_id = T4.student_id INNER JOIN course AS T5 ON T4.course_id = T5.course_id WHERE T2.gender = 'Female' ORDER BY T2.teachingability DESC LIMIT 1
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: How many of the professors are female? female refers to gender = 'Female';
CREATED SQL: SELECT COUNT(prof_id) FROM prof WHERE gender = 'Female'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: What is the name of the most difficult course? difficulty of a course refers to diff; most difficult course refers to MAX(diff);
CREATED SQL: SELECT name FROM course WHERE diff = ( SELECT MAX(diff) FROM course )
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Among the students with a gpa of 3.1 to 3.7, how many of them are undergraduate students? gpa of 3.1 to 3.7 refers to gpa BETWEEN 3.1 AND 3.7; undergraduate students refers to type = 'UG';
CREATED SQL: SELECT COUNT(student_id) FROM student WHERE gpa BETWEEN 3.1 AND 3.7 AND type = 'UG'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: What is the credit of the course named ""Computer Vision""?
CREATED SQL: SELECT credit FROM course WHERE name = 'Computer Vision'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Give the student's ID of students with 2.5 GPA and enrolled in C for Programmers.
CREATED SQL: SELECT T2.student_id FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'C for Programmers' AND T1.gpa = 2.5
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Give the student's last name that gave the highest student satisfaction for the course ""Intro to Database 2"". student's last name refers to l_name; satisfaction refers to sat; highest satisfaction refers to MAX(sat);
CREATED SQL: SELECT T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Intro to Database 2' ORDER BY T2.sat DESC LIMIT 1
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Among the students with high salary, what is total number of students with a GPA higher than 3? high salary refers to salary = 'high'; GPA higher than 3 refers to gpa > 3;
CREATED SQL: SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'high' AND T2.gpa > 3
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Among undergraduate students, list the name of the course with the highest student satisfaction. Undergraduate students refers to type = 'UG'; satisfaction refers to sat; highest satisfaction refers to MAX(sat);
CREATED SQL: SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.type = 'UG' ORDER BY T2.sat DESC LIMIT 1
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: List the capability of research postgraduate students with an intellegence level of 4 and above. research postgraduate students refers to type = 'RPG'; intelligence level of 4 and above refers to intelligence > = 4;
CREATED SQL: SELECT T1.capability FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.type = 'RPG' AND T2.intelligence >= 4
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: In students with a grade of B, how many of them have an intellegence level of 3?
CREATED SQL: SELECT COUNT(T1.student_id) FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.grade = 'B' AND T2.intelligence = 3
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: What is the difficulty of the course in which a student with level of intellengence of 5 got an A grade? difficulty of the course refers to diff;
CREATED SQL: SELECT T3.diff FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.grade = 'A' AND T1.intelligence = 5
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Among professors with the highest popularity, how many of their students have research capability of 5? highest popularity refers to MAX(popularity); research capability refers to capability; capability = 5;
CREATED SQL: SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T1.capability = 5 ORDER BY T2.popularity DESC LIMIT 1
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: List the course's name where students acquired a grade of D.
CREATED SQL: SELECT T1.name FROM course AS T1 INNER JOIN registration AS T2 ON T1.course_id = T2.course_id WHERE T2.grade = 'D'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: What is the capability on research of the student named Alvera McQuillin? capability on research refers to capability;
CREATED SQL: SELECT T2.capability FROM student AS T1 INNER JOIN RA AS T2 ON T1.student_id = T2.student_id WHERE T1.f_name = 'Alvera' AND T1.l_name = 'McQuillin'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Of courses with 3 credit, how many students have GPA of 3.2?
CREATED SQL: SELECT COUNT(T1.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.credit = 3 AND T1.gpa = 3.2
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Among students with low salary, how many of them have a gpa of 3.5? low salary refers to salary = 'low';
CREATED SQL: SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.gpa = 3.5 AND T1.salary = 'low'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: List the student's email with grade of B in a course with difficulty greater than the 80% of average difficulty of all courses. difficulty refers to diff; course with difficulty greater than the 80% of average difficulty refers to diff > MULTIPLY(AVG(diff), 80%);
CREATED SQL: SELECT T2.email FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T1.course_id = T3.course_id WHERE T1.grade = 'B' GROUP BY T3.diff HAVING T3.diff > AVG(T3.diff) * 0.8
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Among the professors with a teachability of 3 and below, what is the percentage of their student advisees with a low salary? teachability < = 3; percentage = MULTIPLY(DIVIDE(COUNT(salary = 'low'), COUNT(salary)), 1.0);
CREATED SQL: SELECT CAST(SUM(CASE WHEN T1.salary = 'low' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.salary) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.teachingability < 3
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Find the most important and most difficult courses. most important refers to MAX(credit); most difficult refers to MAX(diff);
CREATED SQL: SELECT name FROM course WHERE credit = ( SELECT MAX(credit) FROM course ) AND diff = ( SELECT MAX(diff) FROM course )
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: What is the average teaching ability of the most popular professors? average = AVG(teachingability); most popular professor refers to MAX(popularity);
CREATED SQL: SELECT CAST(SUM(teachingability) AS REAL) / COUNT(prof_id) FROM prof WHERE popularity = ( SELECT MAX(popularity) FROM prof )
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Calculate the average satisfaction of the good students with their courses. average satisfaction = DIVIDE(SUM(sat), COUNT(course_id)); satisfaction refers to sat; good student refers to grade = 'B';
CREATED SQL: SELECT CAST(SUM(sat) AS REAL) / COUNT(course_id) FROM registration WHERE grade = 'B'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Among the students with less than four intelligence, list the full name and phone number of students with a greater than 3 GPA. intelligence < 4; full name = f_name, l_name; gpa > 3;
CREATED SQL: SELECT f_name, l_name, phone_number FROM student WHERE gpa > 3 AND intelligence < 4
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Name the students with above-average capability. name of the students = f_name, l_name; above average-capability refers to capability > AVG(capability);
CREATED SQL: SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN RA AS T2 ON T1.student_id = T2.student_id WHERE T2.capability > ( SELECT AVG(capability) FROM RA )
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: For the students with an intelligence of 5, list the full name and courses taken by them who have less than a 3 GPA. full name of the students = f_name, l_name; gpa < 3;
CREATED SQL: SELECT T1.f_name, T1.l_name, T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.intelligence = 5 AND T1.gpa < 3
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: What is the average capability of students with less than a 2.5 GPA? average capability = AVG(capability); gpa < 2.5;
CREATED SQL: SELECT CAST(SUM(T1.capability) AS REAL) / COUNT(T1.student_id) FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.gpa < 2.5
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: List the full name of the professors who advised students with intelligence 1. full name of the professors = first_name, last_name;
CREATED SQL: SELECT T1.first_name, T1.last_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.intelligence = 1
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: What is the difference in the average GPA of students who took the hardest and easiest courses? difference in the average gpa = SUBTRACT(AVG(gpa WHERE MAX(diff)), AVG(gpa where min(diff))); difficulty of the course refers to diff; hardest course refers to MAX(diff); easiest course refers to MIN(diff);
CREATED SQL: SELECT AVG(T1.gpa) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.diff IN (2, 1) GROUP BY T3.diff
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Give the full name and capability of students who failed in any courses. full name of students = f_name, l_name; failed refers to grade IS NULL;
CREATED SQL: SELECT T2.f_name, T2.l_name, T1.capability FROM RA AS T1 INNER JOIN student AS T2 ON T2.student_id = T1.student_id INNER JOIN registration AS T3 ON T2.student_id = T3.student_id WHERE T3.grade IS NULL OR T3.grade = ''
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Of the students with high salaries, how many took the computer vision course? high salaries refers to salary = 'High';
CREATED SQL: SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN registration AS T2 ON T2.student_id = T1.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.salary = 'high' AND T3.name = 'Computer Vision'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Find the full name and popularity of the professor who advises the most number of students. full name of the professor = first_name, last_name; most number of students refers to MAX(COUNT(student_id));
CREATED SQL: SELECT T1.first_name, T1.last_name, T1.popularity FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id GROUP BY T1.prof_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Please give the name of the course in which most numbers of the students got an A. Also, list the full name of the students who got an A in this course. most number of students got an A refers MAX(COUNT(student_id WHERE grade = 'A')); full name = f_name, l_name; got an A refers to grade = 'A';
CREATED SQL: SELECT T3.name, T2.f_name, T2.l_name FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T1.course_id = T3.course_id WHERE T1.grade = 'A' GROUP BY T3.name ORDER BY COUNT(T1.student_id) DESC LIMIT 1
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Calculate the difference between the average satisfaction of the students with high salaries and no salary. average satisfaction difference = SUBTRACT(AVG(sat where salary = 'high')), (AVG(sat where salary = 'free')); satisfaction refers to sat; no salary refers to salary = 'free';
CREATED SQL: SELECT AVG(T2.sat) - ( SELECT AVG(T2.sat) FROM RA AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'free' ) AS diff FROM RA AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'high'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Find the university from which the professor who advised most undergraduate students graduated. university from which the professor graduated refers to graduate_from; undergraduate students refers to type = 'UG';
CREATED SQL: SELECT T1.graduate_from FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.type = 'UG' GROUP BY T1.prof_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Among the professors with more than average teaching ability, list the full name and email address of the professors who advise two or more students. more than average teaching ability refers to teachingability > AVG(teachingability); full_name of the professor = first_name, last_name; email address of the professor refers to email; advises two or more students refers to COUNT(student_id) > = 2;
CREATED SQL: SELECT T2.first_name, T2.last_name, T2.email FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.teachingability > ( SELECT AVG(teachingability) FROM prof ) GROUP BY T2.prof_id HAVING COUNT(T1.student_id) >= 2
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: What percentage of students are highly satisfied with the Intro to Database 2 course? percentage = MULTIPLY(DIVIDE(COUNT(MAX(sat)), (COUNT(student_id))), 1.0); highly satisfied refers to MAX(sat);
CREATED SQL: SELECT CAST(( SELECT COUNT(*) FROM course WHERE name = 'Intro to Database 2' AND course_id IN ( SELECT course_id FROM registration WHERE sat = ( SELECT MAX(sat) FROM registration ) ) ) AS REAL) * 100  / COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.name = 'Intro to Database 2'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: What is the first and last name of students with highest gpa? first name refers of students refers to f_name; last name of students refers to l_name; highest gpa refers to MAX(gpa);
CREATED SQL: SELECT f_name, l_name FROM student WHERE gpa = ( SELECT MAX(gpa) FROM student )
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Among professors with the highest teachability, how many of their students have high salary? highest teachability refers to MAX(teachability); high salary refers to salary = 'high';
CREATED SQL: SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T1.salary = 'high' ORDER BY T2.teachingability DESC LIMIT 1
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: What is the salary range of the student with an email of grosellg@hku.hk? salary range refers to salary;
CREATED SQL: SELECT T1.salary FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.email = 'grosellg@hku.hk'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Among students that gave satisfaction of value 4 for the course named ""Statistical Learning"", how many of them have a gpa of 3.8? satisfaction refers to sat;

sat = 4; gpa = 3.8
CREATED SQL: SELECT COUNT(T1.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Statistical learning' AND T2.sat = 4 AND T1.gpa = 3.8
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Among courses with difficulty of 3, how many students have intellegence level of 2? difficulty of 3 refers to diff = 3; intelligence = 2
CREATED SQL: SELECT COUNT(T1.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.diff = 3 AND T1.intelligence = 2
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: List the student's first and last name that got a C in the course named ""Applied Deep Learning"". student's first name refers to f_name; student's last name refers to l_name; got a C refers to grade = 'C';
CREATED SQL: SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Applied Deep Learning ' AND T2.grade = 'C'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Among research postgraduate students, give the name of the course with the student satisfaction value of 1. research postgraduate students refers to type = 'RPG'; name of the course refers to name; satisfaction refers to sat; sat = 1;
CREATED SQL: SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.sat = 1 AND T1.type = 'RPG'
END OF QUESTION"
cs_semester,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
name text,
credit integer,
diff integer,
PRIMARY KEY (course_id),
);
CREATE TABLE prof (
prof_id integer,
gender text,
first_name text,
last_name text,
email text,
popularity integer,
teachingability integer,
graduate_from text,
PRIMARY KEY (prof_id),
);
CREATE TABLE RA (
student_id integer,
capability integer,
prof_id integer,
salary text,
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (prof_id) REFERENCES prof(prof_id),
);
CREATE TABLE registration (
course_id integer,
student_id integer,
grade text,
sat integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (student_id) REFERENCES student(student_id),
);
CREATE TABLE student (
student_id integer,
f_name text,
l_name text,
phone_number text,
email text,
intelligence integer,
gpa real,
type text,
PRIMARY KEY (student_id),
);
---------------------
QUESTION: Among the students with a capability below 3, what is the difference of undergraduate students from research postgraduate students? capability < 3; difference = subtract(count(type = 'UG')), (count(type = 'RPG')); undergraduate students refers to type = 'UG'; research postgraduate students refers to type = 'RPG';
CREATED SQL: SELECT SUM(CASE WHEN T2.type = 'UG' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.type = 'RPG' THEN 1 ELSE 0 END) FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.capability < 3
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: What is the average number of students for each advisor? students refers to advisedBy.p_id; advisor refers to p_id_dummy; average number = avg(count(advisedBy.p_id))
CREATED SQL: SELECT CAST(COUNT(p_id) AS REAL) / COUNT(DISTINCT p_id_dummy) AS avgnum FROM advisedBy GROUP BY p_id_dummy
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: How many professors are teaching course ID 18? professors refers to taughtBy.p_id; course ID 18 refers to taughtBy.course_id
CREATED SQL: SELECT COUNT(DISTINCT p_id) FROM taughtBy WHERE course_id = 18
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: List all the course IDs for professional or master/graduate courses. professional or master/graduate courses refers to courseLevel = 'Level_500'
CREATED SQL: SELECT course_id FROM course WHERE courseLevel = 'Level_500'
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: How many courses are there for basic or medium undergraduate courses? basic or medium undergraduate courses refers to courseLevel = 'Level_300'; courses refers to course.course_id
CREATED SQL: SELECT COUNT(course_id) FROM course WHERE courseLevel = 'Level_300'
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: List the ID of all professors who are not faculty member along with the courses taught by him/her. ID of all professors refers to person.p_id where professor = 1; not faculty member refers to hasPosition = 0; courses refers to taughtBy.course_id
CREATED SQL: SELECT T2.p_id, T2.course_id FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id WHERE T1.professor = 1 AND T1.hasPosition <> 0
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Provide the ID of professors who are teaching high-level or harder undergraduate course. ID of professors refers to taughtBy.p_id; high-level or harder undergraduate course refers to courseLevel = 'Level_400'
CREATED SQL: SELECT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_400'
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: What are the courses taught by the advisors who gave advice to student with ID 376? courses refers to course_id; advisors refers to p_id_dummy and taughtBy.p_id; student with ID 376 refers to advisedBy.p_id = 376
CREATED SQL: SELECT T3.course_id FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id INNER JOIN taughtBy AS T3 ON T2.p_id = T3.p_id WHERE T1.p_id = 141
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Name the advisors for students in Year 3 of the program. advisors refers to p_id_dummy; students in Year 3 of the program refers to yearsInProgram = 'Year_3'
CREATED SQL: SELECT T1.p_id FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.yearsInProgram = 'Year_3'
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Which level of courses is taught by professor ID 297? professor ID 297 refers to taughtBy.p_id = 297
CREATED SQL: SELECT T1.courseLevel FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T2.p_id = 297
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: What level is course 165? List the professors who teach the course. course 165 refers to course_id = 165; professors refers to taughtBy.p_id
CREATED SQL: SELECT T1.courseLevel, T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T2.course_id = 165
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: List the ID and years in program for students taught by advisor with ID 5. advisor with ID 5 refers to p_id_dummy = 5
CREATED SQL: SELECT T1.p_id, T2.yearsInProgram FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T1.p_id_dummy = 5
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: State the courses and level of courses by professors who are faculty employees. professors who are faculty employees refers to professor = 1; faculty employees refers to hasPosition = 'Faculty_eme'
CREATED SQL: SELECT T3.course_id, T3.courseLevel FROM taughtBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T1.course_id WHERE T2.hasPosition = 'Faculty_eme'
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Find the ID of advisor of student ID 80 and state the level of courses taught by him/her. ID of advisor refers to p_id_dummy; student ID 80 refers to advisedBy.p_id = 80; level of courses refers to courseLevel
CREATED SQL: SELECT T1.p_id_dummy, T2.courseLevel FROM advisedBy AS T1 INNER JOIN course AS T2 ON T1.p_id = T2.course_id INNER JOIN taughtBy AS T3 ON T2.course_id = T3.course_id WHERE T1.p_id = 80
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Provide the ID of professors who teach in both harder undergraduate course and master/graduate courses. harder undergraduate course refers to courseLevel = 'Level_400'; master/graduate courses refers to courseLevel = 'Level_500'; ID of professors refers to taughtBy.p_id
CREATED SQL: SELECT DISTINCT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_400' OR T1.courseLevel = 'Level_500'
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Who are the professors who gave advice to students in the 12th years of program? professors refers to p_id_dummy; 12th years of program refers to yearsInProgram = 'Year_12'
CREATED SQL: SELECT T1.p_id_dummy FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.yearsInProgram = 'Year_12'
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Which are the courses with the most number of professors? State the course ID and the level of the course. courses refers taughtBy.course_id; most number of professors  refers to max(count(taughtBy.p_id)); level of the course refers to courseLevel
CREATED SQL: SELECT T1.course_id, T1.courseLevel FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id, T1.courseLevel ORDER BY COUNT(T1.course_id) DESC LIMIT 1
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: How many basic and medium undergraduate courses are there? basic and medium undergraduate courses refers to courseLevel = 'Level_300' and courses refers to course.course_id
CREATED SQL: SELECT COUNT(*) FROM course WHERE courseLevel = 'Level_300'
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: How many people teaches course no.11? people refers to taughtBy.p_id; course no.11 refers to course_id = 11
CREATED SQL: SELECT COUNT(*) FROM taughtBy WHERE course_id = 11
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Which course has more teachers, course no.16 or course no.18? teachers refers to taughtBy.p_id; course no.16 refers to course_id = 16; course no.18 refers to course_id = 18
CREATED SQL: SELECT course_id FROM taughtBy WHERE course_id = 11 OR course_id = 18 GROUP BY course_id ORDER BY COUNT(course_id) DESC LIMIT 1
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: How many teachers are faculty employees? teachers refers to professor = 1; faculty employees refers to hasPosition = 'Faculty_eme'
CREATED SQL: SELECT COUNT(*) FROM person WHERE hasPosition = 'Faculty_eme'
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Please list the IDs of the teachers who have advised more than 4 others to teach. teachers refers to p_id_dummy; have advised more than 4 others refers to count(advisedBy.p_id) > 4
CREATED SQL: SELECT p_id_dummy FROM advisedBy GROUP BY p_id_dummy HAVING COUNT(p_id_dummy) > 4
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: How many basic or medium undergraduate courses are taught by a professor? basic or medium undergraduate courses refers to courseLevel = 'Level_300'; professor refers to professor = 1
CREATED SQL: SELECT COUNT(*) FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id INNER JOIN person AS T3 ON T3.p_id = T2.p_id WHERE T1.courseLevel = 'Level_300' AND T3.professor = 1
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Please list the IDs of all the faculty employees who teaches a basic or medium undergraduate course. faculty employees refers to hasPosition = 'Faculty_eme'; basic or medium undergraduate course refers to courseLevel = 'Level_300'
CREATED SQL: SELECT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id INNER JOIN person AS T3 ON T3.p_id = T2.p_id WHERE T1.courseLevel = 'Level_300' AND T3.hasPosition = 'Faculty_eme'
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Is the teacher who teaches course no.9 a faculty member? teacher refers to taughtBy.p_id; course no.9 refers to taughtBy.course_id = 9; faculty member refers to hasPosition ! = 0
CREATED SQL: SELECT T2.hasPosition FROM taughtBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T1.course_id = 9
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Please list the levels of the all courses taught by teacher no.79. levels of the all courses refers to courseLevel; teacher no.79 refers to taughtBy.p_id = 79
CREATED SQL: SELECT T1.courseLevel FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T2.p_id = 79
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Please list the IDs of the advisors of the students who are in the 5th year of their program. IDs of the advisors refers to p_id_dummy; in the 5th year of their program refers to yearsInProgram = 'Year_5'
CREATED SQL: SELECT T1.p_id_dummy FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.yearsInProgram = 'Year_5'
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: How many students are advised to teach by a professor teaching basic or medium undergraduate courses? students refers to advisedBy.p_id; professor refers to p_id_dummy and taughtBy.p_id and professor = 1; basic or medium undergraduate courses refers to courseLevel = 'Level_300'
CREATED SQL: SELECT COUNT(DISTINCT T4.p_id) FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T2.course_id INNER JOIN advisedBy AS T4 ON T4.p_id = T1.p_id WHERE T1.professor = 1 AND T3.courseLevel = 'Level_300'
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Among the courses that are basic or medium undergraduate courses, how many of them are taught by a faculty member? courses that are basic or medium undergraduate courses refers to courseLevel = 'Level_300'; faculty member refers to hasPosition ! = 0
CREATED SQL: SELECT COUNT(*) FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id INNER JOIN person AS T3 ON T2.p_id = T3.p_id WHERE T3.professor = 1 AND T1.courseLevel = 'Level_300'
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: For the professor who advised student no.6, please list the IDs of the courses he or she teaches. professor refers to p_id_dummy and professor = 1; student no.6 refers to advisedBy.p_id = 6; IDs of the courses refers to taughtBy.course_id
CREATED SQL: SELECT T2.course_id FROM taughtBy AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id INNER JOIN advisedBy AS T3 ON T3.p_id = T1.p_id WHERE T1.p_id = 9
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: What is the level of the course with the most number of teachers? level of the course refers to courseLevel; course with most number of teachers refers to course_id = max(count(taughtBy.p_id))
CREATED SQL: SELECT T1.courseLevel FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY COUNT(T2.p_id) DESC LIMIT 1
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Please list the IDs of the professors that teaches more than 3 courses. IDs of the professors refers to taughtBy.p_id and professor = 1; teaches more than 3 courses  refers to count(course_id) > 3
CREATED SQL: SELECT T1.p_id FROM taughtBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.professor = 1 GROUP BY T1.p_id HAVING COUNT(DISTINCT T1.course_id) > 3
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Please list the IDs of the top 3 professors that teaches the most courses. IDs of the professors refers to taughtBy.p_id and professor = 1; teaches the most courses refers to max(count(course_id))
CREATED SQL: SELECT T1.p_id FROM taughtBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.professor = 1 GROUP BY T1.p_id ORDER BY COUNT(*) DESC LIMIT 3
END OF QUESTION"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: In total, all the students in the 3rd year of their program are advised by how many professors? 3rd year of their program refers to yearsInProgram = 'Year_3'; professors refers to p_id_dummy
CREATED SQL: SELECT COUNT(DISTINCT T1.p_id_dummy) FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.yearsInProgram = 'Year_3'
END OF QUESTION"
